diff --git a/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_bq24196.c b/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_bq24196.c
index c92f1a18..59ad6ac4 100644
--- a/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_bq24196.c
+++ b/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_bq24196.c
@@ -329,11 +329,11 @@ void get_hw_chip_diff_trim_value(void)
 
     chip_diff_trim_value_4_0 = reg_val_1 | (reg_val_2 << 3);
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] Reg[0x%x]=0x%x, Reg[0x%x]=0x%x, chip_diff_trim_value_4_0=%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] Reg[0x%x]=0x%x, Reg[0x%x]=0x%x, chip_diff_trim_value_4_0=%d\n", 
         0x01C4, upmu_get_reg_value(0x01C4), 0x01C6, upmu_get_reg_value(0x01C6), chip_diff_trim_value_4_0);   
     
     #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] need check reg number\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] need check reg number\n");
     #endif
 
     switch(chip_diff_trim_value_4_0){       
@@ -372,11 +372,11 @@ void get_hw_chip_diff_trim_value(void)
         case 18:   chip_diff_trim_value = 930; break; 
         case 17:   chip_diff_trim_value = 925; break; 
         default:
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] Invalid value(%d)\n", chip_diff_trim_value_4_0);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] Invalid value(%d)\n", chip_diff_trim_value_4_0);
             break;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] %d,%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] %d,%d\n", 
         chip_diff_trim_value_4_0, chip_diff_trim_value);
 }
 
@@ -387,7 +387,7 @@ kal_int32 use_chip_trim_value(kal_int32 not_trim_val)
     ret_val=((not_trim_val*chip_diff_trim_value)/1000);
 
     if (Enable_FGADC_LOG == 1) {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[use_chip_trim_value] %d -> %d\n", not_trim_val, ret_val);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[use_chip_trim_value] %d -> %d\n", not_trim_val, ret_val);
     }
     
     return ret_val;
@@ -595,7 +595,7 @@ kal_int32 fgauge_read_columb(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
             }
             break;
         }
@@ -623,7 +623,7 @@ kal_int32 fgauge_read_columb(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
             }
             break;
         }
@@ -720,7 +720,7 @@ kal_int32 fgauge_read_columb_reset(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
             }
             break;
         }
@@ -748,7 +748,7 @@ kal_int32 fgauge_read_columb_reset(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
             }
             break;
         }
@@ -863,7 +863,7 @@ kal_int32 fgauge_read_current(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 1 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 1 !\r\n");
             }
             break;
         }
@@ -886,7 +886,7 @@ kal_int32 fgauge_read_current(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 2 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 2 !\r\n");
             }
             break;
         }
@@ -1141,7 +1141,7 @@ void fgauge_read_avg_I_V(void)
 
 //    if (Enable_FGADC_LOG == 1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_avg_I_V] AVG voltage[%d], current[%d]\r\n", gFG_voltage, gFG_current);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_avg_I_V] AVG voltage[%d], current[%d]\r\n", gFG_voltage, gFG_current);
     }
 }
 
@@ -1254,7 +1254,7 @@ void fgauge_construct_battery_profile(kal_int32 temperature, BATTERY_PROFILE_STR
     // Dumpt new battery profile
     for (i = 0; i < saddles ; i++)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "<DOD,Voltage> at %d = <%d,%d>\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "<DOD,Voltage> at %d = <%d,%d>\r\n",
             temperature, (temp_profile_p+i)->percentage, (temp_profile_p+i)->voltage);
     }
     
@@ -1402,7 +1402,7 @@ void fgauge_construct_r_table_profile(kal_int32 temperature, R_PROFILE_STRUC_P t
     // Dumpt new r-table profile
     for (i = 0; i < saddles ; i++)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "<Rbat,VBAT> at %d = <%d,%d>\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "<Rbat,VBAT> at %d = <%d,%d>\r\n",
             temperature, (temp_profile_p+i)->resistance, (temp_profile_p+i)->voltage);
     }
     
@@ -1546,12 +1546,12 @@ void fg_qmax_update_for_aging(void)
             // tuning
             gFG_BATT_CAPACITY_aging = (gFG_BATT_CAPACITY_aging * 100) / AGING_TUNING_VALUE;
             
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fg_qmax_update_for_aging] need update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fg_qmax_update_for_aging] need update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
                 gFG_columb, gFG_DOD0, gFG_BATT_CAPACITY_aging);
         }
         else
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fg_qmax_update_for_aging] no update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fg_qmax_update_for_aging] no update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
                 gFG_columb, gFG_DOD0, gFG_BATT_CAPACITY_aging);
         }
     }
@@ -1912,7 +1912,7 @@ kal_int32 fgauge_read_d_by_v(kal_int32 volt_bat)
     profile_p = fgauge_get_profile(TEMPERATURE_T);
     if (profile_p == NULL)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] fgauge get ZCV profile : fail !\r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] fgauge get ZCV profile : fail !\r\n");
         return 100;
     }
 
@@ -2018,7 +2018,7 @@ kal_int32 mtk_imp_tracking(kal_int32 ori_voltage, kal_int32 ori_current, kal_int
         temp_voltage_2 = temp_voltage_1 + ret_compensate_value;
 
         if (Enable_FGADC_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
                 temp_voltage_2,temp_voltage_1,ret_compensate_value,gFG_resistance_bat);
         }
     }
@@ -2030,7 +2030,7 @@ kal_int32 mtk_imp_tracking(kal_int32 ori_voltage, kal_int32 ori_current, kal_int
     gFG_compensate_value = ret_compensate_value;
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
             temp_voltage_2,temp_voltage_1,ret_compensate_value,gFG_resistance_bat);    
     }
 
@@ -2048,12 +2048,12 @@ int get_hw_ocv(void)
 #if defined(SWCHR_POWER_PATH)
     adc_result_reg = upmu_get_rg_adc_out_wakeup_swchr_trim();
     adc_result = (adc_result_reg*r_val_temp*1200)/1024;
-    xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam] get_hw_ocv (swchr) : adc_result_reg=%d, adc_result=%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam] get_hw_ocv (swchr) : adc_result_reg=%d, adc_result=%d\n", 
         adc_result_reg, adc_result);
 #else
     adc_result_reg = upmu_get_rg_adc_out_wakeup_pchr_trim();
     adc_result = (adc_result_reg*r_val_temp*1200)/1024;    
-    xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam] get_hw_ocv (pchr) : adc_result_reg=%d, adc_result=%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam] get_hw_ocv (pchr) : adc_result_reg=%d, adc_result=%d\n", 
         adc_result_reg, adc_result);
 #endif
 
@@ -2074,11 +2074,11 @@ void oam_init(void)
 
     if(oam_init_i == 0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_init] oam_v_ocv_1,oam_v_ocv_2,oam_r_1,oam_r_2,oam_d0,oam_i_ori\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_init] oam_v_ocv_1,oam_v_ocv_2,oam_r_1,oam_r_2,oam_d0,oam_i_ori\n");
         oam_init_i=1;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_init] %d,%d,%d,%d,%d,%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_init] %d,%d,%d,%d,%d,%d\n", 
         oam_v_ocv_1, oam_v_ocv_2, oam_r_1, oam_r_2, oam_d0, oam_i_ori);
 }
 
@@ -2145,7 +2145,7 @@ void oam_run(void)
             case 4:    d5_count_time_rate = (((gFG_BATT_CAPACITY_aging*60*60/100/(650-50))*10)+5)/10;
                        break;                       
             default:
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_charger_type] Invalid value\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_charger_type] Invalid value\n");
                 break;
         }
 
@@ -2195,31 +2195,31 @@ void oam_run(void)
     }
     
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d\n", 
             d5_count, d5_count_time, oam_d_3_pre, oam_d_3, oam_d_4_pre, oam_d_4, oam_d_5);    
     }
 
     if(oam_run_i == 0)
     {
         if (Enable_FGADC_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_run] oam_i_1,oam_i_2,oam_car_1,oam_car_2,oam_d_1,oam_d_2,oam_v_ocv_1,oam_d_3,oam_r_1,oam_v_ocv_2,oam_r_2,vol_bat,vol_bat_hw_ocv,d_hw_ocv\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_run] oam_i_1,oam_i_2,oam_car_1,oam_car_2,oam_d_1,oam_d_2,oam_v_ocv_1,oam_d_3,oam_r_1,oam_v_ocv_2,oam_r_2,vol_bat,vol_bat_hw_ocv,d_hw_ocv\n");
         }
         oam_run_i=1;
     }    
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", 
             oam_i_1,oam_i_2,oam_car_1,oam_car_2,oam_d_1,oam_d_2,oam_v_ocv_1,oam_d_3,oam_r_1,oam_v_ocv_2,oam_r_2,vol_bat,vol_bat_hw_ocv,d_hw_ocv);    
     }
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_total] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_total] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
             gFG_capacity_by_c, gFG_capacity_by_v, gfg_percent_check_point,
             oam_d_1, oam_d_2, oam_d_3, oam_d_4, oam_d_5, gFG_capacity_by_c_init, d_hw_ocv);
     }
 
     if (Enable_FGADC_LOG == 2) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_total_s] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_total_s] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
             gFG_capacity_by_c,        // 1
             gFG_capacity_by_v,        // 2
             gfg_percent_check_point,  // 3
@@ -2234,7 +2234,7 @@ void oam_run(void)
     }
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_total_s_err] %d,%d,%d,%d,%d,%d,%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_total_s_err] %d,%d,%d,%d,%d,%d,%d\n",
             (gFG_capacity_by_c - gFG_capacity_by_v), 
             (gFG_capacity_by_c - gfg_percent_check_point),
             (gFG_capacity_by_c - (100-oam_d_1)), 
@@ -2377,7 +2377,7 @@ void fgauge_Normal_Mode_Work(void)
             //use get_hw_ocv-----------------------------------------------------------------
             gFG_voltage = get_hw_ocv();        
             gFG_capacity_by_v = fgauge_read_capacity_by_v();
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] get_hw_ocv=%d, SOC=%d\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] get_hw_ocv=%d, SOC=%d\n", 
             gFG_voltage, gFG_capacity_by_v);
             //-------------------------------------------------------------------------------
 #endif			
@@ -2392,7 +2392,7 @@ void fgauge_Normal_Mode_Work(void)
 					gFG_capacity_by_v = g_rtc_fg_soc;			 
 				}
 			
-				xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] [1] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
+				xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] [1] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
 					g_rtc_fg_soc, gFG_capacity_by_v);
 			}
 			else
@@ -2405,7 +2405,7 @@ void fgauge_Normal_Mode_Work(void)
 					gFG_capacity_by_v = g_rtc_fg_soc;			 
 				}
 			
-				xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] [2] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
+				xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] [2] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
 					g_rtc_fg_soc, gFG_capacity_by_v);
 			}		
             //-------------------------------------------------------------------------------
@@ -2424,21 +2424,21 @@ void fgauge_Normal_Mode_Work(void)
         bat_volt_check_point = gFG_capacity;
         gfg_percent_check_point = bat_volt_check_point;        
 
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] update DOD0 after booting %d s\r\n", (MAX_BOOTING_TIME_FGCURRENT));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] update DOD0 after booting %d s\r\n", (MAX_BOOTING_TIME_FGCURRENT));
 
         //OAM (only auxadc mode)        
         oam_init();    
 
         #if defined(CHANGE_TRACKING_POINT)
         gFG_15_vlot = fgauge_read_v_by_capacity( (100-g_tracking_point) );
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
         #else
         //gFG_15_vlot = fgauge_read_v_by_capacity(86); //14%
         gFG_15_vlot = fgauge_read_v_by_capacity( (100-g_tracking_point) );
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
         if( (gFG_15_vlot > 3800) || (gFG_15_vlot < 3600) ) 
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] gFG_15_vlot(%d) over range, reset to 3700\r\n", gFG_15_vlot);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] gFG_15_vlot(%d) over range, reset to 3700\r\n", gFG_15_vlot);
             gFG_15_vlot = 3700;
         }
         #endif        
@@ -2446,7 +2446,7 @@ void fgauge_Normal_Mode_Work(void)
         //double check
         if(gFG_current_auto_detect_R_fg_total == 0)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "gFG_current_auto_detect_R_fg_total=0, need double check [2]\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "gFG_current_auto_detect_R_fg_total=0, need double check [2]\n");
             
             gFG_current_auto_detect_R_fg_count = 0;
             
@@ -2464,7 +2464,7 @@ void fgauge_Normal_Mode_Work(void)
             
             batteryBufferFirst = KAL_FALSE; // for init array values when measuring by AUXADC 
             
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Detect NO Rfg, use AUXADC report. (%d=%d/%d)(%d)\r\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Detect NO Rfg, use AUXADC report. (%d=%d/%d)(%d)\r\n", 
                 gFG_current_auto_detect_R_fg_result, gFG_current_auto_detect_R_fg_total,
                 gFG_current_auto_detect_R_fg_count, gForceADCsolution);            
         }
@@ -2474,13 +2474,13 @@ void fgauge_Normal_Mode_Work(void)
             {
                 gForceADCsolution=0;
         
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Detect Rfg, use FG report. (%d=%d/%d)(%d)\r\n", 
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Detect Rfg, use FG report. (%d=%d/%d)(%d)\r\n", 
                 gFG_current_auto_detect_R_fg_result, gFG_current_auto_detect_R_fg_total,
                 gFG_current_auto_detect_R_fg_count, gForceADCsolution);
         }
             else
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Detect Rfg, but use AUXADC report. due to gForceADCsolution=%d \r\n", 
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Detect Rfg, but use AUXADC report. due to gForceADCsolution=%d \r\n", 
                     gForceADCsolution);
             }
         }
@@ -2657,7 +2657,7 @@ void fgauge_initialization(void)
 
     //reset HW FG
     ret=pmic_config_interface(FGADC_CON0, 0x7100, 0xFF00, 0x0);
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** [fgauge_initialization] reset HW FG!\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** [fgauge_initialization] reset HW FG!\n" );
     
 // 2. SW algorithm initialization
     gFG_voltage = fgauge_read_voltage();            
@@ -2678,7 +2678,7 @@ void fgauge_initialization(void)
     if(g_ocv_lookup_done == 0)
     {
         gFG_capacity = fgauge_read_capacity(0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "g_ocv_loopup_done is 0, do fgauge_read_capacity(0)\n" );
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "g_ocv_loopup_done is 0, do fgauge_read_capacity(0)\n" );
     }
     else
     {
@@ -2729,28 +2729,28 @@ void FGADC_Reset_SW_Parameter(void)
     kal_uint32 ret = 0;
 
 #if 0
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Todo \r\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Todo \r\n");
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Start \r\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Start \r\n");
     gFG_SW_CoulombCounter = 0;    
     while(val_car != 0x0)
     {        
         ret=pmic_config_interface(FGADC_CON0, 0x7100, 0xFF00, 0x0);        
         gFG_columb = fgauge_read_columb_reset();
         val_car = gFG_columb;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "#");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "#");
     }
     gFG_columb = 0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Done \r\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Done \r\n");
 
     if(g_Calibration_FG==1)
     {                        
         gFG_DOD0 = 0;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FG Calibration DOD0=%d and DOD1=%d \r\n", gFG_DOD0, gFG_DOD1);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FG Calibration DOD0=%d and DOD1=%d \r\n", gFG_DOD0, gFG_DOD1);
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Update DOD0(%d) by %d \r\n", gFG_DOD0, gFG_DOD1);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Update DOD0(%d) by %d \r\n", gFG_DOD0, gFG_DOD1);
         gFG_DOD0 = gFG_DOD1;        
     }
 #endif
@@ -2810,7 +2810,7 @@ kal_int32 get_dynamic_period(int first_use, int first_wakeup_time, int battery_c
         if(g_car_sleep > g_car_wakeup)
         {
             g_car_sleep = g_car_wakeup;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_dynamic_period] reset g_car_sleep\r\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_dynamic_period] reset g_car_sleep\r\n");
         }
 
         I_sleep = ((g_car_wakeup-g_car_sleep)*3600)/g_last_time; // unit: second
@@ -2842,7 +2842,7 @@ kal_int32 get_dynamic_period(int first_use, int first_wakeup_time, int battery_c
         if(ret_val == 0)
             ret_val = first_wakeup_time;
 
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_dynamic_period] g_car_instant=%d, g_car_wakeup=%d, g_car_sleep=%d, I_sleep=%d, gFG_BATT_CAPACITY=%d, g_last_time=%d, new_time=%d\r\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_dynamic_period] g_car_instant=%d, g_car_wakeup=%d, g_car_sleep=%d, I_sleep=%d, gFG_BATT_CAPACITY=%d, g_last_time=%d, new_time=%d\r\n", 
             g_car_instant, g_car_wakeup, g_car_sleep, I_sleep, gFG_BATT_CAPACITY, g_last_time, new_time);        
         
         //update parameter
@@ -2851,7 +2851,7 @@ kal_int32 get_dynamic_period(int first_use, int first_wakeup_time, int battery_c
     }    
 #else
     ret_val = first_wakeup_time;
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_dynamic_period] ret_val = %d\n", first_wakeup_time);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_dynamic_period] ret_val = %d\n", first_wakeup_time);
 #endif
 
     return ret_val;
@@ -2906,7 +2906,7 @@ void FGADC_thread_kthread(void)
 
     //if (Enable_FGADC_LOG >= 1) 
     //{    
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
             gFG_Is_Charging,gFG_current,
             gFG_SW_CoulombCounter,gFG_columb,gFG_voltage,gFG_capacity_by_v,gFG_capacity_by_c,gFG_capacity_by_c_init, 
             gFG_BATT_CAPACITY,gFG_BATT_CAPACITY_aging,gFG_compensate_value,gFG_ori_voltage,OCV_BOARD_COMPESATE,R_FG_BOARD_SLOPE,
@@ -2923,7 +2923,7 @@ void FGADC_thread_kthread(void)
         //double check
         if(gFG_current_auto_detect_R_fg_total == 0)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "gFG_current_auto_detect_R_fg_total=0, need double check\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "gFG_current_auto_detect_R_fg_total=0, need double check\n");
             
             gFG_current_auto_detect_R_fg_count = 0;
             
@@ -2965,18 +2965,18 @@ ssize_t fgadc_log_write( struct file *filp, const char __user *buff,
                         unsigned long len, void *data )
 {
     if (copy_from_user( &proc_fgadc_data, buff, len )) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "fgadc_log_write error.\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "fgadc_log_write error.\n");
         return -EFAULT;
     }
 
     if (proc_fgadc_data[0] == '1') {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable FGADC driver log system\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable FGADC driver log system\n");
         Enable_FGADC_LOG = 1;
     } else if (proc_fgadc_data[0] == '2') {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable FGADC driver log system:2\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable FGADC driver log system:2\n");
         Enable_FGADC_LOG = 2;    
     } else {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "Disable FGADC driver log system\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "Disable FGADC driver log system\n");
         Enable_FGADC_LOG = 0;
     }
     
@@ -2990,11 +2990,11 @@ int init_proc_log_fg(void)
     
     if (proc_entry_fgadc == NULL) {
         ret = -ENOMEM;
-          xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log_fg: Couldn't create proc entry\n");
+          xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log_fg: Couldn't create proc entry\n");
     } else {
         proc_entry_fgadc->write_proc = fgadc_log_write;
         //proc_entry->owner = THIS_MODULE;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log_fg loaded.\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log_fg loaded.\n");
     }
   
     return ret;
@@ -3016,9 +3016,9 @@ static ssize_t show_FG_Current(struct device *dev,struct device_attribute *attr,
     {
         gFG_current_inout_battery = gFG_current;
     }
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] %d\r\n", gFG_current_inout_battery);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] %d\r\n", gFG_current_inout_battery);
     //-----------------------------------------------
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] gFG_current_inout_battery : %d\n", gFG_current_inout_battery);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] gFG_current_inout_battery : %d\n", gFG_current_inout_battery);
     return sprintf(buf, "%d\n", gFG_current_inout_battery);
 }
 static ssize_t store_FG_Current(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3032,7 +3032,7 @@ static DEVICE_ATTR(FG_Current, 0664, show_FG_Current, store_FG_Current);
 ///////////////////////////////////////////////////////////////////////////////////////////
 static ssize_t show_FG_g_fg_dbg_bat_volt(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_volt : %d\n", g_fg_dbg_bat_volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_volt : %d\n", g_fg_dbg_bat_volt);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_volt);
 }
 static ssize_t store_FG_g_fg_dbg_bat_volt(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3043,7 +3043,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_volt, 0664, show_FG_g_fg_dbg_bat_volt, store_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_current(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_current : %d\n", g_fg_dbg_bat_current);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_current : %d\n", g_fg_dbg_bat_current);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_current);
 }
 static ssize_t store_FG_g_fg_dbg_bat_current(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3054,7 +3054,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_current, 0664, show_FG_g_fg_dbg_bat_current,
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_zcv(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_zcv : %d\n", g_fg_dbg_bat_zcv);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_zcv : %d\n", g_fg_dbg_bat_zcv);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_zcv);
 }
 static ssize_t store_FG_g_fg_dbg_bat_zcv(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3065,7 +3065,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_zcv, 0664, show_FG_g_fg_dbg_bat_zcv, store_FG
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_temp(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_temp : %d\n", g_fg_dbg_bat_temp);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_temp : %d\n", g_fg_dbg_bat_temp);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_temp);
 }
 static ssize_t store_FG_g_fg_dbg_bat_temp(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3076,7 +3076,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_temp, 0664, show_FG_g_fg_dbg_bat_temp, store_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_r(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_r : %d\n", g_fg_dbg_bat_r);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_r : %d\n", g_fg_dbg_bat_r);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_r);
 }
 static ssize_t store_FG_g_fg_dbg_bat_r(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3087,7 +3087,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_r, 0664, show_FG_g_fg_dbg_bat_r, store_FG_g_f
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_car(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_car : %d\n", g_fg_dbg_bat_car);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_car : %d\n", g_fg_dbg_bat_car);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_car);
 }
 static ssize_t store_FG_g_fg_dbg_bat_car(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3098,7 +3098,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_car, 0664, show_FG_g_fg_dbg_bat_car, store_FG
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_qmax(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_qmax : %d\n", g_fg_dbg_bat_qmax);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_qmax : %d\n", g_fg_dbg_bat_qmax);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_qmax);
 }
 static ssize_t store_FG_g_fg_dbg_bat_qmax(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3109,7 +3109,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_qmax, 0664, show_FG_g_fg_dbg_bat_qmax, store_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_d0(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_d0 : %d\n", g_fg_dbg_d0);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_d0 : %d\n", g_fg_dbg_d0);
     return sprintf(buf, "%d\n", g_fg_dbg_d0);
 }
 static ssize_t store_FG_g_fg_dbg_d0(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3120,7 +3120,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_d0, 0664, show_FG_g_fg_dbg_d0, store_FG_g_fg_dbg_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_d1(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_d1 : %d\n", g_fg_dbg_d1);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_d1 : %d\n", g_fg_dbg_d1);
     return sprintf(buf, "%d\n", g_fg_dbg_d1);
 }
 static ssize_t store_FG_g_fg_dbg_d1(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3131,7 +3131,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_d1, 0664, show_FG_g_fg_dbg_d1, store_FG_g_fg_dbg_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_percentage(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_percentage : %d\n", g_fg_dbg_percentage);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_percentage : %d\n", g_fg_dbg_percentage);
     return sprintf(buf, "%d\n", g_fg_dbg_percentage);
 }
 static ssize_t store_FG_g_fg_dbg_percentage(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3142,7 +3142,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_percentage, 0664, show_FG_g_fg_dbg_percentage, st
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_percentage_fg(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_percentage_fg : %d\n", g_fg_dbg_percentage_fg);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_percentage_fg : %d\n", g_fg_dbg_percentage_fg);
     return sprintf(buf, "%d\n", g_fg_dbg_percentage_fg);
 }
 static ssize_t store_FG_g_fg_dbg_percentage_fg(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3153,7 +3153,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_percentage_fg, 0664, show_FG_g_fg_dbg_percentage_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_percentage_voltmode(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_percentage_voltmode : %d\n", g_fg_dbg_percentage_voltmode);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_percentage_voltmode : %d\n", g_fg_dbg_percentage_voltmode);
     return sprintf(buf, "%d\n", g_fg_dbg_percentage_voltmode);
 }
 static ssize_t store_FG_g_fg_dbg_percentage_voltmode(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3170,9 +3170,9 @@ static int mt6320_fgadc_probe(struct platform_device *dev)
     int ret_device_file = 0;
 
 #if defined(CONFIG_POWER_EXT)
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] INIT : EVB \n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] INIT : EVB \n");
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] MT6320 FGADC driver probe!! \n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] MT6320 FGADC driver probe!! \n" );
 
     /* FG driver init */
     //fgauge_initialization();
@@ -3202,14 +3202,14 @@ static int mt6320_fgadc_probe(struct platform_device *dev)
 
 static int mt6320_fgadc_remove(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] MT6320 FGADC driver remove!! \n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] MT6320 FGADC driver remove!! \n" );
 
     return 0;
 }
 
 static void mt6320_fgadc_shutdown(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] MT6320 FGADC driver shutdown!! \n" );        
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] MT6320 FGADC driver shutdown!! \n" );        
 }
 
 static int mt6320_fgadc_suspend(struct platform_device *dev, pm_message_t state)    
@@ -3259,17 +3259,17 @@ static int __init mt6320_fgadc_init(void)
     
     ret = platform_device_register(&MT6320_fgadc_device);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_fgadc_driver] Unable to device register(%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_fgadc_driver] Unable to device register(%d)\n", ret);
         return ret;
     }
     
     ret = platform_driver_register(&mt6320_fgadc_driver);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_fgadc_driver] Unable to register driver (%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_fgadc_driver] Unable to register driver (%d)\n", ret);
         return ret;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_fgadc_driver] Initialization : DONE \n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_fgadc_driver] Initialization : DONE \n");
 
     return 0;
 
diff --git a/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_ncp1851.c b/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_ncp1851.c
index 61b4be63..570eae49 100644
--- a/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_ncp1851.c
+++ b/drivers/misc/mediatek/power/mt8127/addon/mt6320_fuel_gauge_ncp1851.c
@@ -483,11 +483,11 @@ void get_hw_chip_diff_trim_value(void)
 
     chip_diff_trim_value_4_0 = reg_val_1 | (reg_val_2 << 3);
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] Reg[0x%x]=0x%x, Reg[0x%x]=0x%x, chip_diff_trim_value_4_0=%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] Reg[0x%x]=0x%x, Reg[0x%x]=0x%x, chip_diff_trim_value_4_0=%d\n", 
         0x01C4, upmu_get_reg_value(0x01C4), 0x01C6, upmu_get_reg_value(0x01C6), chip_diff_trim_value_4_0);   
     
     #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] need check reg number\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] need check reg number\n");
     #endif
 
     switch(chip_diff_trim_value_4_0){       
@@ -526,11 +526,11 @@ void get_hw_chip_diff_trim_value(void)
         case 18:   chip_diff_trim_value = 930; break; 
         case 17:   chip_diff_trim_value = 925; break; 
         default:
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] Invalid value(%d)\n", chip_diff_trim_value_4_0);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] Invalid value(%d)\n", chip_diff_trim_value_4_0);
             break;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Chip_Trim] %d,%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Chip_Trim] %d,%d\n", 
         chip_diff_trim_value_4_0, chip_diff_trim_value);
 }
 
@@ -541,7 +541,7 @@ kal_int32 use_chip_trim_value(kal_int32 not_trim_val)
     ret_val=((not_trim_val*chip_diff_trim_value)/1000);
 
     if (Enable_FGADC_LOG == 1) {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[use_chip_trim_value] %d -> %d\n", not_trim_val, ret_val);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[use_chip_trim_value] %d -> %d\n", not_trim_val, ret_val);
     }
     
     return ret_val;
@@ -749,7 +749,7 @@ kal_int32 fgauge_read_columb(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
             }
             break;
         }
@@ -777,7 +777,7 @@ kal_int32 fgauge_read_columb(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
             }
             break;
         }
@@ -875,7 +875,7 @@ kal_int32 fgauge_read_columb_reset(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 1 !\r\n");
             }
             break;
         }
@@ -903,7 +903,7 @@ kal_int32 fgauge_read_columb_reset(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_columb] fg_get_data_ready_status timeout 2 !\r\n");
             }
             break;
         }
@@ -1019,7 +1019,7 @@ kal_int32 fgauge_read_current(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 1 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 1 !\r\n");
             }
             break;
         }
@@ -1042,7 +1042,7 @@ kal_int32 fgauge_read_current(void)
         if(m>1000)
         {
             if (Enable_FGADC_LOG == 1){
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 2 !\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_current] fg_get_data_ready_status timeout 2 !\r\n");
             }
             break;
         }
@@ -1267,7 +1267,7 @@ void fgauge_read_avg_I_V(void)
         vol[i] = vol[i] + OCV_BOARD_COMPESATE;
 
         cur_sum += gFG_current;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_avg_I_V] #%d voltage[%d], current[%d]\r\n", i, vol[i], gFG_current);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_avg_I_V] #%d voltage[%d], current[%d]\r\n", i, vol[i], gFG_current);
     }
 
     //sorting vol
@@ -1288,7 +1288,7 @@ void fgauge_read_avg_I_V(void)
     {
 //        if (Enable_FGADC_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_avg_I_V] vol[%d] = %d\r\n", i, vol[i]);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_avg_I_V] vol[%d] = %d\r\n", i, vol[i]);
         }
         vol_sum += vol[i];
     }
@@ -1298,7 +1298,7 @@ void fgauge_read_avg_I_V(void)
         
 //    if (Enable_FGADC_LOG == 1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_avg_I_V] AVG voltage[%d], current[%d]\r\n", gFG_voltage, gFG_current);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_avg_I_V] AVG voltage[%d], current[%d]\r\n", gFG_voltage, gFG_current);
     }
 }
 
@@ -1703,12 +1703,12 @@ void fg_qmax_update_for_aging(void)
             // tuning
             gFG_BATT_CAPACITY_aging = (gFG_BATT_CAPACITY_aging * 100) / AGING_TUNING_VALUE;
             
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fg_qmax_update_for_aging] need update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fg_qmax_update_for_aging] need update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
                 gFG_columb, gFG_DOD0, gFG_BATT_CAPACITY_aging);
         }
         else
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fg_qmax_update_for_aging] no update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fg_qmax_update_for_aging] no update : gFG_columb=%d, gFG_DOD0=%d, new_qmax=%d\r\n", 
                 gFG_columb, gFG_DOD0, gFG_BATT_CAPACITY_aging);
         }
     }
@@ -2075,7 +2075,7 @@ kal_int32 fgauge_read_d_by_v(kal_int32 volt_bat)
     profile_p = fgauge_get_profile(TEMPERATURE_T);
     if (profile_p == NULL)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] fgauge get ZCV profile : fail !\r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] fgauge get ZCV profile : fail !\r\n");
         return 100;
     }
 
@@ -2181,7 +2181,7 @@ kal_int32 mtk_imp_tracking(kal_int32 ori_voltage, kal_int32 ori_current, kal_int
         temp_voltage_2 = temp_voltage_1 + ret_compensate_value;
 
         if (Enable_FGADC_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
                 temp_voltage_2,temp_voltage_1,ret_compensate_value,gFG_resistance_bat);
         }
     }
@@ -2193,7 +2193,7 @@ kal_int32 mtk_imp_tracking(kal_int32 ori_voltage, kal_int32 ori_current, kal_int
     gFG_compensate_value = ret_compensate_value;
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[mtk_imp_tracking] temp_voltage_2=%d,temp_voltage_1=%d,ret_compensate_value=%d,gFG_resistance_bat=%d\n", 
             temp_voltage_2,temp_voltage_1,ret_compensate_value,gFG_resistance_bat);    
     }
 
@@ -2211,12 +2211,12 @@ int get_hw_ocv(void)
 #if 1//defined(SWCHR_POWER_PATH)
     adc_result_reg = upmu_get_rg_adc_out_wakeup_swchr_trim();
     adc_result = (adc_result_reg*r_val_temp*1200)/1024;
-    xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam] get_hw_ocv (swchr) : adc_result_reg=%d, adc_result=%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam] get_hw_ocv (swchr) : adc_result_reg=%d, adc_result=%d\n", 
         adc_result_reg, adc_result);
 #else
     adc_result_reg = upmu_get_rg_adc_out_wakeup_pchr_trim();
     adc_result = (adc_result_reg*r_val_temp*1200)/1024;    
-    xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam] get_hw_ocv (pchr) : adc_result_reg=%d, adc_result=%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam] get_hw_ocv (pchr) : adc_result_reg=%d, adc_result=%d\n", 
         adc_result_reg, adc_result);
 #endif
     adc_result += g_hw_ocv_tune_value;
@@ -2236,11 +2236,11 @@ void oam_init(void)
 
     if(oam_init_i == 0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_init] oam_v_ocv_1,oam_v_ocv_2,oam_r_1,oam_r_2,oam_d0,oam_i_ori\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_init] oam_v_ocv_1,oam_v_ocv_2,oam_r_1,oam_r_2,oam_d0,oam_i_ori\n");
         oam_init_i=1;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_init] %d,%d,%d,%d,%d,%d\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_init] %d,%d,%d,%d,%d,%d\n", 
         oam_v_ocv_1, oam_v_ocv_2, oam_r_1, oam_r_2, oam_d0, oam_i_ori);
 }
 
@@ -2307,7 +2307,7 @@ void oam_run(void)
             case 4:    d5_count_time_rate = (((gFG_BATT_CAPACITY_aging*60*60/100/(650-50))*10)+5)/10;
                        break;                       
             default:
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_charger_type] Invalid value\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_charger_type] Invalid value\n");
                 break;
         }
 
@@ -2357,31 +2357,31 @@ void oam_run(void)
     }
     
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d\n", 
             d5_count, d5_count_time, oam_d_3_pre, oam_d_3, oam_d_4_pre, oam_d_4, oam_d_5);    
     }
 
     if(oam_run_i == 0)
     {
         if (Enable_FGADC_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_run] oam_i_1,oam_i_2,oam_car_1,oam_car_2,oam_d_1,oam_d_2,oam_v_ocv_1,oam_d_3,oam_r_1,oam_v_ocv_2,oam_r_2,vol_bat,vol_bat_hw_ocv,d_hw_ocv\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_run] oam_i_1,oam_i_2,oam_car_1,oam_car_2,oam_d_1,oam_d_2,oam_v_ocv_1,oam_d_3,oam_r_1,oam_v_ocv_2,oam_r_2,vol_bat,vol_bat_hw_ocv,d_hw_ocv\n");
         }
         oam_run_i=1;
     }    
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_run] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", 
             oam_i_1,oam_i_2,oam_car_1,oam_car_2,oam_d_1,oam_d_2,oam_v_ocv_1,oam_d_3,oam_r_1,oam_v_ocv_2,oam_r_2,vol_bat,vol_bat_hw_ocv,d_hw_ocv);    
     }
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_total] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_total] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
             gFG_capacity_by_c, gFG_capacity_by_v, gfg_percent_check_point,
             oam_d_1, oam_d_2, oam_d_3, oam_d_4, oam_d_5, gFG_capacity_by_c_init, d_hw_ocv);
     }
 
     if (Enable_FGADC_LOG == 2) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_total_s] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_total_s] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
             gFG_capacity_by_c,        // 1
             gFG_capacity_by_v,        // 2
             gfg_percent_check_point,  // 3
@@ -2396,7 +2396,7 @@ void oam_run(void)
     }
 
     if (Enable_FGADC_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/FGOAM", "[oam_total_s_err] %d,%d,%d,%d,%d,%d,%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/FGOAM", "[oam_total_s_err] %d,%d,%d,%d,%d,%d,%d\n",
             (gFG_capacity_by_c - gFG_capacity_by_v), 
             (gFG_capacity_by_c - gfg_percent_check_point),
             (gFG_capacity_by_c - (100-oam_d_1)), 
@@ -2539,10 +2539,10 @@ void fgauge_Normal_Mode_Work(void)
             {
             	  vol_adc = gFG_voltage;
                 gFG_voltage = get_hw_ocv(); //use HW OCV
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_read_avg_I_V] HW OCV[%d], SW OCV[%d]\r\n", gFG_voltage, vol_adc);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_read_avg_I_V] HW OCV[%d], SW OCV[%d]\r\n", gFG_voltage, vol_adc);
             }              
             gFG_capacity_by_v = fgauge_read_capacity_by_v();
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] get_hw_ocv=%d, SOC=%d\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] get_hw_ocv=%d, SOC=%d\n", 
             gFG_voltage, gFG_capacity_by_v);
             //-------------------------------------------------------------------------------
 #endif			
@@ -2557,7 +2557,7 @@ void fgauge_Normal_Mode_Work(void)
                     gFG_capacity_by_v = g_rtc_fg_soc;			 
                 }
 			
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] [1] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] [1] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
                 g_rtc_fg_soc, gFG_capacity_by_v);
             }
             else
@@ -2570,7 +2570,7 @@ void fgauge_Normal_Mode_Work(void)
                     gFG_capacity_by_v = g_rtc_fg_soc;			 
                 }
 			
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] [2] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] [2] g_rtc_fg_soc=%d, gFG_capacity_by_v=%d\n", 
                 g_rtc_fg_soc, gFG_capacity_by_v);
             }		
             //-------------------------------------------------------------------------------        	
@@ -2588,21 +2588,21 @@ void fgauge_Normal_Mode_Work(void)
         bat_volt_check_point = gFG_capacity;
         gfg_percent_check_point = bat_volt_check_point;        
 
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] update DOD0 after booting %d s\r\n", (MAX_BOOTING_TIME_FGCURRENT));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] update DOD0 after booting %d s\r\n", (MAX_BOOTING_TIME_FGCURRENT));
 
         //OAM (only auxadc mode)        
         oam_init();    
 
         #if defined(CHANGE_TRACKING_POINT)
         gFG_15_vlot = fgauge_read_v_by_capacity( (100-g_tracking_point) );
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
         #else
         //gFG_15_vlot = fgauge_read_v_by_capacity(86); //14%
         gFG_15_vlot = fgauge_read_v_by_capacity( (100-g_tracking_point) );
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] gFG_15_vlot = %dmV\r\n", gFG_15_vlot);        
         if( (gFG_15_vlot > 3800) || (gFG_15_vlot < 3600) ) 
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] gFG_15_vlot(%d) over range, reset to 3700\r\n", gFG_15_vlot);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] gFG_15_vlot(%d) over range, reset to 3700\r\n", gFG_15_vlot);
             gFG_15_vlot = 3700;
         }
         #endif        
@@ -2614,7 +2614,7 @@ void fgauge_Normal_Mode_Work(void)
             
             batteryBufferFirst = KAL_FALSE; // for init array values when measuring by AUXADC 
             
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Detect NO Rfg, use AUXADC report. (%d=%d/%d)(%d)\r\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Detect NO Rfg, use AUXADC report. (%d=%d/%d)(%d)\r\n", 
                 gFG_current_auto_detect_R_fg_result, gFG_current_auto_detect_R_fg_total,
                 gFG_current_auto_detect_R_fg_count, gForceADCsolution);            
         }
@@ -2624,13 +2624,13 @@ void fgauge_Normal_Mode_Work(void)
             {
                 gForceADCsolution=0;
         
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Detect Rfg, use FG report. (%d=%d/%d)(%d)\r\n", 
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Detect Rfg, use FG report. (%d=%d/%d)(%d)\r\n", 
                 gFG_current_auto_detect_R_fg_result, gFG_current_auto_detect_R_fg_total,
                 gFG_current_auto_detect_R_fg_count, gForceADCsolution);
         }
             else
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Detect Rfg, but use AUXADC report. due to gForceADCsolution=%d \r\n", 
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Detect Rfg, but use AUXADC report. due to gForceADCsolution=%d \r\n", 
                     gForceADCsolution);
             }
         }
@@ -2951,7 +2951,7 @@ void fgauge_precharge_init(void)
     
     //reset HW FG
     ret=pmic_config_interface(FGADC_CON0, 0x7100, 0xFF00, 0x0);
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** [fgauge_initialization] reset HW FG!\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** [fgauge_initialization] reset HW FG!\n" );
 
     i=0;
     while( current_val == 0 )
@@ -2967,7 +2967,7 @@ void fgauge_precharge_init(void)
 #endif
 
     if(current_val == 0)
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_precharge_init] current value is still 0\r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_precharge_init] current value is still 0\r\n");
 }
 
 void fgauge_precharge_uninit(void)
@@ -2981,7 +2981,7 @@ void fgauge_precharge_uninit(void)
     {        
         ret=pmic_config_interface(FGADC_CON0, 0x7100, 0xFF00, 0x0);        
         val_car = fgauge_read_columb_reset();
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "#");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "#");
     }    
 
     //(1)	i2c_write (0x61, 0x69, 0x29); // Disable FGADC
@@ -3072,7 +3072,7 @@ kal_int32 fgauge_precharge_compensated_voltage(kal_int32 recursion_time)
 
     if (Enable_FGADC_LOG == 1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[fgauge_precharge_compensated_voltage] %d,%d,%d,%d\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[fgauge_precharge_compensated_voltage] %d,%d,%d,%d\r\n",
         temp_voltage_1, temp_voltage_2, bat_res, ret_compensate_value);
     }
 
@@ -3156,7 +3156,7 @@ void fgauge_initialization(void)
 
     //reset HW FG
     ret=pmic_config_interface(FGADC_CON0, 0x7100, 0xFF00, 0x0);
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** [fgauge_initialization] reset HW FG!\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** [fgauge_initialization] reset HW FG!\n" );
     
 // 2. SW algorithm initialization
     gFG_voltage = fgauge_read_voltage();            
@@ -3176,7 +3176,7 @@ void fgauge_initialization(void)
     if(g_ocv_lookup_done == 0)
     {
         gFG_capacity = fgauge_read_capacity(0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "g_ocv_loopup_done is 0, do fgauge_read_capacity(0)\n" );
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "g_ocv_loopup_done is 0, do fgauge_read_capacity(0)\n" );
     }
     else
     {
@@ -3227,28 +3227,28 @@ void FGADC_Reset_SW_Parameter(void)
     kal_uint32 ret = 0;
 
 #if 0
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Todo \r\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Todo \r\n");
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Start \r\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Start \r\n");
     gFG_SW_CoulombCounter = 0;    
     while(val_car != 0x0)
     {        
         ret=pmic_config_interface(FGADC_CON0, 0x7100, 0xFF00, 0x0);        
         gFG_columb = fgauge_read_columb_reset();
         val_car = gFG_columb;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "#");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "#");
     }
     gFG_columb = 0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Done \r\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FGADC_Reset_SW_Parameter : Done \r\n");
 
     if(g_Calibration_FG==1)
     {                        
         gFG_DOD0 = 0;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] FG Calibration DOD0=%d and DOD1=%d \r\n", gFG_DOD0, gFG_DOD1);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] FG Calibration DOD0=%d and DOD1=%d \r\n", gFG_DOD0, gFG_DOD1);
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] Update DOD0(%d) by %d \r\n", gFG_DOD0, gFG_DOD1);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] Update DOD0(%d) by %d \r\n", gFG_DOD0, gFG_DOD1);
         gFG_DOD0 = gFG_DOD1;        
     }
 #endif
@@ -3308,7 +3308,7 @@ kal_int32 get_dynamic_period(int first_use, int first_wakeup_time, int battery_c
         if(g_car_sleep > g_car_wakeup)
         {
             g_car_sleep = g_car_wakeup;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_dynamic_period] reset g_car_sleep\r\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_dynamic_period] reset g_car_sleep\r\n");
         }
 
         I_sleep = ((g_car_wakeup-g_car_sleep)*3600)/g_last_time; // unit: second
@@ -3340,7 +3340,7 @@ kal_int32 get_dynamic_period(int first_use, int first_wakeup_time, int battery_c
         if(ret_val == 0)
             ret_val = first_wakeup_time;
 
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_dynamic_period] g_car_instant=%d, g_car_wakeup=%d, g_car_sleep=%d, I_sleep=%d, gFG_BATT_CAPACITY=%d, g_last_time=%d, new_time=%d\r\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_dynamic_period] g_car_instant=%d, g_car_wakeup=%d, g_car_sleep=%d, I_sleep=%d, gFG_BATT_CAPACITY=%d, g_last_time=%d, new_time=%d\r\n", 
             g_car_instant, g_car_wakeup, g_car_sleep, I_sleep, gFG_BATT_CAPACITY, g_last_time, new_time);        
         
         //update parameter
@@ -3349,7 +3349,7 @@ kal_int32 get_dynamic_period(int first_use, int first_wakeup_time, int battery_c
     }    
 #else
     ret_val = first_wakeup_time;
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_dynamic_period] ret_val = %d\n", first_wakeup_time);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_dynamic_period] ret_val = %d\n", first_wakeup_time);
 #endif
 
     return ret_val;
@@ -3404,7 +3404,7 @@ void FGADC_thread_kthread(void)
 
     //if (Enable_FGADC_LOG >= 1) 
     //{    
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
             gFG_Is_Charging,gFG_current,
             gFG_SW_CoulombCounter,gFG_columb,gFG_voltage,gFG_capacity_by_v,gFG_capacity_by_c,gFG_capacity_by_c_init, 
             gFG_BATT_CAPACITY,gFG_BATT_CAPACITY_aging,gFG_compensate_value,gFG_ori_voltage,OCV_BOARD_COMPESATE,R_FG_BOARD_SLOPE,
@@ -3421,7 +3421,7 @@ void FGADC_thread_kthread(void)
         //double check
         if(gFG_current_auto_detect_R_fg_total == 0)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "gFG_current_auto_detect_R_fg_total=0, need double check\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "gFG_current_auto_detect_R_fg_total=0, need double check\n");
             
             gFG_current_auto_detect_R_fg_count = 0;
             
@@ -3463,18 +3463,18 @@ ssize_t fgadc_log_write( struct file *filp, const char __user *buff,
                         unsigned long len, void *data )
 {
     if (copy_from_user( &proc_fgadc_data, buff, len )) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "fgadc_log_write error.\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "fgadc_log_write error.\n");
         return -EFAULT;
     }
 
     if (proc_fgadc_data[0] == '1') {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable FGADC driver log system\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable FGADC driver log system\n");
         Enable_FGADC_LOG = 1;
     } else if (proc_fgadc_data[0] == '2') {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable FGADC driver log system:2\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable FGADC driver log system:2\n");
         Enable_FGADC_LOG = 2;    
     } else {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "Disable FGADC driver log system\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "Disable FGADC driver log system\n");
         Enable_FGADC_LOG = 0;
     }
     
@@ -3488,11 +3488,11 @@ int init_proc_log_fg(void)
     
     if (proc_entry_fgadc == NULL) {
         ret = -ENOMEM;
-          xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log_fg: Couldn't create proc entry\n");
+          xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log_fg: Couldn't create proc entry\n");
     } else {
         proc_entry_fgadc->write_proc = fgadc_log_write;
         //proc_entry->owner = THIS_MODULE;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log_fg loaded.\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log_fg loaded.\n");
     }
   
     return ret;
@@ -3514,9 +3514,9 @@ static ssize_t show_FG_Current(struct device *dev,struct device_attribute *attr,
     {
         gFG_current_inout_battery = gFG_current;
     }
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] %d\r\n", gFG_current_inout_battery);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] %d\r\n", gFG_current_inout_battery);
     //-----------------------------------------------
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] gFG_current_inout_battery : %d\n", gFG_current_inout_battery);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] gFG_current_inout_battery : %d\n", gFG_current_inout_battery);
     return sprintf(buf, "%d\n", gFG_current_inout_battery);
 }
 static ssize_t store_FG_Current(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3530,7 +3530,7 @@ static DEVICE_ATTR(FG_Current, 0664, show_FG_Current, store_FG_Current);
 ///////////////////////////////////////////////////////////////////////////////////////////
 static ssize_t show_FG_g_fg_dbg_bat_volt(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_volt : %d\n", g_fg_dbg_bat_volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_volt : %d\n", g_fg_dbg_bat_volt);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_volt);
 }
 static ssize_t store_FG_g_fg_dbg_bat_volt(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3541,7 +3541,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_volt, 0664, show_FG_g_fg_dbg_bat_volt, store_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_current(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_current : %d\n", g_fg_dbg_bat_current);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_current : %d\n", g_fg_dbg_bat_current);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_current);
 }
 static ssize_t store_FG_g_fg_dbg_bat_current(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3552,7 +3552,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_current, 0664, show_FG_g_fg_dbg_bat_current,
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_zcv(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_zcv : %d\n", g_fg_dbg_bat_zcv);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_zcv : %d\n", g_fg_dbg_bat_zcv);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_zcv);
 }
 static ssize_t store_FG_g_fg_dbg_bat_zcv(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3563,7 +3563,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_zcv, 0664, show_FG_g_fg_dbg_bat_zcv, store_FG
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_temp(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_temp : %d\n", g_fg_dbg_bat_temp);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_temp : %d\n", g_fg_dbg_bat_temp);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_temp);
 }
 static ssize_t store_FG_g_fg_dbg_bat_temp(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3574,7 +3574,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_temp, 0664, show_FG_g_fg_dbg_bat_temp, store_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_r(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_r : %d\n", g_fg_dbg_bat_r);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_r : %d\n", g_fg_dbg_bat_r);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_r);
 }
 static ssize_t store_FG_g_fg_dbg_bat_r(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3585,7 +3585,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_r, 0664, show_FG_g_fg_dbg_bat_r, store_FG_g_f
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_car(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_car : %d\n", g_fg_dbg_bat_car);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_car : %d\n", g_fg_dbg_bat_car);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_car);
 }
 static ssize_t store_FG_g_fg_dbg_bat_car(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3596,7 +3596,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_car, 0664, show_FG_g_fg_dbg_bat_car, store_FG
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_bat_qmax(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_bat_qmax : %d\n", g_fg_dbg_bat_qmax);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_bat_qmax : %d\n", g_fg_dbg_bat_qmax);
     return sprintf(buf, "%d\n", g_fg_dbg_bat_qmax);
 }
 static ssize_t store_FG_g_fg_dbg_bat_qmax(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3607,7 +3607,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_bat_qmax, 0664, show_FG_g_fg_dbg_bat_qmax, store_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_d0(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_d0 : %d\n", g_fg_dbg_d0);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_d0 : %d\n", g_fg_dbg_d0);
     return sprintf(buf, "%d\n", g_fg_dbg_d0);
 }
 static ssize_t store_FG_g_fg_dbg_d0(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3618,7 +3618,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_d0, 0664, show_FG_g_fg_dbg_d0, store_FG_g_fg_dbg_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_d1(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_d1 : %d\n", g_fg_dbg_d1);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_d1 : %d\n", g_fg_dbg_d1);
     return sprintf(buf, "%d\n", g_fg_dbg_d1);
 }
 static ssize_t store_FG_g_fg_dbg_d1(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3629,7 +3629,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_d1, 0664, show_FG_g_fg_dbg_d1, store_FG_g_fg_dbg_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_percentage(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_percentage : %d\n", g_fg_dbg_percentage);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_percentage : %d\n", g_fg_dbg_percentage);
     return sprintf(buf, "%d\n", g_fg_dbg_percentage);
 }
 static ssize_t store_FG_g_fg_dbg_percentage(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3640,7 +3640,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_percentage, 0664, show_FG_g_fg_dbg_percentage, st
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_percentage_fg(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_percentage_fg : %d\n", g_fg_dbg_percentage_fg);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_percentage_fg : %d\n", g_fg_dbg_percentage_fg);
     return sprintf(buf, "%d\n", g_fg_dbg_percentage_fg);
 }
 static ssize_t store_FG_g_fg_dbg_percentage_fg(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3651,7 +3651,7 @@ static DEVICE_ATTR(FG_g_fg_dbg_percentage_fg, 0664, show_FG_g_fg_dbg_percentage_
 //-------------------------------------------------------------------------------------------
 static ssize_t show_FG_g_fg_dbg_percentage_voltmode(struct device *dev,struct device_attribute *attr, char *buf)
 {    
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FG] g_fg_dbg_percentage_voltmode : %d\n", g_fg_dbg_percentage_voltmode);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FG] g_fg_dbg_percentage_voltmode : %d\n", g_fg_dbg_percentage_voltmode);
     return sprintf(buf, "%d\n", g_fg_dbg_percentage_voltmode);
 }
 static ssize_t store_FG_g_fg_dbg_percentage_voltmode(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -3668,9 +3668,9 @@ static int mt6320_fgadc_probe(struct platform_device *dev)
     int ret_device_file = 0;
 
 #if defined(CONFIG_POWER_EXT)
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] INIT : EVB \n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] INIT : EVB \n");
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] MT6320 FGADC driver probe!! \n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] MT6320 FGADC driver probe!! \n" );
 
     /* FG driver init */
     //fgauge_initialization();
@@ -3700,14 +3700,14 @@ static int mt6320_fgadc_probe(struct platform_device *dev)
 
 static int mt6320_fgadc_remove(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] MT6320 FGADC driver remove!! \n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] MT6320 FGADC driver remove!! \n" );
 
     return 0;
 }
 
 static void mt6320_fgadc_shutdown(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[FGADC] MT6320 FGADC driver shutdown!! \n" );        
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[FGADC] MT6320 FGADC driver shutdown!! \n" );        
 }
 
 static int mt6320_fgadc_suspend(struct platform_device *dev, pm_message_t state)    
@@ -3757,17 +3757,17 @@ static int __init mt6320_fgadc_init(void)
     
     ret = platform_device_register(&MT6320_fgadc_device);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_fgadc_driver] Unable to device register(%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_fgadc_driver] Unable to device register(%d)\n", ret);
         return ret;
     }
     
     ret = platform_driver_register(&mt6320_fgadc_driver);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_fgadc_driver] Unable to register driver (%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_fgadc_driver] Unable to register driver (%d)\n", ret);
         return ret;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_fgadc_driver] Initialization : DONE \n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_fgadc_driver] Initialization : DONE \n");
 
     return 0;
 
diff --git a/drivers/misc/mediatek/power/mt8127/addon/mt_battery_bq24196.c b/drivers/misc/mediatek/power/mt8127/addon/mt_battery_bq24196.c
index f783aa95..72346c9a 100644
--- a/drivers/misc/mediatek/power/mt8127/addon/mt_battery_bq24196.c
+++ b/drivers/misc/mediatek/power/mt8127/addon/mt_battery_bq24196.c
@@ -170,7 +170,7 @@ extern int g_first_check;
 #ifdef CONFIG_USB_MTK_HDRC_HCD
 void tbl_charger_otg_vbus(int mode)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[tbl_charger_otg_vbus] mode = %d\n", mode);	
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[tbl_charger_otg_vbus] mode = %d\n", mode);	
     if(mode&0xFF)
     {
         bq24196_set_chg_config(0x3); //OTG
@@ -237,7 +237,7 @@ int get_charger_volt(int times)
 int get_tbat_volt(int times)
 {
 #ifdef BEFORE_TREF_REWORK
-	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(3,times,1);\n");
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(3,times,1);\n");
     return PMIC_IMM_GetOneChannelValue(3,times,1);
 #else
     if(upmu_get_cid() == 0x1020)
@@ -248,12 +248,12 @@ int get_tbat_volt(int times)
     {
         #if defined(ENABLE_TBAT_TREF_SUPPORT)
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(3,times,1);\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(3,times,1);\n");
             }
             return PMIC_IMM_GetOneChannelValue(3,times,1);
         #else
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(4,times,1);\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(4,times,1);\n");
             }
             return PMIC_IMM_GetOneChannelValue(4,times,1);
         #endif
@@ -294,20 +294,20 @@ kal_bool upmu_is_chr_det(void)
         if( mt_usb_is_device() )
         {
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] Charger exist and USB is not host\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] Charger exist and USB is not host\n");
             }
             return KAL_TRUE;
         }
         else
         {
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] Charger exist but USB is host\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] Charger exist but USB is host\n");
             }
             //Monitor BQ24196 boost mode status
             if(bq24196_get_vbus_stat()!= 0x3) //not in OTG boost mode
             {
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] USB host mode but boost mode fault\n");				  
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] USB host mode but boost mode fault\n");				  
                 }		
             //bq24196_set_chg_config(0x3); //TODO: decide if need auto retry
             }			
@@ -550,18 +550,18 @@ ssize_t bat_log_write( struct file *filp, const char __user *buff,
                         unsigned long len, void *data )
 {
 	if (copy_from_user( &proc_bat_data, buff, len )) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "bat_log_write error.\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "bat_log_write error.\n");
 		return -EFAULT;
 	}
 
 	if (proc_bat_data[0] == '1') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable battery driver log system\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable battery driver log system\n");
 		Enable_BATDRV_LOG = 1;
 	} else if (proc_bat_data[0] == '2') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable battery driver log system:2\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable battery driver log system:2\n");
 		Enable_BATDRV_LOG = 2;
 	} else {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "Disable battery driver log system\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "Disable battery driver log system\n");
 		Enable_BATDRV_LOG = 0;
 	}
 
@@ -572,18 +572,18 @@ ssize_t bat_thread_ctrl_write( struct file *filp, const char __user *buff,
                         unsigned long len, void *data )
 {
 	if (copy_from_user( &proc_bat_data_ctrl, buff, len )) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "bat_thread_ctrl_write error.\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "bat_thread_ctrl_write error.\n");
 		return -EFAULT;
 	}
 
 	if (proc_bat_data_ctrl[0] == '1') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "resume bat_thread_kthread()\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "resume bat_thread_kthread()\n");
 		bat_thread_control(1);
 	} else if (proc_bat_data_ctrl[0] == '2') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "stop bat_thread_kthread()\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "stop bat_thread_kthread()\n");
 		bat_thread_control(0);
 	} else {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "not valid value, resume bat_thread_kthread() as default\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "not valid value, resume bat_thread_kthread() as default\n");
 		bat_thread_control(1);
 	}
 
@@ -597,10 +597,10 @@ int init_proc_log(void)
 
 	if (proc_entry == NULL) {
 		ret = -ENOMEM;
-	  	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log: Couldn't create proc entry\n");
+	  	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log: Couldn't create proc entry\n");
 	} else {
 		proc_entry->write_proc = bat_log_write;
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log loaded.\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log loaded.\n");
 	}
 
 	return ret;
@@ -936,7 +936,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
                     else
                     {
                         gFGsyncTimer_jeita+=10;
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] In JEITA (%d on %d)\r\n", 
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] In JEITA (%d on %d)\r\n", 
                             bat_volt_check_point, gFGsyncTimer_jeita);
                     }
 #else                    
@@ -950,13 +950,13 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 					bat_data->BAT_CAPACITY = bat_volt_check_point;
 
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] In FULL Range (%d)\r\n", bat_volt_check_point);
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] In FULL Range (%d)\r\n", bat_volt_check_point);
 					}
 
 						gSyncPercentage=1;
 
 						if (Enable_BATDRV_LOG == 1) {
-							xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_SyncRecharge] In recharging state, do not sync FG\r\n");
+							xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_SyncRecharge] In recharging state, do not sync FG\r\n");
 						}
 				}
             }
@@ -980,7 +980,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 
 					gSyncPercentage=1;
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_Recharging] Keep UI as 100. bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_Recharging] Keep UI as 100. bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
 						bat_volt_check_point, BMT_status.SOC);
 					}
                 }
@@ -1007,7 +1007,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 							gSyncPercentage=1;
 
 							//if (Enable_BATDRV_LOG == 1) {
-								xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Use gas gauge : gas gague get 100 first (%d)\r\n", bat_volt_check_point);
+								xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Use gas gauge : gas gague get 100 first (%d)\r\n", bat_volt_check_point);
 							//}
 						}
 						else
@@ -1017,14 +1017,14 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 								gSyncPercentage=0;
 
 								if (Enable_BATDRV_LOG == 1) {
-									xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Can sync due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
+									xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Can sync due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
 									bat_volt_check_point, BMT_status.SOC);
 								}
 							}
 							else
 							{
 								if (Enable_BATDRV_LOG == 1) {
-									xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Keep UI due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
+									xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Keep UI due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
 									bat_volt_check_point, BMT_status.SOC);
 								}
 							}
@@ -1056,7 +1056,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
         	/*Use no gas gauge*/
 			if( gForceADCsolution == 1 )
 			{
-	            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BAT BATTERY] VBAT < %d mV : Android will Power Off System !!\r\n", SYSTEM_OFF_VOLTAGE);
+	            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BAT BATTERY] VBAT < %d mV : Android will Power Off System !!\r\n", SYSTEM_OFF_VOLTAGE);
 	            bat_data->BAT_CAPACITY = 0;
 			}
 			/*Use gas gauge*/
@@ -1074,7 +1074,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
                                 gFG_DOD1=gFG_DOD0;
                                 BMT_status.SOC=bat_volt_check_point;
 				bat_data->BAT_CAPACITY = bat_volt_check_point;
-                                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] VBAT < %d mV (%d, gFG_DOD0=%d)\r\n", SYSTEM_OFF_VOLTAGE, bat_volt_check_point,gFG_DOD0);                
+                                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] VBAT < %d mV (%d, gFG_DOD0=%d)\r\n", SYSTEM_OFF_VOLTAGE, bat_volt_check_point,gFG_DOD0);                
 			}
         }
 #ifndef MTK_BQ27541_SUPPORT			
@@ -1098,7 +1098,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 			gFG_DOD1=gFG_DOD0;
 			BMT_status.SOC=bat_volt_check_point;
 			bat_data->BAT_CAPACITY = bat_volt_check_point;
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] FG_VBAT <= %d, then SOC run to 15. (SOC=%d,Point=%d,D1=%d,D0=%d)\r\n",
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] FG_VBAT <= %d, then SOC run to 15. (SOC=%d,Point=%d,D1=%d,D0=%d)\r\n",
 				gFG_15_vlot, BMT_status.SOC, bat_volt_check_point, gFG_DOD1, gFG_DOD0);
 		}
 		/* If "FG_VBAT > gFG_15_vlot" and "FG_report=15%" , then keep 15% till FG_VBAT <= gFG_15_vlot */
@@ -1113,7 +1113,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 			gFG_DOD1=gFG_DOD0;
 			BMT_status.SOC=bat_volt_check_point;
 			bat_data->BAT_CAPACITY = bat_volt_check_point;
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] FG_VBAT(%d) > gFG_15_vlot(%d) and FG_report=15, then UI(%d) keep 15. (D1=%d,D0=%d)\r\n",
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] FG_VBAT(%d) > gFG_15_vlot(%d) and FG_report=15, then UI(%d) keep 15. (D1=%d,D0=%d)\r\n",
 				gFG_voltage, gFG_15_vlot, bat_volt_check_point, gFG_DOD1, gFG_DOD0);
 		}
 #endif				
@@ -1133,7 +1133,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 			else
 			{
 				if (Enable_BATDRV_LOG == 1) {
-					xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_OnlyBattery!] bat_volt_check_point=%d,BMT_status.SOC=%d\r\n",
+					xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_OnlyBattery!] bat_volt_check_point=%d,BMT_status.SOC=%d\r\n",
 					bat_volt_check_point, BMT_status.SOC);
 				}
 
@@ -1142,7 +1142,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 				if( (bat_volt_check_point>BMT_status.SOC) && ((bat_volt_check_point!=1)) )
 				{
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_OnlyBattery] bat_volt_check_point=%d,BMT_status.SOC=%d,gFGsyncTimer=%d(on %d)\r\n",
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_OnlyBattery] bat_volt_check_point=%d,BMT_status.SOC=%d,gFGsyncTimer=%d(on %d)\r\n",
 						bat_volt_check_point, BMT_status.SOC, gFGsyncTimer, DEFAULT_SYNC_TIME_OUT);
 					}
 
@@ -1167,7 +1167,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 						gSyncPercentage=1;
 
 						//if (Enable_BATDRV_LOG == 1) {
-							xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Use gas gauge : gas gague get 0 first (%d)\r\n", bat_volt_check_point);
+							xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Use gas gauge : gas gague get 0 first (%d)\r\n", bat_volt_check_point);
 						//}
 					}
 					else
@@ -1186,7 +1186,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 				if(bat_volt_check_point == 100) {
         			g_bat_full_user_view = KAL_TRUE;
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_Only] Set g_bat_full_user_view=KAL_TRUE\r\n");
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_Only] Set g_bat_full_user_view=KAL_TRUE\r\n");
 					}
 				}
 			}
@@ -1194,7 +1194,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
     }
 
 	if (Enable_BATDRV_LOG >= 1) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:IntegrationFG:point,per_C,per_V,count,vbat_charger,CSDAC_DAT] %d,%d,%d,%d,%d,ADC_Solution=%d\r\n",
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:IntegrationFG:point,per_C,per_V,count,vbat_charger,CSDAC_DAT] %d,%d,%d,%d,%d,ADC_Solution=%d\r\n",
 		bat_volt_check_point, BMT_status.SOC, FGADC_Get_BatteryCapacity_VoltageMothod(),
 		BATTERY_AVERAGE_SIZE, BMT_status.bat_vol, gForceADCsolution);
 	}
@@ -1241,36 +1241,36 @@ static int mt6320_battery_probe(struct platform_device *dev)
 {
     int ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
         
     /* Integrate with Android Battery Service */
     ret = power_supply_register(&(dev->dev), &mt6320_ac_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_usb_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_battery_main.psy);
     if (ret)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
         return ret;
     }
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
 
     //battery kernel thread for 10s check and charger in/out event
     /*kthread_run(bat_thread_kthread, NULL, "bat_thread_kthread"); */
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bat_thread_kthread] Done\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bat_thread_kthread] Done\n");
 
 	g_bat_init_flag=1;
     
@@ -1492,10 +1492,10 @@ INT16 BattVoltToTemp(UINT32 dwVolt)
 void BATTERY_SetUSBState(int usb_state_value)
 {
 	if ( (usb_state_value < USB_SUSPEND) || ((usb_state_value > USB_CONFIGURED))){
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY] BAT_SetUSBState Fail! Restore to default value\r\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY] BAT_SetUSBState Fail! Restore to default value\r\n");
 		usb_state_value = USB_UNCONFIGURED;
 	} else {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY] BAT_SetUSBState Success! Set %d\r\n", usb_state_value);
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY] BAT_SetUSBState Success! Set %d\r\n", usb_state_value);
 		g_usb_state = usb_state_value;
 	}
 }
@@ -1510,7 +1510,7 @@ kal_bool pmic_chrdet_status(void)
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[pmic_chrdet_status] No charger\r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[pmic_chrdet_status] No charger\r\n");
         return KAL_FALSE;
     }
 }
@@ -1527,12 +1527,12 @@ void bq24196_set_ac_current(void)
     int ichg_val;
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bq24196_set_ac_current \r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bq24196_set_ac_current \r\n");
     }
 
     if((g_temp_CC_value > 2484) || (g_temp_CC_value < 500))
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] invalid current selected (%d), use 500mA \r\n", g_temp_CC_value);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] invalid current selected (%d), use 500mA \r\n", g_temp_CC_value);
         bq24196_set_ichg(0); //offset is 500mA
     }
     else
@@ -1556,7 +1556,7 @@ void bq24196_set_ac_current(void)
 void bq24196_set_low_chg_current(void)
 {
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bq24196_set_low_chg_current \r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bq24196_set_low_chg_current \r\n");
     }
     bq24196_set_iinlim(0x0); //IN current limit at 100mA	
     bq24196_set_ichg(0); //charging current limit at 500mA
@@ -1758,7 +1758,7 @@ void select_charging_curret_bq24196(void)
 {
     if (g_ftm_battery_flag)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] FTM charging : %d\r\n", charging_level_data[0]);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] FTM charging : %d\r\n", charging_level_data[0]);
         g_temp_CC_value = charging_level_data[0];
 
         if((g_temp_CC_value > 2484) || (g_temp_CC_value < 500))
@@ -1780,7 +1780,7 @@ void select_charging_curret_bq24196(void)
                 {
                     g_temp_CC_value = USB_CHARGER_CURRENT_SUSPEND;
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] disable charging\r\n");
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] disable charging\r\n");
                     }
                 }
                 else if (g_usb_state == USB_UNCONFIGURED)
@@ -1788,7 +1788,7 @@ void select_charging_curret_bq24196(void)
                     g_temp_CC_value = USB_CHARGER_CURRENT_UNCONFIGURED;
                     bq24196_set_low_chg_current(); // 100mA
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bq24196_set_low_chg_current() \r\n");
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bq24196_set_low_chg_current() \r\n");
                     }
                 }
                 else if (g_usb_state == USB_CONFIGURED)
@@ -1797,7 +1797,7 @@ void select_charging_curret_bq24196(void)
                     bq24196_set_iinlim(0x2); //IN current limit at 500mA					
                     bq24196_set_ac_current();
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bq24196_set_ac_current(), CC value (%d) \r\n", g_temp_CC_value);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bq24196_set_ac_current(), CC value (%d) \r\n", g_temp_CC_value);
                     }
                 }
                 else
@@ -1805,7 +1805,7 @@ void select_charging_curret_bq24196(void)
                     g_temp_CC_value = USB_CHARGER_CURRENT_UNCONFIGURED;
                     bq24196_set_low_chg_current(); // 100mA
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bq24196_set_low_chg_current() \r\n");
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bq24196_set_low_chg_current() \r\n");
                     }
                 }
             }
@@ -1815,7 +1815,7 @@ void select_charging_curret_bq24196(void)
                 bq24196_set_iinlim(0x2); //IN current limit at 500mA		  
                 bq24196_set_ac_current();
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bq24196_set_ac_current(), CC value(%d) \r\n", g_temp_CC_value);
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bq24196_set_ac_current(), CC value(%d) \r\n", g_temp_CC_value);
                 }
             }
         }
@@ -1840,7 +1840,7 @@ void select_charging_curret_bq24196(void)
         else
         {
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Unknown charger type\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Unknown charger type\n");
             }
             g_temp_CC_value = 500;
             bq24196_set_iinlim(0x2); //IN current limit at 500mA		  
@@ -1853,7 +1853,7 @@ void select_charging_curret_bq24196(void)
 void ChargerHwInit_bq24196(void)
 {
 	if (Enable_BATDRV_LOG == 1) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] ChargerHwInit_bq24196\n" );
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] ChargerHwInit_bq24196\n" );
 	}
 
     upmu_set_rg_bc11_bb_ctrl(1);    //BC11_BB_CTRL    
@@ -1906,7 +1906,7 @@ void ChargerHwInit_bq24196(void)
 void pchr_turn_off_charging_bq24196 (void)
 {
 	if (Enable_BATDRV_LOG == 1) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] pchr_turn_off_charging_bq24196!\r\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] pchr_turn_off_charging_bq24196!\r\n");
 	}
 
 	bq24196_set_wdt_rst(0x1); //Kick watchdog
@@ -1926,7 +1926,7 @@ void pchr_turn_on_charging_bq24196 (void)
 	if ( BMT_status.bat_charging_state == CHR_ERROR )
 	{
 		if (Enable_BATDRV_LOG == 1) {
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Charger Error, turn OFF charging !\r\n");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Charger Error, turn OFF charging !\r\n");
 		}
 		BMT_status.total_charging_time = 0;
 		pchr_turn_off_charging_bq24196();
@@ -1941,7 +1941,7 @@ void pchr_turn_on_charging_bq24196 (void)
  		ChargerHwInit_bq24196();
 
 		if (Enable_BATDRV_LOG == 1) {
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] pchr_turn_on_charging_bq24196 !\r\n");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] pchr_turn_on_charging_bq24196 !\r\n");
 		}
 
     if (g_bcct_flag == 1)
@@ -1970,7 +1970,7 @@ void pchr_turn_on_charging_bq24196 (void)
                 bq24196_set_en_hiz(0x0);	            	
                 bq24196_set_chg_config(0x1); // charger enable
                 if (Enable_BATDRV_LOG == 1) {
-                   xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] charger enable !\r\n");
+                   xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] charger enable !\r\n");
                 }
                 if (Enable_BATDRV_LOG == 1) {
                    printk("[BATTERY:bq24196] charger enable !\r\n");
@@ -1979,7 +1979,7 @@ void pchr_turn_on_charging_bq24196 (void)
             else
             {
                 pchr_turn_off_charging_bq24196();
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] wait gFG_booting_counter_I_FLAG==2 (%d)\r\n", gFG_booting_counter_I_FLAG);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] wait gFG_booting_counter_I_FLAG==2 (%d)\r\n", gFG_booting_counter_I_FLAG);
             }
         }
 	}
@@ -2218,7 +2218,7 @@ int do_jeita_state_machine(void)
         {
             if(Enable_BATDRV_LOG >=1)
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery Normal Temperature between %d and %d !!\n\r",
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery Normal Temperature between %d and %d !!\n\r",
                     TEMP_POS_10_THRESHOLD,TEMP_POS_45_THRESHOLD); 
             }
             g_temp_status = TEMP_POS_10_TO_POS_45;
@@ -2317,7 +2317,7 @@ int BAT_CheckBatteryStatus_bq24196(void)
 #endif	        
 		BMT_status.temperature = g_bat_temperature_pre;
 		if (Enable_BATDRV_LOG == 1) {
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY] Warning !! bat_temperature_volt == 0, restore temperature value\n\r");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY] Warning !! bat_temperature_volt == 0, restore temperature value\n\r");
 		}
 	}
 	else
@@ -2346,7 +2346,7 @@ int BAT_CheckBatteryStatus_bq24196(void)
                 bat_temperature_volt_temp = bat_temperature_volt;
                 bat_temperature_volt = bat_temperature_volt + ((fg_current_temp*fg_r_value)/1000);
             }
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[tbat_workaround] %d,%d,%d,%d,%d\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[tbat_workaround] %d,%d,%d,%d,%d\n", 
                 bat_temperature_volt_temp, bat_temperature_volt, fg_current_state, fg_current_temp, fg_r_value);        
         }
         //-----------------------------------------------------------------------------
@@ -2359,11 +2359,11 @@ int BAT_CheckBatteryStatus_bq24196(void)
 		ret = bq27541_set_cmd_read(BQ27541_CMD_Temperature, &returnData);
 		if(ret != 1)
 		{
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ADC:bq27541] bq27541 i2c access error, use MT6320 measured battery temperature\n");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ADC:bq27541] bq27541 i2c access error, use MT6320 measured battery temperature\n");
 		}	
 		else
 		{
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ADC:bq27541] battery temperature read raw data(%d)0.1K\n", returnData); 
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ADC:bq27541] battery temperature read raw data(%d)0.1K\n", returnData); 
 			BMT_status.temperature = ((returnData/10) - 273);
 		}
 #endif
@@ -2371,12 +2371,12 @@ int BAT_CheckBatteryStatus_bq24196(void)
     if((g_battery_tt_check_flag == 0) && (BMT_status.temperature < MAX_CHARGE_TEMPERATURE) && (BMT_status.temperature > MIN_CHARGE_TEMPERATURE))
     {
         g_battery_thermal_throttling_flag = 1;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Enable battery TT (%d)\n\r", BMT_status.temperature);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Enable battery TT (%d)\n\r", BMT_status.temperature);
         g_battery_tt_check_flag = 1;
     }
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ADC:bq24196] VCHR:%d BAT_SENSE:%d I_SENSE:%d TBAT:%d TBAT_vol:%d BatTT:%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ADC:bq24196] VCHR:%d BAT_SENSE:%d I_SENSE:%d TBAT:%d TBAT_vol:%d BatTT:%d\n",
         BMT_status.charger_vol, BMT_status.ADC_BAT_SENSE, BMT_status.ADC_I_SENSE, BMT_status.temperature, bat_temperature_volt, g_battery_thermal_throttling_flag);
     }
 
@@ -2399,12 +2399,12 @@ int BAT_CheckBatteryStatus_bq24196(void)
         if(ret != 1)
         {
             BMT_status.SOC = BattVoltToPercent(BMT_status.bat_vol);         
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq27541] bq27541 i2c access error\n");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq27541] bq27541 i2c access error\n");
         }	
 		else
 		{
 		    BMT_status.SOC = returnData;
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq27541] bq27541 read SOC raw data = %d\n", returnData);		    
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq27541] bq27541 read SOC raw data = %d\n", returnData);		    
 		}
 #else
         BMT_status.SOC = BattVoltToPercent(BMT_status.bat_vol);
@@ -2492,12 +2492,12 @@ int BAT_CheckBatteryStatus_bq24196(void)
         if(ret != 1)
         {
            	BMT_status.SOC = FGADC_Get_BatteryCapacity_CoulombMothod();
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq27541] bq27541 i2c access error\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq27541] bq27541 i2c access error\n");
         }	
         else
         {
             BMT_status.SOC = returnData;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq27541] bq27541 read SOC raw data = %d\n", returnData);		                
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq27541] bq27541 read SOC raw data = %d\n", returnData);		                
         }
 #else
         BMT_status.SOC = FGADC_Get_BatteryCapacity_CoulombMothod();
@@ -2576,11 +2576,11 @@ int BAT_CheckBatteryStatus_bq24196(void)
 	ret = bq27541_set_cmd_read(BQ27541_CMD_Temperature, &returnData);
 	if(ret != 1)
 	{
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:AVG:bq27541] bq27541 i2c access error, use MT6320 measured battery temperature\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:AVG:bq27541] bq27541 i2c access error, use MT6320 measured battery temperature\n");
 	}	
 	else
 	{
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:AVG:bq27541] battery temperature read raw data(%d)0.1K\n", returnData);	
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:AVG:bq27541] battery temperature read raw data(%d)0.1K\n", returnData);	
 		BMT_status.temperature = ((returnData/10) - 273);
 	}
 #endif
@@ -2615,13 +2615,13 @@ int BAT_CheckBatteryStatus_bq24196(void)
     //------------------------------------------------------------
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:AVG:bq24196] BatTemp:%d Vbat:%d VBatSen:%d SOC:%d ChrDet:%d Vchrin:%d Icharging:%d ChrType:%d USBstate:%d\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:AVG:bq24196] BatTemp:%d Vbat:%d VBatSen:%d SOC:%d ChrDet:%d Vchrin:%d Icharging:%d ChrType:%d USBstate:%d\r\n",
         BMT_status.temperature ,BMT_status.bat_vol, BMT_status.ADC_BAT_SENSE, BMT_status.SOC,
         upmu_is_chr_det(), BMT_status.charger_vol, BMT_status.ICharging, CHR_Type_num, g_usb_state );
     }
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:FG:bq24196] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:FG:bq24196] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
         BMT_status.temperature ,BMT_status.bat_vol, BMT_status.ADC_BAT_SENSE, BMT_status.SOC,
         upmu_is_chr_det(), BMT_status.charger_vol, BMT_status.ICharging, CHR_Type_num,
         FGADC_Get_BatteryCapacity_CoulombMothod(), FGADC_Get_BatteryCapacity_VoltageMothod(), BATTERY_AVERAGE_SIZE );
@@ -2641,12 +2641,12 @@ int BAT_CheckBatteryStatus_bq24196(void)
 	
     if(battery_cmd_thermal_test_mode == 1){
         BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
     }	
 
 #if defined(MTK_JEITA_STANDARD_SUPPORT)
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] support JEITA, Tbat=%d\n", BMT_status.temperature);            
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] support JEITA, Tbat=%d\n", BMT_status.temperature);            
     }
     if( do_jeita_state_machine() == PMU_STATUS_FAIL)
     {
@@ -2701,7 +2701,7 @@ int BAT_CheckBatteryStatus_bq24196(void)
 #endif     
         {
             if (Enable_BATDRV_LOG == 1) {
-            	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery Re-charging !!\n\r");
+            	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery Re-charging !!\n\r");
             }
             BMT_status.bat_full = KAL_FALSE;
             BMT_status.bat_charging_state = CHR_CC;
@@ -2720,7 +2720,7 @@ int BAT_CheckBatteryStatus_bq24196(void)
             g_Calibration_FG = 0;
 
 //            if (Enable_BATDRV_LOG == 1) {
-//                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery Re-charging. Call FGADC_Reset_SW_Parameter.\n\r");
+//                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery Re-charging. Call FGADC_Reset_SW_Parameter.\n\r");
 //            }
 //            FGADC_Reset_SW_Parameter();
         }
@@ -2736,7 +2736,7 @@ int BAT_CheckBatteryStatus_bq24196(void)
 PMU_STATUS BAT_BatteryStatusFailAction(void)
 {
     if (Enable_BATDRV_LOG == 1) {
-    	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] BAD Battery status... Charging Stop !!\n\r");
+    	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] BAD Battery status... Charging Stop !!\n\r");
     }
 
 #if defined(MTK_JEITA_STANDARD_SUPPORT)
@@ -2766,7 +2766,7 @@ PMU_STATUS BAT_BatteryStatusFailAction(void)
 
 PMU_STATUS BAT_ChargingOTAction(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);
 
     //BMT_status.bat_full = KAL_TRUE;
     BMT_status.total_charging_time = 0;
@@ -2789,7 +2789,7 @@ extern void fg_qmax_update_for_aging(void);
 PMU_STATUS BAT_BatteryFullAction(void)
 {
     if (Enable_BATDRV_LOG == 1) {    
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] check Battery full !!\n\r");            
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] check Battery full !!\n\r");            
     }
     
     BMT_status.bat_full = KAL_TRUE;
@@ -2813,7 +2813,7 @@ PMU_STATUS BAT_BatteryFullAction(void)
             gFG_can_reset_flag = 0;
 
             if (Enable_BATDRV_LOG >= 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
             }
             FGADC_Reset_SW_Parameter();
         }
@@ -2826,7 +2826,7 @@ PMU_STATUS BAT_BatteryFullAction(void)
             g_bat_full_user_view = KAL_TRUE;
             g_HW_Charging_Done = 0;
             if (Enable_BATDRV_LOG >= 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] (%d) VBAT<4150mV. Don't FGADC_Reset_SW_Parameter.\n", BMT_status.bat_vol);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] (%d) VBAT<4150mV. Don't FGADC_Reset_SW_Parameter.\n", BMT_status.bat_vol);
             }
         }
     }
@@ -2861,7 +2861,7 @@ void mt_battery_notify_check(void)
         //if(BMT_status.charger_vol > 3000) //test
         {
             g_BatteryNotifyCode |= 0x0001;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] BMT_status.charger_vol(%d) > %d mV\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] BMT_status.charger_vol(%d) > %d mV\n", 
                 BMT_status.charger_vol, V_CHARGER_MAX);
         }
         else
@@ -2869,7 +2869,7 @@ void mt_battery_notify_check(void)
             g_BatteryNotifyCode &= ~(0x0001);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0001 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0001 (%x)\n", 
                 g_BatteryNotifyCode);
         }    
 #endif
@@ -2879,14 +2879,14 @@ void mt_battery_notify_check(void)
         //if(BMT_status.temperature > 20) //test
         {
             g_BatteryNotifyCode |= 0x0002;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bat_temp(%d) > 50'C\n", BMT_status.temperature);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bat_temp(%d) > 50'C\n", BMT_status.temperature);
         }
         else
         {
             g_BatteryNotifyCode &= ~(0x0002);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0002 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0002 (%x)\n", 
                 g_BatteryNotifyCode);
         }    
 #endif
@@ -2898,14 +2898,14 @@ void mt_battery_notify_check(void)
         //if(BMT_status.ICharging > 200) //test
         {
             g_BatteryNotifyCode |= 0x0004;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] I_charging(%d) > 1000mA\n", BMT_status.ICharging);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] I_charging(%d) > 1000mA\n", BMT_status.ICharging);
         }
         else
         {
             g_BatteryNotifyCode &= ~(0x0004);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0003 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0003 (%x)\n", 
                 g_BatteryNotifyCode);
         }    
 #endif
@@ -2915,14 +2915,14 @@ void mt_battery_notify_check(void)
         //if(BMT_status.bat_vol > 3800) //test
         {
             g_BatteryNotifyCode |= 0x0008;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bat_vlot(%d) > 4350mV\n", BMT_status.bat_vol);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bat_vlot(%d) > 4350mV\n", BMT_status.bat_vol);
         }
         else
         {
             g_BatteryNotifyCode &= ~(0x0008);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0004 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0004 (%x)\n", 
                 g_BatteryNotifyCode);
         }
 #endif
@@ -2938,7 +2938,7 @@ void mt_battery_notify_check(void)
             //if(BMT_status.total_charging_time >= 60) //test
             {
                 g_BatteryNotifyCode |= 0x0010;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Charging Over Time\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Charging Over Time\n");
             }
             else
             {
@@ -2947,7 +2947,7 @@ void mt_battery_notify_check(void)
         }
         
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0005 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] BATTERY_NOTIFY_CASE_0005 (%x)\n", 
                 g_BatteryNotifyCode);
         }
 #endif
@@ -3016,7 +3016,7 @@ void check_battery_exist(void)
 ///////////////////////////////////////////////////////////////////////////////////////////
 void pmic_init_for_bq24196(void)
 {
-	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[pmic_init_for_bq24196] Start\n");
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[pmic_init_for_bq24196] Start\n");
 
     upmu_set_rg_chrwdt_td(0x0);           // CHRWDT_TD, 4s
     upmu_set_rg_chrwdt_int_en(0);         // CHRWDT_INT_EN
@@ -3046,7 +3046,7 @@ void pmic_init_for_bq24196(void)
     upmu_set_rg_chr_en(0);           // CHR_EN
     upmu_set_rg_hwcv_en(0);          // RG_HWCV_EN
 
-	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[pmic_init_for_bq24196] Done\n");
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[pmic_init_for_bq24196] Done\n");
 }
 
 void BAT_UpdateChargerStatus(void)
@@ -3099,7 +3099,7 @@ void BAT_thread_bq24196(void)
     {
         if(battery_cmd_thermal_test_mode == 1){
             BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery:bq24196] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery:bq24196] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
         }
 
 #if defined(MTK_JEITA_STANDARD_SUPPORT)        
@@ -3110,7 +3110,7 @@ void BAT_thread_bq24196(void)
 #if defined(CONFIG_POWER_EXT)
             xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] CONFIG_POWER_EXT, no update mt6577_battery_update_power_down.\n");
 #else
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery:bq24196] Tbat(%d)>=60, system need power down.\n", BMT_status.temperature);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery:bq24196] Tbat(%d)>=60, system need power down.\n", BMT_status.temperature);
             mt6320_battery_update_power_down(&mt6320_battery_main);			
             if( upmu_is_chr_det() == KAL_TRUE )
             {
@@ -3132,7 +3132,7 @@ void BAT_thread_bq24196(void)
         if(BMT_status.charger_type == CHARGER_UNKNOWN)
         {
             CHR_Type_num = mt_charger_type_detection();
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BAT_thread:bq24196] CHR_Type_num = %d\r\n", CHR_Type_num);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BAT_thread:bq24196] CHR_Type_num = %d\r\n", CHR_Type_num);
             BMT_status.charger_type = CHR_Type_num;
             if( (CHR_Type_num==STANDARD_HOST) || (CHR_Type_num==CHARGING_HOST) )
             {
@@ -3160,7 +3160,7 @@ void BAT_thread_bq24196(void)
                 g_bat_full_user_view = KAL_FALSE;
                 if (Enable_BATDRV_LOG == 1)
                 {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_Only:bq24196] Set g_bat_full_user_view=KAL_FALSE\r\n");
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_Only:bq24196] Set g_bat_full_user_view=KAL_FALSE\r\n");
                 }
             }
         }
@@ -3226,14 +3226,14 @@ void BAT_thread_bq24196(void)
 
     if(battery_cmd_thermal_test_mode == 1){
         BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-	    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] In thermal_test_mode 3, Tbat=%d\n", BMT_status.temperature);
+	    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] In thermal_test_mode 3, Tbat=%d\n", BMT_status.temperature);
     }
     
     /* Battery Notify Check */
     mt_battery_notify_check();
 
 #if defined(CONFIG_POWER_EXT)
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] CONFIG_POWER_EXT, no update Android.\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] CONFIG_POWER_EXT, no update Android.\n");
 #else
     if(gFG_booting_counter_I_FLAG == 2)
     {
@@ -3256,22 +3256,22 @@ void BAT_thread_bq24196(void)
             if(ret != 1)
             {
                 mt6320_battery_main.BAT_CAPACITY = 50;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq27541] bq27541 i2c access error\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq27541] bq27541 i2c access error\n");
             }	
             else
             {
                 mt6320_battery_main.BAT_CAPACITY = returnData;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq27541] bq27541 read SOC raw data = %d\n", returnData);		                    
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq27541] bq27541 read SOC raw data = %d\n", returnData);		                    
             }
 #else
             mt6320_battery_main.BAT_CAPACITY = 50;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] gFG_booting_counter_I_FLAG is 1, SOC=50.\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] gFG_booting_counter_I_FLAG is 1, SOC=50.\n");
 #endif        
         }
     }	
     else
     {
-         xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] gFG_booting_counter_I_FLAG!=2 (%d)\r\n", gFG_booting_counter_I_FLAG);
+         xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] gFG_booting_counter_I_FLAG!=2 (%d)\r\n", gFG_booting_counter_I_FLAG);
     }
 #endif
 
@@ -3290,7 +3290,7 @@ void BAT_thread_bq24196(void)
 
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] PMU_STATUS_FAIL (chr_err_cnt = %d)\n", chr_err_cnt);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] PMU_STATUS_FAIL (chr_err_cnt = %d)\n", chr_err_cnt);
         }
     }
     /* Battery Full */
@@ -3299,7 +3299,7 @@ void BAT_thread_bq24196(void)
     {
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery real full. \n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery real full. \n");
         }
         BMT_status.bat_full = KAL_TRUE;
         BMT_status.total_charging_time = 0;
@@ -3317,7 +3317,7 @@ void BAT_thread_bq24196(void)
             gFG_can_reset_flag = 0;
             if (Enable_BATDRV_LOG == 1)
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
             }
             FGADC_Reset_SW_Parameter();
         }
@@ -3330,7 +3330,7 @@ void BAT_thread_bq24196(void)
     {
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Charging Over Time. \n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Charging Over Time. \n");
         }
         pchr_turn_off_charging_bq24196();
 
@@ -3347,13 +3347,13 @@ void BAT_thread_bq24196(void)
 
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] state=%d, \n", BMT_status.bat_charging_state);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] state=%d, \n", BMT_status.bat_charging_state);
         }
 
         /* Charging OT */
         if(BMT_status.total_charging_time >= MAX_CHARGING_TIME)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);        
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);        
             BMT_status.total_charging_time = 0;
             BMT_status.PRE_charging_time = 0;
             BMT_status.CC_charging_time = 0;
@@ -3387,13 +3387,13 @@ void BAT_thread_bq24196(void)
                 gFG_can_reset_flag = 0;
 
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
                 }
                 FGADC_Reset_SW_Parameter();
             }
             g_Calibration_FG = 0;
 
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Battery real full and disable charging (%d) \n", bq24196_stat);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Battery real full and disable charging (%d) \n", bq24196_stat);
             gSyncPercentage = 1;
             return;
         }
@@ -3402,7 +3402,7 @@ void BAT_thread_bq24196(void)
             pchr_turn_off_charging_bq24196();
             msleep(100);
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] bq24196_status is (%d), but battery voltage not over recharge voltage\n", bq24196_stat);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] bq24196_status is (%d), but battery voltage not over recharge voltage\n", bq24196_stat);
             }
         }
 
@@ -3412,7 +3412,7 @@ void BAT_thread_bq24196(void)
         pchr_turn_on_charging_bq24196();
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Total charging timer=%d, bq24196_status=%d \n\r",
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Total charging timer=%d, bq24196_status=%d \n\r",
             BMT_status.total_charging_time, bq24196_stat);
         }
     }
@@ -3428,7 +3428,7 @@ void BAT_thread_bq24196(void)
 
     if (Enable_BATDRV_LOG == 1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BAT_thread_bq24196] End ....\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BAT_thread_bq24196] End ....\n");
     }
 }
 
@@ -3464,7 +3464,7 @@ void PrechargeCheckStatus(void)
 
     if( get_charger_detect_status() == KAL_TRUE ) //do not check USB device check at precharge state
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Boot up during charging!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Boot up during charging!\n");
         g_boot_charging = 1;
 //        bq24196_set_chg_config(0x1); // charger enable, in case adaptor plug in during booting period        
 //        bq24196_set_batfet_disable(0x1); // turn off BATFET for bat_vol measurement
@@ -3481,7 +3481,7 @@ void PrechargeCheckStatus(void)
 			bq24196_set_chg_config(0x0);
 			bq24196_set_en_hiz(0x1);	
             bat_vol = get_i_sense_volt(10);
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Powerpath init battery voltage > 3600, battery voltage during system discharging = %d\n", bat_vol);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Powerpath init battery voltage > 3600, battery voltage during system discharging = %d\n", bat_vol);
             return;
         }
         else
@@ -3494,7 +3494,7 @@ void PrechargeCheckStatus(void)
             bat_volt_check_point = 0;
             g_ocv_lookup_done = 1;
         }
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Powerpath init battery voltage < 3600, battery voltage  = %d\n", bat_vol);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Powerpath init battery voltage < 3600, battery voltage  = %d\n", bat_vol);
     }
     else
     {
@@ -3510,7 +3510,7 @@ void PrechargeCheckStatus(void)
             if(BMT_status.charger_type == CHARGER_UNKNOWN)
             {
                 CHR_Type_num = mt_charger_type_detection();
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] CHR_Type_num = %d\r\n", CHR_Type_num);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] CHR_Type_num = %d\r\n", CHR_Type_num);
                 BMT_status.charger_type = CHR_Type_num;
                 if( (CHR_Type_num==STANDARD_HOST) || (CHR_Type_num==CHARGING_HOST) )
                 {
@@ -3564,7 +3564,7 @@ void PrechargeCheckStatus(void)
             if((g_battery_tt_check_flag == 0) && (bat_temp < 60) && (bat_temp > (-20)))
             {
                 g_battery_thermal_throttling_flag = 1;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge enable battery TT (%d)\n\r", bat_temp);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge enable battery TT (%d)\n\r", bat_temp);
                 g_battery_tt_check_flag = 1;
             }
 
@@ -3576,32 +3576,32 @@ void PrechargeCheckStatus(void)
 
             if(battery_cmd_thermal_test_mode == 1){
                 BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
             }			
 #if (BAT_TEMP_PROTECT_ENABLE == 1)
             if ((bat_temp <= MIN_CHARGE_TEMPERATURE) ||
             (bat_temp == ERR_CHARGE_TEMPERATURE))
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge battery Under Temperature or NTC fail !!\n\r");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge battery Under Temperature or NTC fail !!\n\r");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 #endif
             if (bat_temp >= MAX_CHARGE_TEMPERATURE)
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge battery Over Temperature !!\n\r");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge battery Over Temperature !!\n\r");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 			
 #if (V_CHARGER_ENABLE == 1)
             if (charger_vol <= V_CHARGER_MIN )
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge charger under voltage!!\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge charger under voltage!!\r\n");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 #endif
             if ( charger_vol >= V_CHARGER_MAX )
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge charger over voltage !!\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge charger over voltage !!\r\n");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 			
@@ -3617,19 +3617,19 @@ void PrechargeCheckStatus(void)
             if(( g_temp_CC_value == 0) || (chr_err_cnt > 0))
             {
                 bq24196_set_chg_config(0x0); // charger disable
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge chr_err_cnt = %d\r\n", chr_err_cnt);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:bq24196] Powerpath precharge chr_err_cnt = %d\r\n", chr_err_cnt);
             }
             else
             {
                 bq24196_set_chg_config(0x1); // charger enable
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Power path precharging !\r\n");
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Power path precharging !\r\n");
                 }
             }
 
             if(bat_vol >= SYSTEM_OFF_VOLTAGE + 100)
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge finish, battery voltage = %d\n", bat_vol);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge finish, battery voltage = %d\n", bat_vol);
                 BMT_status.bat_charging_state = CHR_CC;
                 break;
             }
@@ -3661,7 +3661,7 @@ void PrechargeCheckStatus(void)
                 power_supply_changed(bat_psy);
 
                 sys_vol = get_bat_sense_volt(10);
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge continue, battery voltage (%d), system voltage (%d) (%d), charger volt (%d)\n", bat_vol, sys_vol, sys_vol_dis, charger_vol);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge continue, battery voltage (%d), system voltage (%d) (%d), charger volt (%d)\n", bat_vol, sys_vol, sys_vol_dis, charger_vol);
                 bq24196_dump_register();
 
                 mt_battery_notify_check();
@@ -3671,7 +3671,7 @@ void PrechargeCheckStatus(void)
         }
         else
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196]VCDT voltage = %d\n", get_charger_volt(10));        
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196]VCDT voltage = %d\n", get_charger_volt(10));        
             wake_unlock(&battery_suspend_lock);
 //            pchr_turn_off_charging_bq24196();
 			bq24196_set_wdt_rst(0x1); //Kick watchdog
@@ -3718,7 +3718,7 @@ void PrechargeCheckStatus(void)
 
             power_supply_changed(bat_psy);
 #endif
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge stopped due to charger plug-out, wait for system shutdown\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:bq24196] Powerpath precharge stopped due to charger plug-out, wait for system shutdown\n");
             msleep(5000);
         }
     }
@@ -4634,7 +4634,7 @@ int charger_hv_detect_sw_thread_handler(void *unused)
     {
     	ktime = ktime_set(0, BAT_MS_TO_NS(500));
 
-        //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_thread_handler] \n");
+        //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_thread_handler] \n");
 
         charger_hv_init();
 
@@ -4649,13 +4649,13 @@ int charger_hv_detect_sw_thread_handler(void *unused)
 
         if( get_charger_hv_status() == 1)
     	{
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_thread_handler] charger hv\n");    
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_thread_handler] charger hv\n");    
             
             pchr_turn_off_charging_bq24196();
         }
         else
         {
-            //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_thread_handler] upmu_chr_get_vcdt_hv_det() != 1\n");    
+            //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_thread_handler] upmu_chr_get_vcdt_hv_det() != 1\n");    
         }
 
         kick_charger_wdt(); 
@@ -4672,7 +4672,7 @@ enum hrtimer_restart charger_hv_detect_sw_workaround(struct hrtimer *timer)
     charger_hv_detect_flag = 1;
     wake_up_interruptible(&charger_hv_detect_waiter);
 
-    //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_workaround] \n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_workaround] \n");
 
     return HRTIMER_NORESTART;
 }
@@ -4689,10 +4689,10 @@ void charger_hv_detect_sw_workaround_init(void)
     charger_hv_detect_thread = kthread_run(charger_hv_detect_sw_thread_handler, 0, "mtk charger_hv_detect_sw_workaround");
     if (IS_ERR(charger_hv_detect_thread))
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[%s]: failed to create charger_hv_detect_sw_workaround thread\n", __FUNCTION__);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[%s]: failed to create charger_hv_detect_sw_workaround thread\n", __FUNCTION__);
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "charger_hv_detect_sw_workaround_init : done\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "charger_hv_detect_sw_workaround_init : done\n" );
 }
 
 ///////////////////////////////////////////////////////////////////////////////////////////
@@ -4711,7 +4711,7 @@ int battery_kthread_handler(void *unused)
     {
         ktime = ktime_set(10, 0);	// 10s, 10* 1000 ms
     
-//        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[battery_kthread_handler] \n");
+//        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[battery_kthread_handler] \n");
         wait_event_interruptible(battery_kthread_waiter, battery_kthread_flag != 0);
     
         battery_kthread_flag = 0;
@@ -4728,7 +4728,7 @@ enum hrtimer_restart battery_kthread_hrtimer_func(struct hrtimer *timer)
     battery_kthread_flag = 1; 
     wake_up_interruptible(&battery_kthread_waiter);
 
-//    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[battery_kthread_hrtimer_func] \n");
+//    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[battery_kthread_hrtimer_func] \n");
     
     return HRTIMER_NORESTART;
 }
@@ -4745,10 +4745,10 @@ void battery_kthread_hrtimer_init(void)
     battery_kthread_hrtimer_task = kthread_run(battery_kthread_handler, NULL, "mtk battery_kthread_handler"); 
     if (IS_ERR(battery_kthread_hrtimer_task))
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[%s]: failed to create battery_kthread_hrtimer_task thread\n", __FUNCTION__);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[%s]: failed to create battery_kthread_hrtimer_task thread\n", __FUNCTION__);
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "battery_kthread_hrtimer_init : done\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "battery_kthread_hrtimer_init : done\n" );
 }
 
 static int mt6320_battery_probe(struct platform_device *dev)    
@@ -4758,18 +4758,18 @@ static int mt6320_battery_probe(struct platform_device *dev)
     int i=0;
     int ret_device_file=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
 
     /* Integrate with NVRAM */
     ret = alloc_chrdev_region(&adc_cali_devno, 0, 1, ADC_CALI_DEVNAME);
     if (ret) 
-       xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "Error: Can't Get Major number for adc_cali \n");
+       xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "Error: Can't Get Major number for adc_cali \n");
     adc_cali_cdev = cdev_alloc();
     adc_cali_cdev->owner = THIS_MODULE;
     adc_cali_cdev->ops = &adc_cali_fops;
     ret = cdev_add(adc_cali_cdev, adc_cali_devno, 1);
     if(ret)
-       xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "adc_cali Error: cdev_add\n");
+       xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "adc_cali Error: cdev_add\n");
     adc_cali_major = MAJOR(adc_cali_devno);
     adc_cali_class = class_create(THIS_MODULE, ADC_CALI_DEVNAME);
     class_dev = (struct class_device *)device_create(adc_cali_class, 
@@ -4777,32 +4777,32 @@ static int mt6320_battery_probe(struct platform_device *dev)
                                                    adc_cali_devno, 
                                                    NULL, 
                                                    ADC_CALI_DEVNAME);
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] adc_cali prepare : done !!\n ");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] adc_cali prepare : done !!\n ");
 
     /* Integrate with Android Battery Service */
     ret = power_supply_register(&(dev->dev), &mt6320_ac_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_usb_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_battery_main.psy);
     if (ret)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
         return ret;
     }
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
 
 //    wake_lock_init(&battery_suspend_lock, WAKE_LOCK_SUSPEND, "battery wakelock");
 
@@ -4881,13 +4881,13 @@ static int mt6320_battery_probe(struct platform_device *dev)
     //baton initial setting
     //ret=pmic_config_interface(CHR_CON7, 0x01, PMIC_BATON_TDET_EN_MASK, PMIC_BATON_TDET_EN_SHIFT); //BATON_TDET_EN=1
     //ret=pmic_config_interface(AUXADC_CON0, 0x01, PMIC_RG_BUF_PWD_B_MASK, PMIC_RG_BUF_PWD_B_SHIFT); //RG_BUF_PWD_B=1
-    //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[mt6320_battery_probe] BATON_TDET_EN=1 & RG_BUF_PWD_B=1\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[mt6320_battery_probe] BATON_TDET_EN=1 & RG_BUF_PWD_B=1\n");
 
     //battery kernel thread for 10s check and charger in/out event
     /* Replace GPT timer by hrtime */
     battery_kthread_hrtimer_init();    
     kthread_run(bat_thread_kthread, NULL, "bat_thread_kthread"); 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[mt6320_battery_probe] bat_thread_kthread Done\n");    
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[mt6320_battery_probe] bat_thread_kthread Done\n");    
     
     charger_hv_detect_sw_workaround_init();
 
@@ -4907,20 +4907,20 @@ static int mt6320_battery_probe(struct platform_device *dev)
 
 static int mt6320_battery_remove(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver remove!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver remove!! ********\n" );
 
     return 0;
 }
 
 static void mt6320_battery_shutdown(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver shutdown!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver shutdown!! ********\n" );
 
 }
 
 static int mt6320_battery_suspend(struct platform_device *dev, pm_message_t state)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver suspend!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver suspend!! ********\n" );
 
     return 0;
 }
@@ -4976,7 +4976,7 @@ EXPORT_SYMBOL(force_get_tbat);
 
 static int mt6320_battery_resume(struct platform_device *dev)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver resume!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver resume!! ********\n" );
 
 	//g_battery_flag_resume=1;
 
@@ -5107,7 +5107,7 @@ static int mt_batteryNotify_probe(struct platform_device *dev)
 	struct proc_dir_entry *entry = NULL;
 	struct proc_dir_entry *battery_dir = NULL;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** mt_batteryNotify_probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** mt_batteryNotify_probe!! ********\n" );
 
 	ret_device_file = device_create_file(&(dev->dev), &dev_attr_BatteryNotify);
 	ret_device_file = device_create_file(&(dev->dev), &dev_attr_BN_TestMode);
@@ -5127,7 +5127,7 @@ static int mt_batteryNotify_probe(struct platform_device *dev)
         }
     }
 
-	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** mtk_battery_cmd!! ********\n" );
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** mtk_battery_cmd!! ********\n" );
 
     return 0;
 }
@@ -5150,29 +5150,29 @@ static int __init mt6320_battery_init(void)
 
     ret = platform_device_register(&MT6320_battery_device);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_battery_driver] Unable to device register(%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_battery_driver] Unable to device register(%d)\n", ret);
 	return ret;
     }
     
     ret = platform_driver_register(&mt6320_battery_driver);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_battery_driver] Unable to register driver (%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_battery_driver] Unable to register driver (%d)\n", ret);
         return ret;
     }
 
 	// battery notofy UI
 	ret = platform_device_register(&MT_batteryNotify_device);
     if (ret) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt_batteryNotify] Unable to device register(%d)\n", ret);
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt_batteryNotify] Unable to device register(%d)\n", ret);
 		return ret;
     }
     ret = platform_driver_register(&mt_batteryNotify_driver);
     if (ret) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt_batteryNotify] Unable to register driver (%d)\n", ret);
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt_batteryNotify] Unable to register driver (%d)\n", ret);
 		return ret;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_battery_driver] Initialization : DONE !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_battery_driver] Initialization : DONE !!\n");
 
     return 0;
 }
diff --git a/drivers/misc/mediatek/power/mt8127/addon/mt_battery_ncp1851.c b/drivers/misc/mediatek/power/mt8127/addon/mt_battery_ncp1851.c
index d0ab1900..f3d02bbb 100644
--- a/drivers/misc/mediatek/power/mt8127/addon/mt_battery_ncp1851.c
+++ b/drivers/misc/mediatek/power/mt8127/addon/mt_battery_ncp1851.c
@@ -230,12 +230,12 @@ int get_tbat_volt(int times)
     {
         #if defined(ENABLE_TBAT_TREF_SUPPORT)
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(3,times,1);\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(3,times,1);\n");
             }
             return PMIC_IMM_GetOneChannelValue(3,times,1);
         #else
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(4,times,1);\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[get_tbat_volt] return PMIC_IMM_GetOneChannelValue(4,times,1);\n");
             }
             return PMIC_IMM_GetOneChannelValue(4,times,1);
         #endif
@@ -276,32 +276,32 @@ kal_bool upmu_is_chr_det(void)
         if( mt_usb_is_device() )
         {
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] Charger exist and USB is not host\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] Charger exist and USB is not host\n");
             }
             return KAL_TRUE;
         }
         else
         {
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] Charger exist but USB is host\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] Charger exist but USB is host\n");
             }
             //Monitor NCP1851 boost mode status
             if(ncp1851_get_otg_en()== 0) //boost mode disabled
             {
                 if (Enable_BATDRV_LOG == 1) {
-                  xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] USB host mode but boost 5V not enabled\n");				  
+                  xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] USB host mode but boost 5V not enabled\n");				  
                   if(ncp1851_get_faultint() == 1)
                   {
-                      xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] ncp1851 fault int detected!\n");				  				  
+                      xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] ncp1851 fault int detected!\n");				  				  
                       ncp1851_read_register(0x6);
                       bst_int = ncp1851_reg[0x6];
                       ncp1851_reg[0x6] = 0;
                       if(bst_int & (CON6_VBUSILIM_MASK << CON6_VBUSILIM_SHIFT))
-                          xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] ncp1851 boost mode fail due to vbus over current!\n"); 			  
+                          xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] ncp1851 boost mode fail due to vbus over current!\n"); 			  
                       if(bst_int & (CON6_VBUSOV_MASK << CON6_VBUSOV_SHIFT))
-                          xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] ncp1851 boost mode fail due to vbus over voltage!\n"); 			  
+                          xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] ncp1851 boost mode fail due to vbus over voltage!\n"); 			  
                       if(bst_int & (CON6_VBATLO_MASK << CON6_VBATLO_SHIFT))
-                          xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[upmu_is_chr_det] ncp1851 boost mode fail due to vbat low voltage!\n"); 			  					  
+                          xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[upmu_is_chr_det] ncp1851 boost mode fail due to vbat low voltage!\n"); 			  					  
                   }				  
                 }		
                 //ncp1851_set_otg_en(0x1); //TODO: decide if need auto retry
@@ -543,18 +543,18 @@ ssize_t bat_log_write( struct file *filp, const char __user *buff,
                         unsigned long len, void *data )
 {
 	if (copy_from_user( &proc_bat_data, buff, len )) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "bat_log_write error.\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "bat_log_write error.\n");
 		return -EFAULT;
 	}
 
 	if (proc_bat_data[0] == '1') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable battery driver log system\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable battery driver log system\n");
 		Enable_BATDRV_LOG = 1;
 	} else if (proc_bat_data[0] == '2') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "enable battery driver log system:2\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "enable battery driver log system:2\n");
 		Enable_BATDRV_LOG = 2;
 	} else {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "Disable battery driver log system\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "Disable battery driver log system\n");
 		Enable_BATDRV_LOG = 0;
 	}
 
@@ -565,18 +565,18 @@ ssize_t bat_thread_ctrl_write( struct file *filp, const char __user *buff,
                         unsigned long len, void *data )
 {
 	if (copy_from_user( &proc_bat_data_ctrl, buff, len )) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "bat_thread_ctrl_write error.\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "bat_thread_ctrl_write error.\n");
 		return -EFAULT;
 	}
 
 	if (proc_bat_data_ctrl[0] == '1') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "resume bat_thread_kthread()\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "resume bat_thread_kthread()\n");
 		bat_thread_control(1);
 	} else if (proc_bat_data_ctrl[0] == '2') {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "stop bat_thread_kthread()\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "stop bat_thread_kthread()\n");
 		bat_thread_control(0);
 	} else {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "not valid value, resume bat_thread_kthread() as default\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "not valid value, resume bat_thread_kthread() as default\n");
 		bat_thread_control(1);
 	}
 
@@ -590,10 +590,10 @@ int init_proc_log(void)
 
 	if (proc_entry == NULL) {
 		ret = -ENOMEM;
-	  	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log: Couldn't create proc entry\n");
+	  	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log: Couldn't create proc entry\n");
 	} else {
 		proc_entry->write_proc = bat_log_write;
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "init_proc_log loaded.\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "init_proc_log loaded.\n");
 	}
 
 	return ret;
@@ -926,7 +926,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
                     else
                     {
                         gFGsyncTimer_jeita+=10;
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] In JEITA (%d on %d)\r\n", 
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] In JEITA (%d on %d)\r\n", 
                             bat_volt_check_point, gFGsyncTimer_jeita);
                     }
 #else                    
@@ -940,13 +940,13 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 					bat_data->BAT_CAPACITY = bat_volt_check_point;
 
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] In FULL Range (%d)\r\n", bat_volt_check_point);
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] In FULL Range (%d)\r\n", bat_volt_check_point);
 					}
 
 						gSyncPercentage=1;
 
 						if (Enable_BATDRV_LOG == 1) {
-							xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_SyncRecharge] In recharging state, do not sync FG\r\n");
+							xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_SyncRecharge] In recharging state, do not sync FG\r\n");
 						}
 				}
             }
@@ -968,7 +968,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 
 					gSyncPercentage=1;
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_Recharging] Keep UI as 100. bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_Recharging] Keep UI as 100. bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
 						bat_volt_check_point, BMT_status.SOC);
 					}
                 }
@@ -995,7 +995,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 							gSyncPercentage=1;
 
 							//if (Enable_BATDRV_LOG == 1) {
-								xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Use gas gauge : gas gague get 100 first (%d)\r\n", bat_volt_check_point);
+								xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Use gas gauge : gas gague get 100 first (%d)\r\n", bat_volt_check_point);
 							//}
 						}
 						else
@@ -1005,14 +1005,14 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 								gSyncPercentage=0;
 
 								if (Enable_BATDRV_LOG == 1) {
-									xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Can sync due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
+									xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Can sync due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
 									bat_volt_check_point, BMT_status.SOC);
 								}
 							}
 							else
 							{
 								if (Enable_BATDRV_LOG == 1) {
-									xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Keep UI due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
+									xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Keep UI due to bat_volt_check_point=%d, BMT_status.SOC=%d\r\n",
 									bat_volt_check_point, BMT_status.SOC);
 								}
 							}
@@ -1044,7 +1044,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
         	/*Use no gas gauge*/
 			if( gForceADCsolution == 1 )
 			{
-	            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BAT BATTERY] VBAT < %d mV : Android will Power Off System !!\r\n", SYSTEM_OFF_VOLTAGE);
+	            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BAT BATTERY] VBAT < %d mV : Android will Power Off System !!\r\n", SYSTEM_OFF_VOLTAGE);
 	            bat_data->BAT_CAPACITY = 0;
 			}
 			/*Use gas gauge*/
@@ -1062,7 +1062,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
                                 gFG_DOD1=gFG_DOD0;
                                 BMT_status.SOC=bat_volt_check_point;
 				bat_data->BAT_CAPACITY = bat_volt_check_point;
-                                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] VBAT < %d mV (%d, gFG_DOD0=%d)\r\n", SYSTEM_OFF_VOLTAGE, bat_volt_check_point,gFG_DOD0);                
+                                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] VBAT < %d mV (%d, gFG_DOD0=%d)\r\n", SYSTEM_OFF_VOLTAGE, bat_volt_check_point,gFG_DOD0);                
 			}
         }
 		/* If FG_VBAT <= gFG_15_vlot, then run to 15% */
@@ -1085,7 +1085,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 			gFG_DOD1=gFG_DOD0;
 			BMT_status.SOC=bat_volt_check_point;
 			bat_data->BAT_CAPACITY = bat_volt_check_point;
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] FG_VBAT <= %d, then SOC run to 15. (SOC=%d,Point=%d,D1=%d,D0=%d)\r\n",
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] FG_VBAT <= %d, then SOC run to 15. (SOC=%d,Point=%d,D1=%d,D0=%d)\r\n",
 				gFG_15_vlot, BMT_status.SOC, bat_volt_check_point, gFG_DOD1, gFG_DOD0);
 		}
 		/* If "FG_VBAT > gFG_15_vlot" and "FG_report=15%" , then keep 15% till FG_VBAT <= gFG_15_vlot */
@@ -1100,7 +1100,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 			gFG_DOD1=gFG_DOD0;
 			BMT_status.SOC=bat_volt_check_point;
 			bat_data->BAT_CAPACITY = bat_volt_check_point;
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] FG_VBAT(%d) > gFG_15_vlot(%d) and FG_report=15, then UI(%d) keep 15. (D1=%d,D0=%d)\r\n",
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] FG_VBAT(%d) > gFG_15_vlot(%d) and FG_report=15, then UI(%d) keep 15. (D1=%d,D0=%d)\r\n",
 				gFG_voltage, gFG_15_vlot, bat_volt_check_point, gFG_DOD1, gFG_DOD0);
 		}
         else
@@ -1119,7 +1119,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 			else
 			{
 				if (Enable_BATDRV_LOG == 1) {
-					xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_OnlyBattery!] bat_volt_check_point=%d,BMT_status.SOC=%d\r\n",
+					xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_OnlyBattery!] bat_volt_check_point=%d,BMT_status.SOC=%d\r\n",
 					bat_volt_check_point, BMT_status.SOC);
 				}
 
@@ -1128,7 +1128,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 				if( (bat_volt_check_point>BMT_status.SOC) && ((bat_volt_check_point!=1)) )
 				{
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_OnlyBattery] bat_volt_check_point=%d,BMT_status.SOC=%d,gFGsyncTimer=%d(on %d)\r\n",
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_OnlyBattery] bat_volt_check_point=%d,BMT_status.SOC=%d,gFGsyncTimer=%d(on %d)\r\n",
 						bat_volt_check_point, BMT_status.SOC, gFGsyncTimer, DEFAULT_SYNC_TIME_OUT);
 					}
 
@@ -1153,7 +1153,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 						gSyncPercentage=1;
 
 						//if (Enable_BATDRV_LOG == 1) {
-							xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery] Use gas gauge : gas gague get 0 first (%d)\r\n", bat_volt_check_point);
+							xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery] Use gas gauge : gas gague get 0 first (%d)\r\n", bat_volt_check_point);
 						//}
 					}
 					else
@@ -1172,7 +1172,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
 				if(bat_volt_check_point == 100) {
         			g_bat_full_user_view = KAL_TRUE;
 					if (Enable_BATDRV_LOG == 1) {
-						xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_Only] Set g_bat_full_user_view=KAL_TRUE\r\n");
+						xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_Only] Set g_bat_full_user_view=KAL_TRUE\r\n");
 					}
 				}
 			}
@@ -1180,7 +1180,7 @@ static void mt6320_battery_update(struct mt6320_battery_data *bat_data)
     }
 
 	if (Enable_BATDRV_LOG >= 1) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:IntegrationFG:point,per_C,per_V,count,vbat_charger,CSDAC_DAT] %d,%d,%d,%d,%d,ADC_Solution=%d\r\n",
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:IntegrationFG:point,per_C,per_V,count,vbat_charger,CSDAC_DAT] %d,%d,%d,%d,%d,ADC_Solution=%d\r\n",
 		bat_volt_check_point, BMT_status.SOC, FGADC_Get_BatteryCapacity_VoltageMothod(),
 		BATTERY_AVERAGE_SIZE, BMT_status.bat_vol, gForceADCsolution);
 	}
@@ -1225,36 +1225,36 @@ static int mt6320_battery_probe(struct platform_device *dev)
 {
     int ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
         
     /* Integrate with Android Battery Service */
     ret = power_supply_register(&(dev->dev), &mt6320_ac_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_usb_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_battery_main.psy);
     if (ret)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
         return ret;
     }
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
 
     //battery kernel thread for 10s check and charger in/out event
     /*kthread_run(bat_thread_kthread, NULL, "bat_thread_kthread"); */
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bat_thread_kthread] Done\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bat_thread_kthread] Done\n");
 
 	g_bat_init_flag=1;
     
@@ -1475,10 +1475,10 @@ INT16 BattVoltToTemp(UINT32 dwVolt)
 void BATTERY_SetUSBState(int usb_state_value)
 {
 	if ( (usb_state_value < USB_SUSPEND) || ((usb_state_value > USB_CONFIGURED))){
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY] BAT_SetUSBState Fail! Restore to default value\r\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY] BAT_SetUSBState Fail! Restore to default value\r\n");
 		usb_state_value = USB_UNCONFIGURED;
 	} else {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY] BAT_SetUSBState Success! Set %d\r\n", usb_state_value);
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY] BAT_SetUSBState Success! Set %d\r\n", usb_state_value);
 		g_usb_state = usb_state_value;
 	}
 }
@@ -1493,7 +1493,7 @@ kal_bool pmic_chrdet_status(void)
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[pmic_chrdet_status] No charger\r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[pmic_chrdet_status] No charger\r\n");
         return KAL_FALSE;
     }
 }
@@ -1737,7 +1737,7 @@ int g_current_change_flag = 0;
 void ncp1851_set_ac_current(void)
 {
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_ac_current \r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_ac_current \r\n");
     }
 
 #ifdef MTK_NCP1852_SUPPORT
@@ -1746,7 +1746,7 @@ void ncp1851_set_ac_current(void)
     if((g_temp_CC_value > Cust_CC_1600MA) || (g_temp_CC_value < Cust_CC_400MA))
 #endif		
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] invalid current selected (%ld), use 500mA \r\n", g_temp_CC_value);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] invalid current selected (%ld), use 500mA \r\n", g_temp_CC_value);
 	 ncp1851_set_ichg(1);
     }
     else
@@ -1772,7 +1772,7 @@ void ncp1851_set_ac_current(void)
 void ncp1851_set_low_chg_current(void)
 {
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_low_chg_current \r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_low_chg_current \r\n");
     }
     ncp1851_set_iinlim(0x0); //IN current limit at 100mA	
     ncp1851_set_iinset_pin_en(0x0); //Input current limit and AICL control by I2C
@@ -1785,7 +1785,7 @@ void select_charging_curret_ncp1851(void)
 {
     if (g_ftm_battery_flag)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] FTM charging : %d\r\n", charging_level_data[0]);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] FTM charging : %d\r\n", charging_level_data[0]);
         g_temp_CC_value = charging_level_data[0];
 
 #ifdef MTK_NCP1852_SUPPORT
@@ -1811,7 +1811,7 @@ void select_charging_curret_ncp1851(void)
                 {
                     g_temp_CC_value = USB_CHARGER_CURRENT_SUSPEND;
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] disable charging\r\n");
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] disable charging\r\n");
                     }
                 }
                 else if (g_usb_state == USB_UNCONFIGURED)
@@ -1819,7 +1819,7 @@ void select_charging_curret_ncp1851(void)
                     g_temp_CC_value = USB_CHARGER_CURRENT_UNCONFIGURED;
                     ncp1851_set_low_chg_current(); // 100mA
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_low_chg_current() \r\n");
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_low_chg_current() \r\n");
                     }
                 }
                 else if (g_usb_state == USB_CONFIGURED)
@@ -1831,7 +1831,7 @@ void select_charging_curret_ncp1851(void)
                     ncp1851_set_aicl_en(0x0); //disable AICL
                     ncp1851_set_ac_current();
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_ac_current(), CC value (%ld) \r\n", g_temp_CC_value);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_ac_current(), CC value (%ld) \r\n", g_temp_CC_value);
                     }
                 }
                 else
@@ -1839,7 +1839,7 @@ void select_charging_curret_ncp1851(void)
                     g_temp_CC_value = USB_CHARGER_CURRENT_UNCONFIGURED;
                     ncp1851_set_low_chg_current(); // 100mA
                     if (Enable_BATDRV_LOG == 1) {
-                        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_low_chg_current() \r\n");
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_low_chg_current() \r\n");
                     }
                 }
             }
@@ -1852,7 +1852,7 @@ void select_charging_curret_ncp1851(void)
                 ncp1851_set_aicl_en(0x0); //disable AICL
                 ncp1851_set_ac_current();
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_ac_current(), CC value(%ld) \r\n", g_temp_CC_value);
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ncp1851_set_ac_current(), CC value(%ld) \r\n", g_temp_CC_value);
                 }
             }
         }
@@ -1907,7 +1907,7 @@ void select_charging_curret_ncp1851(void)
         else
         {
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Unknown charger type\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Unknown charger type\n");
             }
             g_temp_CC_value = Cust_CC_100MA;
             ncp1851_set_low_chg_current();
@@ -1920,7 +1920,7 @@ void ChargerHwInit_ncp1851(void)
     kal_uint32 ncp1851_status;
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ChargerHwInit_ncp1851\n" );
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ChargerHwInit_ncp1851\n" );
     }
 
     ncp1851_status = ncp1851_get_chip_status();
@@ -1989,7 +1989,7 @@ void ChargerHwInit_ncp1851(void)
 void pchr_turn_off_charging_ncp1851 (void)
 {
 	if (Enable_BATDRV_LOG == 1) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] pchr_turn_off_charging_ncp1851!\r\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] pchr_turn_off_charging_ncp1851!\r\n");
 	}
 
 	ncp1851_set_chg_en(0x0);
@@ -2000,7 +2000,7 @@ void pchr_turn_on_charging_ncp1851 (void)
 	if ( BMT_status.bat_charging_state == CHR_ERROR )
 	{
 		if (Enable_BATDRV_LOG == 1) {
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Charger Error, turn OFF charging !\r\n");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Charger Error, turn OFF charging !\r\n");
 		}
 		BMT_status.total_charging_time = 0;
 		pchr_turn_off_charging_ncp1851();
@@ -2015,7 +2015,7 @@ void pchr_turn_on_charging_ncp1851 (void)
  		ChargerHwInit_ncp1851();
 
 		if (Enable_BATDRV_LOG == 1) {
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] pchr_turn_on_charging_ncp1851 !\r\n");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] pchr_turn_on_charging_ncp1851 !\r\n");
 		}
 
     if (g_bcct_flag == 1)
@@ -2047,13 +2047,13 @@ void pchr_turn_on_charging_ncp1851 (void)
                 mt_set_gpio_dir(GPIO_CHR_SPM_PIN, GPIO_DIR_OUT);
                 mt_set_gpio_out(GPIO_CHR_SPM_PIN, GPIO_OUT_ONE);
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] charger enable !\r\n");
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] charger enable !\r\n");
                 }
             }
             else
             {
                 pchr_turn_off_charging_ncp1851();
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] wait gFG_booting_counter_I_FLAG==2 (%d)\r\n", gFG_booting_counter_I_FLAG);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] wait gFG_booting_counter_I_FLAG==2 (%d)\r\n", gFG_booting_counter_I_FLAG);
             }
         }
 	}
@@ -2292,7 +2292,7 @@ int do_jeita_state_machine(void)
         {
             if(Enable_BATDRV_LOG >=1)
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery Normal Temperature between %d and %d !!\n\r",
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery Normal Temperature between %d and %d !!\n\r",
                     TEMP_POS_10_THRESHOLD,TEMP_POS_45_THRESHOLD); 
             }
             g_temp_status = TEMP_POS_10_TO_POS_45;
@@ -2385,7 +2385,7 @@ int BAT_CheckBatteryStatus_ncp1851(void)
 //	        g_bat_temperature_pre = 22; // MT6320 E1 workaround
 		BMT_status.temperature = g_bat_temperature_pre;
 		if (Enable_BATDRV_LOG == 1) {
-			xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY] Warning !! bat_temperature_volt == 0, restore temperature value\n\r");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY] Warning !! bat_temperature_volt == 0, restore temperature value\n\r");
 		}
 	}
 	else
@@ -2414,7 +2414,7 @@ int BAT_CheckBatteryStatus_ncp1851(void)
                 bat_temperature_volt_temp = bat_temperature_volt;
                 bat_temperature_volt = bat_temperature_volt + ((fg_current_temp*fg_r_value)/1000);
             }
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[tbat_workaround] %d,%d,%d,%d,%d\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[tbat_workaround] %d,%d,%d,%d,%d\n", 
                 bat_temperature_volt_temp, bat_temperature_volt, fg_current_state, fg_current_temp, fg_r_value);        
         }
         //-----------------------------------------------------------------------------
@@ -2426,12 +2426,12 @@ int BAT_CheckBatteryStatus_ncp1851(void)
     if((g_battery_tt_check_flag == 0) && (BMT_status.temperature < MAX_CHARGE_TEMPERATURE) && (BMT_status.temperature > MIN_CHARGE_TEMPERATURE))
     {
         g_battery_thermal_throttling_flag = 1;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Enable battery TT (%d)\n\r", BMT_status.temperature);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Enable battery TT (%d)\n\r", BMT_status.temperature);
         g_battery_tt_check_flag = 1;
     }
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ADC:ncp1851] VCHR:%ld BAT_SENSE:%ld I_SENSE:%ld TBAT:%ld TBAT_vol:%ld BatTT:%d\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ADC:ncp1851] VCHR:%ld BAT_SENSE:%ld I_SENSE:%ld TBAT:%ld TBAT_vol:%ld BatTT:%d\n",
         BMT_status.charger_vol, BMT_status.ADC_BAT_SENSE, BMT_status.ADC_I_SENSE, BMT_status.temperature, bat_temperature_volt, g_battery_thermal_throttling_flag);
     }
 
@@ -2620,13 +2620,13 @@ int BAT_CheckBatteryStatus_ncp1851(void)
     //------------------------------------------------------------
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:AVG:ncp1851] BatTemp:%d Vbat:%d VBatSen:%d SOC:%d ChrDet:%d Vchrin:%d Icharging:%d ChrType:%d USBstate:%d\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:AVG:ncp1851] BatTemp:%d Vbat:%d VBatSen:%d SOC:%d ChrDet:%d Vchrin:%d Icharging:%d ChrType:%d USBstate:%d\r\n",
         BMT_status.temperature ,BMT_status.bat_vol, BMT_status.ADC_BAT_SENSE, BMT_status.SOC,
         upmu_is_chr_det(), BMT_status.charger_vol, BMT_status.ICharging, CHR_Type_num, g_usb_state );
     }
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:FG:ncp1851] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:FG:ncp1851] %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
         BMT_status.temperature ,BMT_status.bat_vol, BMT_status.ADC_BAT_SENSE, BMT_status.SOC,
         upmu_is_chr_det(), BMT_status.charger_vol, BMT_status.ICharging, CHR_Type_num,
         FGADC_Get_BatteryCapacity_CoulombMothod(), FGADC_Get_BatteryCapacity_VoltageMothod(), BATTERY_AVERAGE_SIZE );
@@ -2646,12 +2646,12 @@ int BAT_CheckBatteryStatus_ncp1851(void)
 	
     if(battery_cmd_thermal_test_mode == 1){
         BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
     }	
     
 #if defined(MTK_JEITA_STANDARD_SUPPORT)
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] support JEITA, Tbat=%d\n", BMT_status.temperature);            
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] support JEITA, Tbat=%d\n", BMT_status.temperature);            
     }
     if( do_jeita_state_machine() == PMU_STATUS_FAIL)
     {
@@ -2713,7 +2713,7 @@ int BAT_CheckBatteryStatus_ncp1851(void)
 #endif     
         {
             if (Enable_BATDRV_LOG == 1) {
-            	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery Re-charging !!\n\r");
+            	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery Re-charging !!\n\r");
             }
             BMT_status.bat_full = KAL_FALSE;
             BMT_status.bat_charging_state = CHR_CC;
@@ -2736,7 +2736,7 @@ int BAT_CheckBatteryStatus_ncp1851(void)
             msleep(1000);
 
 //            if (Enable_BATDRV_LOG == 1) {
-//                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery Re-charging. Call FGADC_Reset_SW_Parameter.\n\r");
+//                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery Re-charging. Call FGADC_Reset_SW_Parameter.\n\r");
 //            }
 //            FGADC_Reset_SW_Parameter();
         }
@@ -2752,7 +2752,7 @@ int BAT_CheckBatteryStatus_ncp1851(void)
 PMU_STATUS BAT_BatteryStatusFailAction(void)
 {
     if (Enable_BATDRV_LOG == 1) {
-    	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY] BAD Battery status... Charging Stop !!\n\r");
+    	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY] BAD Battery status... Charging Stop !!\n\r");
     }
 
 #if defined(MTK_JEITA_STANDARD_SUPPORT)
@@ -2782,7 +2782,7 @@ PMU_STATUS BAT_BatteryStatusFailAction(void)
 
 PMU_STATUS BAT_ChargingOTAction(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);
 
     //BMT_status.bat_full = KAL_TRUE;
     BMT_status.total_charging_time = 0;
@@ -2805,7 +2805,7 @@ extern void fg_qmax_update_for_aging(void);
 PMU_STATUS BAT_BatteryFullAction(void)
 {
     if (Enable_BATDRV_LOG == 1) {    
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] check Battery full !!\n\r");            
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] check Battery full !!\n\r");            
     }
     
     BMT_status.bat_full = KAL_TRUE;
@@ -2829,7 +2829,7 @@ PMU_STATUS BAT_BatteryFullAction(void)
             gFG_can_reset_flag = 0;
 
             if (Enable_BATDRV_LOG >= 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
             }
             FGADC_Reset_SW_Parameter();
         }
@@ -2842,7 +2842,7 @@ PMU_STATUS BAT_BatteryFullAction(void)
             g_bat_full_user_view = KAL_TRUE;
             g_HW_Charging_Done = 0;
             if (Enable_BATDRV_LOG >= 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] (%d) VBAT<4150mV. Don't FGADC_Reset_SW_Parameter.\n", BMT_status.bat_vol);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] (%d) VBAT<4150mV. Don't FGADC_Reset_SW_Parameter.\n", BMT_status.bat_vol);
             }
         }
     }
@@ -2877,7 +2877,7 @@ void mt_battery_notify_check(void)
         //if(BMT_status.charger_vol > 3000) //test
         {
             g_BatteryNotifyCode |= 0x0001;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] BMT_status.charger_vol(%d) > %d mV\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] BMT_status.charger_vol(%d) > %d mV\n", 
                 BMT_status.charger_vol, V_CHARGER_MAX);
         }
         else
@@ -2885,7 +2885,7 @@ void mt_battery_notify_check(void)
             g_BatteryNotifyCode &= ~(0x0001);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0001 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0001 (%x)\n", 
                 g_BatteryNotifyCode);
         }    
 #endif
@@ -2895,14 +2895,14 @@ void mt_battery_notify_check(void)
         //if(BMT_status.temperature > 20) //test
         {
             g_BatteryNotifyCode |= 0x0002;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] bat_temp(%d) > 50'C\n", BMT_status.temperature);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] bat_temp(%d) > 50'C\n", BMT_status.temperature);
         }
         else
         {
             g_BatteryNotifyCode &= ~(0x0002);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0002 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0002 (%x)\n", 
                 g_BatteryNotifyCode);
         }    
 #endif
@@ -2914,14 +2914,14 @@ void mt_battery_notify_check(void)
         //if(BMT_status.ICharging > 200) //test
         {
             g_BatteryNotifyCode |= 0x0004;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] I_charging(%d) > 1000mA\n", BMT_status.ICharging);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] I_charging(%d) > 1000mA\n", BMT_status.ICharging);
         }
         else
         {
             g_BatteryNotifyCode &= ~(0x0004);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0003 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0003 (%x)\n", 
                 g_BatteryNotifyCode);
         }    
 #endif
@@ -2931,14 +2931,14 @@ void mt_battery_notify_check(void)
         //if(BMT_status.bat_vol > 3800) //test
         {
             g_BatteryNotifyCode |= 0x0008;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] bat_vlot(%d) > 4350mV\n", BMT_status.bat_vol);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] bat_vlot(%d) > 4350mV\n", BMT_status.bat_vol);
         }
         else
         {
             g_BatteryNotifyCode &= ~(0x0008);
         }
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0004 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0004 (%x)\n", 
                 g_BatteryNotifyCode);
         }
 #endif
@@ -2954,7 +2954,7 @@ void mt_battery_notify_check(void)
             //if(BMT_status.total_charging_time >= 60) //test
             {
                 g_BatteryNotifyCode |= 0x0010;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Charging Over Time\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Charging Over Time\n");
             }
             else
             {
@@ -2963,7 +2963,7 @@ void mt_battery_notify_check(void)
         }
         
         if (Enable_BATDRV_LOG == 1) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0005 (%x)\n", 
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] BATTERY_NOTIFY_CASE_0005 (%x)\n", 
                 g_BatteryNotifyCode);
         }
 #endif
@@ -3032,7 +3032,7 @@ void check_battery_exist(void)
 ///////////////////////////////////////////////////////////////////////////////////////////
 void pmic_init_for_ncp1851(void)
 {
-	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[pmic_init_for_ncp1851] Start\n");
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[pmic_init_for_ncp1851] Start\n");
 
     upmu_set_rg_chrwdt_td(0x0);           // CHRWDT_TD, 4s
     upmu_set_rg_chrwdt_int_en(0);         // CHRWDT_INT_EN
@@ -3062,7 +3062,7 @@ void pmic_init_for_ncp1851(void)
     upmu_set_rg_chr_en(0);           // CHR_EN
     upmu_set_rg_hwcv_en(0);          // RG_HWCV_EN
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[pmic_init_for_ncp1851] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[pmic_init_for_ncp1851] Done\n");
 }
 
 void BAT_UpdateChargerStatus(void)
@@ -3111,7 +3111,7 @@ void BAT_thread_ncp1851(void)
     {
         if(battery_cmd_thermal_test_mode == 1){
             BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery:ncp1851] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery:ncp1851] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
         }
 
 #if defined(MTK_JEITA_STANDARD_SUPPORT)        
@@ -3122,7 +3122,7 @@ void BAT_thread_ncp1851(void)
 #if defined(CONFIG_POWER_EXT)
             xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] CONFIG_POWER_EXT, no update mt6320_battery_update_power_down.\n");
 #else
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery:ncp1851] Tbat(%d)>=60, system need power down.\n", BMT_status.temperature);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery:ncp1851] Tbat(%d)>=60, system need power down.\n", BMT_status.temperature);
             mt6320_battery_update_power_down(&mt6320_battery_main);			
             if( upmu_is_chr_det() == KAL_TRUE )
             {
@@ -3144,7 +3144,7 @@ void BAT_thread_ncp1851(void)
         if(BMT_status.charger_type == CHARGER_UNKNOWN)
         {
             CHR_Type_num = mt_charger_type_detection();
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BAT_thread:ncp1851] CHR_Type_num = %d\r\n", CHR_Type_num);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BAT_thread:ncp1851] CHR_Type_num = %d\r\n", CHR_Type_num);
             BMT_status.charger_type = CHR_Type_num;
             if( (CHR_Type_num==STANDARD_HOST) || (CHR_Type_num==CHARGING_HOST) )
             {
@@ -3172,7 +3172,7 @@ void BAT_thread_ncp1851(void)
                 g_bat_full_user_view = KAL_FALSE;
                 if (Enable_BATDRV_LOG == 1)
                 {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[Battery_Only:ncp1851] Set g_bat_full_user_view=KAL_FALSE\r\n");
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[Battery_Only:ncp1851] Set g_bat_full_user_view=KAL_FALSE\r\n");
                 }
             }
         }
@@ -3243,14 +3243,14 @@ void BAT_thread_ncp1851(void)
 
     if(battery_cmd_thermal_test_mode == 1){
         BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-	    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] In thermal_test_mode 3, Tbat=%d\n", BMT_status.temperature);
+	    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] In thermal_test_mode 3, Tbat=%d\n", BMT_status.temperature);
     }
     
     /* Battery Notify Check */
     mt_battery_notify_check();
 
 #if defined(CONFIG_POWER_EXT)
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] CONFIG_POWER_EXT, no update Android.\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] CONFIG_POWER_EXT, no update Android.\n");
 #else
     if(gFG_booting_counter_I_FLAG == 2)
     {
@@ -3269,12 +3269,12 @@ void BAT_thread_ncp1851(void)
         else
         {
             mt6320_battery_main.BAT_CAPACITY = 50;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] gFG_booting_counter_I_FLAG is 1, SOC=50.\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] gFG_booting_counter_I_FLAG is 1, SOC=50.\n");
         }
     }	
     else
     {
-         xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] gFG_booting_counter_I_FLAG!=2 (%d)\r\n", gFG_booting_counter_I_FLAG);
+         xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] gFG_booting_counter_I_FLAG!=2 (%d)\r\n", gFG_booting_counter_I_FLAG);
     }
 #endif
 
@@ -3293,7 +3293,7 @@ void BAT_thread_ncp1851(void)
 
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] PMU_STATUS_FAIL (chr_err_cnt = %d)\n", chr_err_cnt);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] PMU_STATUS_FAIL (chr_err_cnt = %d)\n", chr_err_cnt);
         }
     }
     /* Battery Full */
@@ -3302,7 +3302,7 @@ void BAT_thread_ncp1851(void)
     {
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery real full. \n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery real full. \n");
         }
         BMT_status.bat_full = KAL_TRUE;
         BMT_status.total_charging_time = 0;
@@ -3324,7 +3324,7 @@ void BAT_thread_ncp1851(void)
             gFG_can_reset_flag = 0;
             if (Enable_BATDRV_LOG == 1)
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
             }
             FGADC_Reset_SW_Parameter();
         }
@@ -3337,7 +3337,7 @@ void BAT_thread_ncp1851(void)
     {
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Charging Over Time. \n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Charging Over Time. \n");
         }
         pchr_turn_off_charging_ncp1851();
 
@@ -3354,13 +3354,13 @@ void BAT_thread_ncp1851(void)
 
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] state=%ld, \n", BMT_status.bat_charging_state);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] state=%ld, \n", BMT_status.bat_charging_state);
         }
 
         /* Charging OT */
         if(BMT_status.total_charging_time >= MAX_CHARGING_TIME)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);        
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Charging over %d hr stop !!\n\r", MAX_CHARGING_TIME);        
             BMT_status.total_charging_time = 0;
             BMT_status.PRE_charging_time = 0;
             BMT_status.CC_charging_time = 0;
@@ -3398,13 +3398,13 @@ void BAT_thread_ncp1851(void)
                 gFG_can_reset_flag = 0;
 
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery real full. Call FGADC_Reset_SW_Parameter.\n");
                 }
                 FGADC_Reset_SW_Parameter();
             }
             g_Calibration_FG = 0;
 
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Battery real full and disable charging (%d) \n", ncp1851_status);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Battery real full and disable charging (%d) \n", ncp1851_status);
             gSyncPercentage = 1;
             return;
         }
@@ -3413,7 +3413,7 @@ void BAT_thread_ncp1851(void)
             pchr_turn_off_charging_ncp1851();
             msleep(100);
             if (Enable_BATDRV_LOG == 1) {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Ncp1851_status is (%d), but battery voltage not over recharge voltage\n", ncp1851_status);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Ncp1851_status is (%d), but battery voltage not over recharge voltage\n", ncp1851_status);
             }
         }
 
@@ -3423,7 +3423,7 @@ void BAT_thread_ncp1851(void)
         pchr_turn_on_charging_ncp1851();
         if (Enable_BATDRV_LOG == 1)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Total charging timer=%d, ncp1851_status=%d \n\r",
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Total charging timer=%d, ncp1851_status=%d \n\r",
             BMT_status.total_charging_time, ncp1851_status);
         }
     }
@@ -3439,7 +3439,7 @@ void BAT_thread_ncp1851(void)
 
     if (Enable_BATDRV_LOG == 1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BAT_thread_ncp1851] End ....\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BAT_thread_ncp1851] End ....\n");
     }
 }
 
@@ -3478,7 +3478,7 @@ void PrechargeCheckStatus(void)
 
     if( get_charger_detect_status() == KAL_TRUE ) //do not check USB device check at precharge state
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Boot up during charging!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Boot up during charging!\n");
         g_boot_charging = 1;
         ncp1851_set_ctrl_vfet(0x5); // VFET = 3.6V
         ncp1851_set_chg_en(0x1); // charger enable, in case adaptor plug in during booting period        
@@ -3491,16 +3491,16 @@ void PrechargeCheckStatus(void)
             g_ocv_lookup_done = 0;
             pchr_turn_off_charging_ncp1851();
             bat_vol = get_i_sense_volt(10);
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath init battery voltage > 3600, battery voltage during system discharging = %d\n", bat_vol);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath init battery voltage > 3600, battery voltage during system discharging = %d\n", bat_vol);
             return;
         }
         else if(bat_vol >= 3700) //Error handling when vfet_status is not reliable
         {
             g_ocv_lookup_done = 0;
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath init, (vfet_status = %d) (ncp1851_status = %d)\n", vfet_status, ncp1851_status);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath init, (vfet_status = %d) (ncp1851_status = %d)\n", vfet_status, ncp1851_status);
             pchr_turn_off_charging_ncp1851();
             bat_vol = get_i_sense_volt(10);
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath init battery voltage > 3600, battery voltage during system discharging = %d\n", bat_vol);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath init battery voltage > 3600, battery voltage during system discharging = %d\n", bat_vol);
             return;
         }
         else
@@ -3510,7 +3510,7 @@ void PrechargeCheckStatus(void)
             bat_volt_check_point = 0;
             g_ocv_lookup_done = 1;
         }
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath init battery voltage < 3600, battery voltage  = %d\n", bat_vol);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath init battery voltage < 3600, battery voltage  = %d\n", bat_vol);
     }
     else
     {
@@ -3526,7 +3526,7 @@ void PrechargeCheckStatus(void)
             if(BMT_status.charger_type == CHARGER_UNKNOWN)
             {
                 CHR_Type_num = mt_charger_type_detection();
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] CHR_Type_num = %d\r\n", CHR_Type_num);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] CHR_Type_num = %d\r\n", CHR_Type_num);
                 BMT_status.charger_type = CHR_Type_num;
                 if( (CHR_Type_num==STANDARD_HOST) || (CHR_Type_num==CHARGING_HOST) )
                 {
@@ -3574,7 +3574,7 @@ void PrechargeCheckStatus(void)
             if((g_battery_tt_check_flag == 0) && (bat_temp < 60) && (bat_temp > (-20)))
             {
                 g_battery_thermal_throttling_flag = 1;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge enable battery TT (%d)\n\r", bat_temp);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge enable battery TT (%d)\n\r", bat_temp);
                 g_battery_tt_check_flag = 1;
             }
 
@@ -3586,32 +3586,32 @@ void PrechargeCheckStatus(void)
 
             if(battery_cmd_thermal_test_mode == 1){
                 BMT_status.temperature = battery_cmd_thermal_test_mode_value;
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] In thermal_test_mode, Tbat=%d\n", BMT_status.temperature);
             }			
 #if (BAT_TEMP_PROTECT_ENABLE == 1)
             if ((bat_temp <= MIN_CHARGE_TEMPERATURE) ||
             (bat_temp == ERR_CHARGE_TEMPERATURE))
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge battery Under Temperature or NTC fail !!\n\r");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge battery Under Temperature or NTC fail !!\n\r");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 #endif
             if (bat_temp >= MAX_CHARGE_TEMPERATURE)
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge battery Over Temperature !!\n\r");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge battery Over Temperature !!\n\r");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 			
 #if (V_CHARGER_ENABLE == 1)
             if (charger_vol <= V_CHARGER_MIN )
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge charger under voltage!!\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge charger under voltage!!\r\n");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 #endif
             if ( charger_vol >= V_CHARGER_MAX )
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge charger over voltage !!\r\n");
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge charger over voltage !!\r\n");
                 BMT_status.bat_charging_state = CHR_ERROR;
             }
 			
@@ -3627,7 +3627,7 @@ void PrechargeCheckStatus(void)
             if(( g_temp_CC_value == Cust_CC_0MA) || (chr_err_cnt > 0))
             {
                 ncp1851_set_chg_en(0x0); // charger disable
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge chr_err_cnt = %d\r\n", chr_err_cnt);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery",	"[BATTERY:ncp1851] Powerpath precharge chr_err_cnt = %d\r\n", chr_err_cnt);
             }
             else
             {
@@ -3637,13 +3637,13 @@ void PrechargeCheckStatus(void)
                 mt_set_gpio_dir(GPIO_CHR_SPM_PIN, GPIO_DIR_OUT);
                 mt_set_gpio_out(GPIO_CHR_SPM_PIN, GPIO_OUT_ONE);
                 if (Enable_BATDRV_LOG == 1) {
-                    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Power path precharging !\r\n");
+                    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Power path precharging !\r\n");
                 }
             }
 
             if((bat_vol >= SYSTEM_OFF_VOLTAGE + 100) || (vfet_status == 1))
             {
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge finish, battery voltage = %d\n", bat_vol);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge finish, battery voltage = %d\n", bat_vol);
                 BMT_status.bat_charging_state = CHR_CC;
                 break;
             }
@@ -3675,7 +3675,7 @@ void PrechargeCheckStatus(void)
                 power_supply_changed(bat_psy);
 
                 sys_vol = get_bat_sense_volt(10);
-                xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge continue, battery voltage (%d), system voltage (%d), charger volt (%d)\n", bat_vol, sys_vol, charger_vol);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge continue, battery voltage (%d), system voltage (%d), charger volt (%d)\n", bat_vol, sys_vol, charger_vol);
 
                 mt_battery_notify_check();
 #endif
@@ -3684,7 +3684,7 @@ void PrechargeCheckStatus(void)
         }
         else
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851]VCDT voltage = %d\n", get_charger_volt(10));        
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851]VCDT voltage = %d\n", get_charger_volt(10));        
             wake_unlock(&battery_suspend_lock);
             pchr_turn_off_charging_ncp1851();
             BMT_status.bat_charging_state = CHR_PRE;
@@ -3728,7 +3728,7 @@ void PrechargeCheckStatus(void)
 
             power_supply_changed(bat_psy);
 #endif
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge stopped due to charger plug-out, wait for system shutdown\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] Powerpath precharge stopped due to charger plug-out, wait for system shutdown\n");
             msleep(5000);
         }
     }
@@ -4635,7 +4635,7 @@ int charger_hv_detect_sw_thread_handler(void *unused)
     {
     	ktime = ktime_set(0, BAT_MS_TO_NS(500));
 
-        //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_thread_handler] \n");
+        //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_thread_handler] \n");
 
         charger_hv_init();
 
@@ -4650,13 +4650,13 @@ int charger_hv_detect_sw_thread_handler(void *unused)
 
         if( get_charger_hv_status() == 1)
     	{
-            xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_thread_handler] charger hv\n");    
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_thread_handler] charger hv\n");    
             
             pchr_turn_off_charging_ncp1851();
         }
         else
         {
-            //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_thread_handler] upmu_chr_get_vcdt_hv_det() != 1\n");    
+            //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_thread_handler] upmu_chr_get_vcdt_hv_det() != 1\n");    
         }
 
         kick_charger_wdt(); 
@@ -4673,7 +4673,7 @@ enum hrtimer_restart charger_hv_detect_sw_workaround(struct hrtimer *timer)
     charger_hv_detect_flag = 1;
     wake_up_interruptible(&charger_hv_detect_waiter);
 
-    //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[charger_hv_detect_sw_workaround] \n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[charger_hv_detect_sw_workaround] \n");
 
     return HRTIMER_NORESTART;
 }
@@ -4690,10 +4690,10 @@ void charger_hv_detect_sw_workaround_init(void)
     charger_hv_detect_thread = kthread_run(charger_hv_detect_sw_thread_handler, 0, "mtk charger_hv_detect_sw_workaround");
     if (IS_ERR(charger_hv_detect_thread))
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[%s]: failed to create charger_hv_detect_sw_workaround thread\n", __FUNCTION__);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[%s]: failed to create charger_hv_detect_sw_workaround thread\n", __FUNCTION__);
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "charger_hv_detect_sw_workaround_init : done\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "charger_hv_detect_sw_workaround_init : done\n" );
 }
 
 ///////////////////////////////////////////////////////////////////////////////////////////
@@ -4712,7 +4712,7 @@ int battery_kthread_handler(void *unused)
     {
         ktime = ktime_set(10, 0);	// 10s, 10* 1000 ms
     
-//        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[battery_kthread_handler] \n");
+//        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[battery_kthread_handler] \n");
         wait_event_interruptible(battery_kthread_waiter, battery_kthread_flag != 0);
     
         battery_kthread_flag = 0;
@@ -4729,7 +4729,7 @@ enum hrtimer_restart battery_kthread_hrtimer_func(struct hrtimer *timer)
     battery_kthread_flag = 1; 
     wake_up_interruptible(&battery_kthread_waiter);
 
-//    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[battery_kthread_hrtimer_func] \n");
+//    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[battery_kthread_hrtimer_func] \n");
     
     return HRTIMER_NORESTART;
 }
@@ -4746,10 +4746,10 @@ void battery_kthread_hrtimer_init(void)
     battery_kthread_hrtimer_task = kthread_run(battery_kthread_handler, NULL, "mtk battery_kthread_handler"); 
     if (IS_ERR(battery_kthread_hrtimer_task))
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[%s]: failed to create battery_kthread_hrtimer_task thread\n", __FUNCTION__);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[%s]: failed to create battery_kthread_hrtimer_task thread\n", __FUNCTION__);
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "battery_kthread_hrtimer_init : done\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "battery_kthread_hrtimer_init : done\n" );
 }
 
 static int mt6320_battery_probe(struct platform_device *dev)    
@@ -4759,18 +4759,18 @@ static int mt6320_battery_probe(struct platform_device *dev)
     int i=0;
     int ret_device_file=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver probe!! ********\n" );
 
     /* Integrate with NVRAM */
     ret = alloc_chrdev_region(&adc_cali_devno, 0, 1, ADC_CALI_DEVNAME);
     if (ret) 
-       xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "Error: Can't Get Major number for adc_cali \n");
+       xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "Error: Can't Get Major number for adc_cali \n");
     adc_cali_cdev = cdev_alloc();
     adc_cali_cdev->owner = THIS_MODULE;
     adc_cali_cdev->ops = &adc_cali_fops;
     ret = cdev_add(adc_cali_cdev, adc_cali_devno, 1);
     if(ret)
-       xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "adc_cali Error: cdev_add\n");
+       xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "adc_cali Error: cdev_add\n");
     adc_cali_major = MAJOR(adc_cali_devno);
     adc_cali_class = class_create(THIS_MODULE, ADC_CALI_DEVNAME);
     class_dev = (struct class_device *)device_create(adc_cali_class, 
@@ -4778,32 +4778,32 @@ static int mt6320_battery_probe(struct platform_device *dev)
                                                    adc_cali_devno, 
                                                    NULL, 
                                                    ADC_CALI_DEVNAME);
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] adc_cali prepare : done !!\n ");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] adc_cali prepare : done !!\n ");
 
     /* Integrate with Android Battery Service */
     ret = power_supply_register(&(dev->dev), &mt6320_ac_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register AC Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_usb_main.psy);
     if (ret)
     {            
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Fail !!\n");                    
         return ret;
     }             
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register USB Success !!\n");
 
     ret = power_supply_register(&(dev->dev), &mt6320_battery_main.psy);
     if (ret)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Fail !!\n");
         return ret;
     }
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[MT6320 BAT_probe] power_supply_register Battery Success !!\n");
 
 //    wake_lock_init(&battery_suspend_lock, WAKE_LOCK_SUSPEND, "battery wakelock");
 
@@ -4878,13 +4878,13 @@ static int mt6320_battery_probe(struct platform_device *dev)
     //baton initial setting
     //ret=pmic_config_interface(CHR_CON7, 0x01, PMIC_BATON_TDET_EN_MASK, PMIC_BATON_TDET_EN_SHIFT); //BATON_TDET_EN=1
     //ret=pmic_config_interface(AUXADC_CON0, 0x01, PMIC_RG_BUF_PWD_B_MASK, PMIC_RG_BUF_PWD_B_SHIFT); //RG_BUF_PWD_B=1
-    //xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[mt6320_battery_probe] BATON_TDET_EN=1 & RG_BUF_PWD_B=1\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[mt6320_battery_probe] BATON_TDET_EN=1 & RG_BUF_PWD_B=1\n");
 
     //battery kernel thread for 10s check and charger in/out event
     /* Replace GPT timer by hrtime */
     battery_kthread_hrtimer_init();     
     kthread_run(bat_thread_kthread, NULL, "bat_thread_kthread"); 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[mt6320_battery_probe] bat_thread_kthread Done\n");    
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[mt6320_battery_probe] bat_thread_kthread Done\n");    
     
     charger_hv_detect_sw_workaround_init();
 
@@ -4904,20 +4904,20 @@ static int mt6320_battery_probe(struct platform_device *dev)
 
 static int mt6320_battery_remove(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver remove!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver remove!! ********\n" );
 
     return 0;
 }
 
 static void mt6320_battery_shutdown(struct platform_device *dev)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver shutdown!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver shutdown!! ********\n" );
 
 }
 
 static int mt6320_battery_suspend(struct platform_device *dev, pm_message_t state)    
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver suspend!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver suspend!! ********\n" );
 
     return 0;
 }
@@ -4973,7 +4973,7 @@ EXPORT_SYMBOL(force_get_tbat);
 
 static int mt6320_battery_resume(struct platform_device *dev)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** MT6320 battery driver resume!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** MT6320 battery driver resume!! ********\n" );
 
 	//g_battery_flag_resume=1;
 
@@ -5104,7 +5104,7 @@ static int mt_batteryNotify_probe(struct platform_device *dev)
 	struct proc_dir_entry *entry = NULL;
 	struct proc_dir_entry *battery_dir = NULL;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** mt_batteryNotify_probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** mt_batteryNotify_probe!! ********\n" );
 
 	ret_device_file = device_create_file(&(dev->dev), &dev_attr_BatteryNotify);
 	ret_device_file = device_create_file(&(dev->dev), &dev_attr_BN_TestMode);
@@ -5124,7 +5124,7 @@ static int mt_batteryNotify_probe(struct platform_device *dev)
         }
     }
 
-	xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "******** mtk_battery_cmd!! ********\n" );
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "******** mtk_battery_cmd!! ********\n" );
 
     return 0;
 }
@@ -5147,29 +5147,29 @@ static int __init mt6320_battery_init(void)
 
     ret = platform_device_register(&MT6320_battery_device);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_battery_driver] Unable to device register(%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_battery_driver] Unable to device register(%d)\n", ret);
 	return ret;
     }
     
     ret = platform_driver_register(&mt6320_battery_driver);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_battery_driver] Unable to register driver (%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_battery_driver] Unable to register driver (%d)\n", ret);
         return ret;
     }
 
 	// battery notofy UI
 	ret = platform_device_register(&MT_batteryNotify_device);
     if (ret) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt_batteryNotify] Unable to device register(%d)\n", ret);
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt_batteryNotify] Unable to device register(%d)\n", ret);
 		return ret;
     }
     ret = platform_driver_register(&mt_batteryNotify_driver);
     if (ret) {
-		xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt_batteryNotify] Unable to register driver (%d)\n", ret);
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt_batteryNotify] Unable to register driver (%d)\n", ret);
 		return ret;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "****[mt6320_battery_driver] Initialization : DONE !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "****[mt6320_battery_driver] Initialization : DONE !!\n");
 
     return 0;
 }
diff --git a/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1851.c b/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1851.c
index 64992ffe..149d3c36 100644
--- a/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1851.c
+++ b/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1851.c
@@ -478,7 +478,7 @@ static void hw_bc11_dump_register(void)
  	kal_uint32 status = STATUS_OK;
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1851] ChargerHwInit_ncp1851\n" );
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1851] ChargerHwInit_ncp1851\n" );
     }
 
     ncp1851_status = ncp1851_get_chip_status();
diff --git a/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1854.c b/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1854.c
index b1be69d8..8847a9de 100644
--- a/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1854.c
+++ b/drivers/misc/mediatek/power/mt8127/charging_hw_ncp1854.c
@@ -498,7 +498,7 @@ static void hw_bc11_dump_register(void)
  	kal_uint32 status = STATUS_OK;
 
     if (Enable_BATDRV_LOG == 1) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[BATTERY:ncp1854] ChargerHwInit_ncp1854\n" );
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[BATTERY:ncp1854] ChargerHwInit_ncp1854\n" );
     }
 
     ncp1854_status = ncp1854_get_chip_status();
diff --git a/drivers/misc/mediatek/power/mt8127/mt6333.c b/drivers/misc/mediatek/power/mt8127/mt6333.c
index 57b7cb5a..ddcdfc28 100644
--- a/drivers/misc/mediatek/power/mt8127/mt6333.c
+++ b/drivers/misc/mediatek/power/mt8127/mt6333.c
@@ -7251,7 +7251,7 @@ static DECLARE_WAIT_QUEUE_HEAD(mt6333_thread_wq);
 
 void wake_up_mt6333(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[wake_up_mt6333]\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[wake_up_mt6333]\n");
     mt6333_thread_timeout = 1;
     wake_up(&mt6333_thread_wq);
 }
@@ -7280,15 +7280,15 @@ void cust_mt6333_interrupt_en_setting(void)
     mt6333_set_rg_int_en_chr_oc(0);
     mt6333_set_rg_int_en_chr_plug_in_flash(0);    
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Reg[0x%x]=0x%x\n", MT6333_INT_CON0, mt6333_get_reg_value(MT6333_INT_CON0));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Reg[0x%x]=0x%x\n", MT6333_INT_CON1, mt6333_get_reg_value(MT6333_INT_CON1));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Reg[0x%x]=0x%x\n", MT6333_INT_CON2, mt6333_get_reg_value(MT6333_INT_CON2));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Reg[0x%x]=0x%x\n", MT6333_INT_CON0, mt6333_get_reg_value(MT6333_INT_CON0));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Reg[0x%x]=0x%x\n", MT6333_INT_CON1, mt6333_get_reg_value(MT6333_INT_CON1));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Reg[0x%x]=0x%x\n", MT6333_INT_CON2, mt6333_get_reg_value(MT6333_INT_CON2));
 }
 
 void chr_complete_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chr_complete_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chr_complete_int_handler]....\n");
     
     printk("RGS_CHARGE_COMPLETE_HW = %d\n", mt6333_get_rgs_charge_complete_hw());
     
@@ -7298,119 +7298,119 @@ void chr_complete_int_handler(void)
 void thermal_sd_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[thermal_sd_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[thermal_sd_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS0,0x1,0x1,1);
 }
 
 void thermal_reg_in_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[thermal_reg_in_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[thermal_reg_in_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS0,0x1,0x1,2);
 }
 
 void thermal_reg_out_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[thermal_reg_out_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[thermal_reg_out_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS0,0x1,0x1,3);
 }
 
 void otg_oc_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[otg_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[otg_oc_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS0,0x1,0x1,4);
 }
 
 void otg_thermal_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[otg_thermal_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[otg_thermal_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS0,0x1,0x1,5);
 }
 
 void otg_chrin_short_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[otg_chrin_short_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[otg_chrin_short_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS0,0x1,0x1,6);
 }
 
 void otg_drvcdt_short_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[otg_drvcdt_short_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[otg_drvcdt_short_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS0,0x1,0x1,7);
 }
 
 void chrwdt_flag_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chrwdt_flag_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chrwdt_flag_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,0);
 }
 
 void buck_vcore_oc_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[buck_vcore_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[buck_vcore_oc_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,1);
 }
 
 void buck_vmem_oc_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[buck_vmem_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[buck_vmem_oc_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,2);
 }
 
 void buck_vrf18_oc_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[buck_vrf18_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[buck_vrf18_oc_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,3);
 }
 
 void buck_thermal_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[buck_thermal_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[buck_thermal_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,4);
 }
 
 void flash_en_timeout_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[flash_en_timeout_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[flash_en_timeout_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,5);
 }
 
 void flash_vled_short_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[flash_vled_short_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[flash_vled_short_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,6);
 }
 
 void flash_vled_open_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[flash_vled_open_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[flash_vled_open_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS1,0x1,0x1,7);
 }
 
 void chr_plug_in_flash_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chr_plug_in_flash_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chr_plug_in_flash_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS2,0x1,0x1,0);
 }
 
 void chr_oc_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chr_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chr_oc_int_handler]....\n");
     ret=mt6333_config_interface(MT6333_INT_STATUS2,0x1,0x1,1);
 }
 
@@ -7420,17 +7420,17 @@ static int mt6333_thread_kthread(void *x)
     kal_uint32 int_status_val_1=0;
     kal_uint32 int_status_val_2=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[mt6333_thread_kthread] enter\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[mt6333_thread_kthread] enter\n");
 
     /* Run on a process content */
     while (1) {
         mutex_lock(&mt6333_mutex);
 
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[mt6333_thread_kthread] running\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[mt6333_thread_kthread] running\n");
 
         //--------------------------------------------------------------------------------
         int_status_val_0 = mt6333_get_reg_value(MT6333_INT_STATUS0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] int_status_val_0=0x%x\n", int_status_val_0);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] int_status_val_0=0x%x\n", int_status_val_0);
 
         if( (((int_status_val_0)&(0x0001))>>0) == 1 )  { chr_complete_int_handler();     }
         if( (((int_status_val_0)&(0x0002))>>1) == 1 )  { thermal_sd_int_handler();       }         
@@ -7442,7 +7442,7 @@ static int mt6333_thread_kthread(void *x)
         if( (((int_status_val_0)&(0x0080))>>7) == 1 )  { otg_drvcdt_short_int_handler(); }                     
         //--------------------------------------------------------------------------------
         int_status_val_1 = mt6333_get_reg_value(MT6333_INT_STATUS1);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] int_status_val_1=0x%x\n", int_status_val_1);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] int_status_val_1=0x%x\n", int_status_val_1);
 
         if( (((int_status_val_0)&(0x0001))>>0) == 1 )  { chrwdt_flag_int_handler();       }
         if( (((int_status_val_0)&(0x0002))>>1) == 1 )  { buck_vcore_oc_int_handler();     }          
@@ -7454,7 +7454,7 @@ static int mt6333_thread_kthread(void *x)
         if( (((int_status_val_0)&(0x0080))>>7) == 1 )  { flash_vled_open_int_handler();   }            
         //--------------------------------------------------------------------------------
         int_status_val_2 = mt6333_get_reg_value(MT6333_INT_STATUS2);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] int_status_val_2=0x%x\n", int_status_val_2);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] int_status_val_2=0x%x\n", int_status_val_2);
 
         if( (((int_status_val_0)&(0x0001))>>0) == 1 )  { chr_plug_in_flash_int_handler(); }
         if( (((int_status_val_0)&(0x0002))>>1) == 1 )  { chr_oc_int_handler();            }         
@@ -7479,7 +7479,7 @@ static int mt6333_thread_kthread(void *x)
 
 void mt6333_pmic_eint_irq(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[mt6333_pmic_eint_irq] receive interrupt\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[mt6333_pmic_eint_irq] receive interrupt\n");
 
     wake_up_mt6333();
 
@@ -7488,7 +7488,7 @@ void mt6333_pmic_eint_irq(void)
 
 void MT6333_EINT_SETTING(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[MT6333_EINT_SETTING] start: CUST_EINT_MT6333_PMIC_NUM=%d\n",CUST_EINT_MT6333_PMIC_NUM);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[MT6333_EINT_SETTING] start: CUST_EINT_MT6333_PMIC_NUM=%d\n",CUST_EINT_MT6333_PMIC_NUM);
 
     //ON/OFF interrupt
     cust_mt6333_interrupt_en_setting();
@@ -7509,12 +7509,12 @@ void MT6333_EINT_SETTING(void)
 
     mt_eint_unmask(CUST_EINT_MT6333_PMIC_NUM);
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_NUM=%d\n",           CUST_EINT_MT6333_PMIC_NUM);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_DEBOUNCE_CN=%d\n",   CUST_EINT_MT6333_PMIC_DEBOUNCE_CN);
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_POLARITY=%d\n",      CUST_EINT_MT6333_PMIC_POLARITY);
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_SENSITIVE=%d\n",     CUST_EINT_MT6333_PMIC_SENSITIVE);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_TYPE=%d\n",          CUST_EINT_MT6333_PMIC_TYPE);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_DEBOUNCE_EN=%d\n",   CUST_EINT_MT6333_PMIC_DEBOUNCE_EN);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_NUM=%d\n",           CUST_EINT_MT6333_PMIC_NUM);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_DEBOUNCE_CN=%d\n",   CUST_EINT_MT6333_PMIC_DEBOUNCE_CN);
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_POLARITY=%d\n",      CUST_EINT_MT6333_PMIC_POLARITY);
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_SENSITIVE=%d\n",     CUST_EINT_MT6333_PMIC_SENSITIVE);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_TYPE=%d\n",          CUST_EINT_MT6333_PMIC_TYPE);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6333_PMIC_DEBOUNCE_EN=%d\n",   CUST_EINT_MT6333_PMIC_DEBOUNCE_EN);
 }    
 
 #if 1
@@ -9542,8 +9542,8 @@ void MT6333_PMIC_INIT_SETTING_V1(void)
     
     if(g_mt6333_cid >= PMIC6333_E1_CID_CODE)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",g_mt6333_cid);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] 20130514\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",g_mt6333_cid);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] 20130514\n");
 
         //put init setting from DE/SA
         
@@ -9560,10 +9560,10 @@ void MT6333_PMIC_INIT_SETTING_V1(void)
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] Unknown PMIC Chip (%x)\n",g_mt6333_cid);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] Unknown PMIC Chip (%x)\n",g_mt6333_cid);
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "after MT6333 init : Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "after MT6333 init : Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x\n", 
         0x9f, mt6333_get_reg_value(0x9f),
         0xA0, mt6333_get_reg_value(0xA0),
         0x69, mt6333_get_reg_value(0x69),
@@ -9576,15 +9576,15 @@ void MT6333_PMIC_INIT_SETTING_V1(void)
     #endif
 
     // DCT
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] pmu_drv_tool_customization_init\n");
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "MT6333 before: Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] pmu_drv_tool_customization_init\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "MT6333 before: Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x\n", 
         0x68, mt6333_get_reg_value(0x68),
         0x80, mt6333_get_reg_value(0x80),
         0x9F, mt6333_get_reg_value(0x9F)
         );
     pmu_drv_tool_customization_init(); // #ifdef MTK_MT6333_SUPPORT
     dump_ldo_status_read_debug();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "MT6333 after: Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "MT6333 after: Reg[%x]=0x%x,Reg[%x]=0x%x,Reg[%x]=0x%x\n", 
         0x68, mt6333_get_reg_value(0x68),
         0x80, mt6333_get_reg_value(0x80),
         0x9F, mt6333_get_reg_value(0x9F)
@@ -9609,21 +9609,21 @@ static int mt6333_driver_probe(struct i2c_client *client, const struct i2c_devic
     //---------------------
     g_mt6333_cid = mt6333_get_cid0();
     g_mt6333_cid |= ((mt6333_get_cid1()) << 8);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[mt6333_driver_probe] g_mt6333_cid=0x%x\n", g_mt6333_cid);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[mt6333_driver_probe] g_mt6333_cid=0x%x\n", g_mt6333_cid);
     
     mt6333_hw_init();    
     //mt6333_dump_register();
 
     //pmic initial setting
     MT6333_PMIC_INIT_SETTING_V1();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[MT6333_PMIC_INIT_SETTING_V1] Done\n");
 
     //MT6333 Interrupt Service
     //MT6333_EINT_SETTING();
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[MT6333_EINT_SETTING] Done\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[MT6333_EINT_SETTING] Done\n");
     
     kthread_run(mt6333_thread_kthread, NULL, "mt6333_thread_kthread");
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[mt6333_thread_kthread] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[mt6333_thread_kthread] Done\n");
 
     mt6333_hw_init_done = KAL_TRUE;
 
diff --git a/drivers/misc/mediatek/power/mt8127/pmic_mt6323.c b/drivers/misc/mediatek/power/mt8127/pmic_mt6323.c
index b19523cb..be17fbef 100644
--- a/drivers/misc/mediatek/power/mt8127/pmic_mt6323.c
+++ b/drivers/misc/mediatek/power/mt8127/pmic_mt6323.c
@@ -219,7 +219,7 @@ void PMIC_IMM_PollingAuxadcChannel(void)
 {
 	kal_uint32 ret=0;
     
-	 //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_IMM_PollingAuxadcChannel] before:%d ",upmu_get_rg_adc_deci_gdly());
+	 //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_IMM_PollingAuxadcChannel] before:%d ",upmu_get_rg_adc_deci_gdly());
 
 	if (upmu_get_rg_adc_deci_gdly()==1)
 	{
@@ -235,7 +235,7 @@ void PMIC_IMM_PollingAuxadcChannel(void)
 			spin_unlock_irqrestore(&pmic_adc_lock, flags);
 		}
 	}
-	//xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_IMM_PollingAuxadcChannel] after:%d ",upmu_get_rg_adc_deci_gdly());
+	//xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_IMM_PollingAuxadcChannel] after:%d ",upmu_get_rg_adc_deci_gdly());
 }
 
 //==============================================================================
@@ -325,7 +325,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -338,12 +338,12 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
 	            ret_data = upmu_get_rg_adc_out_ch6();				
-                xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[upmu_get_rg_adc_out_ch6] 0x%x\n", ret_data);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[upmu_get_rg_adc_out_ch6] 0x%x\n", ret_data);
 	            break;
 	        case 2:    
 	            while( upmu_get_rg_adc_rdy_thr_sense2() != 1 )
@@ -351,7 +351,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -363,7 +363,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -375,7 +375,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -387,7 +387,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -399,7 +399,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -411,7 +411,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -435,7 +435,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 			msleep(1);
 			if( (count++) > count_time_out)
 			{
-                        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
+                        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[IMM_GetOneChannelValue_PMIC] (%d) Time out!\n", dwChannel);
 			    break;
 			}			
 	            }
@@ -443,7 +443,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 	            break; 				
                 
 	        default:
-	            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
+	            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
 	            wake_unlock(&pmicAuxadc_irq_lock);
 	            return -1;
 	            break;
@@ -456,7 +456,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 	    if (Enable_BATDRV_LOG == 2)
 	    {
 	        //debug
-	        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[AUXADC] u4channel[%d]=%d.\n", 
+	        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[AUXADC] u4channel[%d]=%d.\n", 
 	            dwChannel, ret_data);
 	    }
 	    
@@ -513,7 +513,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
             adc_result = adc_result_temp;
             break;  
         default:
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
             wake_unlock(&pmicAuxadc_irq_lock);
             return -1;
             break;
@@ -522,7 +522,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
     if (Enable_BATDRV_LOG == 2)
     {
         //debug
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[AUXADC] adc_result_temp=%d, adc_result=%d, r_val_temp=%d.\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[AUXADC] adc_result_temp=%d, adc_result=%d, r_val_temp=%d.\n", 
                 adc_result_temp, adc_result, r_val_temp);
     }
 
@@ -539,7 +539,7 @@ int pmic_get_buck_current(int avg_times)
     int offset = 0; // internal offset voltage = XmV, 80
 
     upmu_set_rg_smps_testmode_b(0x10);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_get_buck_current] before meter, Reg[0x%x]=0x%x, Reg[0x%x]=0x%x\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_get_buck_current] before meter, Reg[0x%x]=0x%x, Reg[0x%x]=0x%x\n", 
         0x200, upmu_get_reg_value(0x200), 
         0x758, upmu_get_reg_value(0x758), 
         0x76E, upmu_get_reg_value(0x76E)
@@ -552,11 +552,11 @@ int pmic_get_buck_current(int avg_times)
     else
         val = 0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_get_buck_current] raw_data=%ld, val=%ld, avg_times=%ld\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_get_buck_current] raw_data=%ld, val=%ld, avg_times=%ld\n", 
         raw_data, val, avg_times);
 
     upmu_set_rg_smps_testmode_b(0x0);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_get_buck_current] after meter, Reg[0x%x]=0x%x, Reg[0x%x]=0x%x\n", 
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_get_buck_current] after meter, Reg[0x%x]=0x%x, Reg[0x%x]=0x%x\n", 
         0x200, upmu_get_reg_value(0x200), 
         0x758, upmu_get_reg_value(0x758), 
         0x76E, upmu_get_reg_value(0x76E)
@@ -568,7 +568,7 @@ EXPORT_SYMBOL(pmic_get_buck_current);
 
 void upmu_interrupt_chrdet_int_en(kal_uint32 val)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[upmu_interrupt_chrdet_int_en] val=%d.\r\n", val);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[upmu_interrupt_chrdet_int_en] val=%d.\r\n", val);
 
     upmu_set_rg_int_en_chrdet(val);
 }
@@ -584,7 +584,7 @@ static DECLARE_WAIT_QUEUE_HEAD(pmic_thread_wq);
 
 void wake_up_pmic(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[wake_up_pmic]\r\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[wake_up_pmic]\r\n");
     pmic_thread_timeout = 1;
     wake_up(&pmic_thread_wq);
     wake_lock(&pmicThread_lock);
@@ -651,7 +651,7 @@ void spkl_ab_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[spkl_ab_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[spkl_ab_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,0);    
 }
@@ -660,7 +660,7 @@ void spkl_d_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[spkl_d_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[spkl_d_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,1);    
 }
@@ -669,7 +669,7 @@ void bat_l_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bat_l_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bat_l_int_handler]....\n");
 
 
     upmu_set_rg_lbat_irq_en_min(0);	
@@ -681,7 +681,7 @@ void bat_h_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bat_h_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bat_h_int_handler]....\n");
 
     upmu_set_rg_lbat_irq_en_max(0);
 	
@@ -692,7 +692,7 @@ void watchdog_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[watchdog_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[watchdog_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,4);    
 }
@@ -718,7 +718,7 @@ void pwrkey_int_handler(void)
     #undef METRICS_STR_LEN
 #endif
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pwrkey_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pwrkey_int_handler]....\n");
 
     pwrkey_deb = upmu_get_pwrkey_deb();
 
@@ -731,7 +731,7 @@ void pwrkey_int_handler(void)
 
     if (pwrkey_deb == 1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pwrkey_int_handler] Release pwrkey\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pwrkey_int_handler] Release pwrkey\n");
 #if defined (CONFIG_MTK_KERNEL_POWER_OFF_CHARGING)
 		if(g_boot_mode == KERNEL_POWER_OFF_CHARGING_BOOT && timer_pre != 0)
 		{
@@ -740,10 +740,10 @@ void pwrkey_int_handler(void)
 				{
 					long_pwrkey_press = true;
 				}
-				xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] timer_pos = %ld, timer_pre = %ld, timer_pos-timer_pre = %ld, long_pwrkey_press = %d\r\n",timer_pos, timer_pre, timer_pos-timer_pre, long_pwrkey_press);
+				xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] timer_pos = %ld, timer_pre = %ld, timer_pos-timer_pre = %ld, long_pwrkey_press = %d\r\n",timer_pos, timer_pre, timer_pos-timer_pre, long_pwrkey_press);
 				if(long_pwrkey_press)   //500ms
 				{
-					xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] Power Key Pressed during kernel power off charging, reboot OS\r\n");
+					xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] Power Key Pressed during kernel power off charging, reboot OS\r\n");
 #ifdef CONFIG_AMAZON_SIGN_OF_LIFE
                     life_cycle_set_boot_reason(WARMBOOT_BY_SW);
 #endif
@@ -758,7 +758,7 @@ void pwrkey_int_handler(void)
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pwrkey_int_handler] Press pwrkey\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pwrkey_int_handler] Press pwrkey\n");
 #if defined (CONFIG_MTK_KERNEL_POWER_OFF_CHARGING)
 		if(g_boot_mode == KERNEL_POWER_OFF_CHARGING_BOOT)
 		{
@@ -779,7 +779,7 @@ void thr_l_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[thr_l_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[thr_l_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,6);    
 }
@@ -788,7 +788,7 @@ void thr_h_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[thr_h_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[thr_h_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,7);    
 }
@@ -797,7 +797,7 @@ void vbaton_undet_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vbaton_undet_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vbaton_undet_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,8);    
 }
@@ -806,7 +806,7 @@ void bvalid_det_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bvalid_det_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bvalid_det_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,9);    
 }
@@ -815,7 +815,7 @@ void chrdet_int_handler(void)
 {
     kal_uint32 ret=0;
 	
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chrdet_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chrdet_int_handler]....\n");
 #ifdef CONFIG_MTK_KERNEL_POWER_OFF_CHARGING
 #ifndef CONFIG_MTK_DUAL_INPUT_CHARGER_SUPPORT
     if (!upmu_get_rgs_chrdet())
@@ -825,7 +825,7 @@ void chrdet_int_handler(void)
         
         if(boot_mode == KERNEL_POWER_OFF_CHARGING_BOOT || boot_mode == LOW_POWER_OFF_CHARGING_BOOT)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chrdet_int_handler] Unplug Charger/USB In Kernel Power Off Charging Mode!  Shutdown OS!\r\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chrdet_int_handler] Unplug Charger/USB In Kernel Power Off Charging Mode!  Shutdown OS!\r\n");
             mt_power_off();
         }
     }
@@ -840,7 +840,7 @@ void vbat_ov_int_handler(void)
 {
 	kal_uint32 ret=0;
 	
-	xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vbat_ov_int_handler]....\n"); 
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vbat_ov_int_handler]....\n"); 
 
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,11);
 }
@@ -849,10 +849,10 @@ void ldo_oc_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[ldo_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[ldo_oc_int_handler]....\n");
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
 
     ret=pmic_config_interface(INT_STATUS1,0x1,0x1,0);    
 }
@@ -862,17 +862,17 @@ void fchr_key_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[fchr_key_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[fchr_key_int_handler]....\n");
     
     if(upmu_get_fchrkey_deb()==1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[fchr_key_int_handler] Release fchrkey\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[fchr_key_int_handler] Release fchrkey\n");
         kpd_pmic_rstkey_handler(0x0);
         upmu_set_rg_fchrkey_int_sel(0);
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[fchr_key_int_handler] Press fchrkey\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[fchr_key_int_handler] Press fchrkey\n");
         kpd_pmic_rstkey_handler(0x1);
         upmu_set_rg_fchrkey_int_sel(1);
     }
@@ -886,11 +886,11 @@ void accdet_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[accdet_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[accdet_int_handler]....\n");
 
     ret = accdet_irq_handler();
     if(0 == ret){
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[accdet_int_handler] don't finished\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[accdet_int_handler] don't finished\n");
     }
     ret=pmic_config_interface(INT_STATUS1,0x1,0x1,2);    
 }
@@ -899,7 +899,7 @@ void audio_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[audio_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[audio_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS1,0x1,0x1,3);    
 }
@@ -908,7 +908,7 @@ void rtc_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[rtc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[rtc_int_handler]....\n");
 
     rtc_irq_handler();
 
@@ -919,10 +919,10 @@ void vproc_oc_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vproc_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vproc_oc_int_handler]....\n");
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
 
     upmu_set_rg_pwmoc_ck_pdn(1);	
 	
@@ -935,10 +935,10 @@ void vsys_oc_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vsys_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vsys_oc_int_handler]....\n");
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
 
     upmu_set_rg_pwmoc_ck_pdn(1);
 	
@@ -951,10 +951,10 @@ void vpa_oc_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vpa_oc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vpa_oc_int_handler]....\n");
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS0, upmu_get_reg_value(OCSTATUS0));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] Reg[0x%x]=0x%x\n", OCSTATUS1, upmu_get_reg_value(OCSTATUS1));
 
     upmu_set_rg_pwmoc_ck_pdn(1);
 
@@ -970,17 +970,17 @@ static int pmic_thread_kthread(void *x)
     kal_uint32 int_status_val_0=0;
     kal_uint32 int_status_val_1=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] enter\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] enter\n");
 
     /* Run on a process content */
     while (1) {
         mutex_lock(&pmic_mutex);
 	
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] running\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] running\n");
 
         //--------------------------------------------------------------------------------
         ret=pmic_read_interface(INT_STATUS0,(&int_status_val_0),0xFFFF,0x0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] int_status_val_0=0x%x\n", int_status_val_0);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] int_status_val_0=0x%x\n", int_status_val_0);
 
         if( (((int_status_val_0)&(0x0001))>>0) == 1 )  { spkl_ab_int_handler();      }
         if( (((int_status_val_0)&(0x0002))>>1) == 1 )  { spkl_d_int_handler();      }         
@@ -997,7 +997,7 @@ static int pmic_thread_kthread(void *x)
                      
         //--------------------------------------------------------------------------------
         ret=pmic_read_interface(INT_STATUS1,(&int_status_val_1),0xFFFF,0x0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] int_status_val_1=0x%x\n", int_status_val_1);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] int_status_val_1=0x%x\n", int_status_val_1);
 
         if( (((int_status_val_1)&(0x0001))>>0) == 1 )  { ldo_oc_int_handler();          }
         if( (((int_status_val_1)&(0x0002))>>1) == 1 )  { fchr_key_int_handler();      }
@@ -1017,10 +1017,10 @@ static int pmic_thread_kthread(void *x)
         cust_pmic_interrupt_en_setting();
 
         ret=pmic_read_interface(INT_STATUS0,(&int_status_val_0),0xFFFF,0x0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] after ,int_status_val_0=0x%x\n", int_status_val_0);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] after ,int_status_val_0=0x%x\n", int_status_val_0);
 
         ret=pmic_read_interface(INT_STATUS1,(&int_status_val_1),0xFFFF,0x0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] after ,int_status_val_1=0x%x\n", int_status_val_1);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] after ,int_status_val_1=0x%x\n", int_status_val_1);
 
 	
         mutex_unlock(&pmic_mutex);
@@ -1038,7 +1038,7 @@ static int pmic_thread_kthread(void *x)
 
 void mt6323_pmic_eint_irq(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[mt6323_pmic_eint_irq] receive interrupt\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[mt6323_pmic_eint_irq] receive interrupt\n");
 
     //pmic internal
     wake_up_pmic();
@@ -1048,14 +1048,14 @@ void mt6323_pmic_eint_irq(void)
 
 void PMIC_EINT_SETTING(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_EINT_SETTING] start: CUST_EINT_MT6323_PMIC_NUM=%d\n",CUST_EINT_MT6323_PMIC_NUM);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_EINT_SETTING] start: CUST_EINT_MT6323_PMIC_NUM=%d\n",CUST_EINT_MT6323_PMIC_NUM);
 
     //ON/OFF interrupt
     cust_pmic_interrupt_en_setting();
 
     //GPIO Setting for early porting
     //mt_set_gpio_mode(GPIO37,GPIO_MODE_01); //EINT3 mode 1 on GPIO37
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] GPIO37=GPIO_MODE_01 for EINT3 usage\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] GPIO37=GPIO_MODE_01 for EINT3 usage\n");
 
     //EINT setting
     //mt_eint_set_sens(           CUST_EINT_MT6323_PMIC_NUM,
@@ -1071,12 +1071,12 @@ void PMIC_EINT_SETTING(void)
 
     mt_eint_unmask(CUST_EINT_MT6323_PMIC_NUM);
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_NUM=%d\n", CUST_EINT_MT6323_PMIC_NUM);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_DEBOUNCE_CN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_CN);
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_POLARITY=%d\n", CUST_EINT_MT6323_PMIC_POLARITY);
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_SENSITIVE=%d\n", CUST_EINT_MT6323_PMIC_SENSITIVE);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_TYPE=%d\n", CUST_EINT_MT6323_PMIC_TYPE);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_DEBOUNCE_EN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_EN);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_NUM=%d\n", CUST_EINT_MT6323_PMIC_NUM);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_DEBOUNCE_CN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_CN);
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_POLARITY=%d\n", CUST_EINT_MT6323_PMIC_POLARITY);
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_SENSITIVE=%d\n", CUST_EINT_MT6323_PMIC_SENSITIVE);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_TYPE=%d\n", CUST_EINT_MT6323_PMIC_TYPE);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6323_PMIC_DEBOUNCE_EN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_EN);
 
     upmu_set_rg_intrp_ck_pdn(0); //for all interrupt events, turn on interrupt module clock
 }
@@ -1090,7 +1090,7 @@ void PMIC_DUMP_ALL_Register(void)
     for (i=0;i<0xFFFF;i++)
     {
         ret=pmic_read_interface(i,&reg_val,0xFFFF,0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Reg[0x%x]=0x%x\n", i, reg_val);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Reg[0x%x]=0x%x\n", i, reg_val);
     }
 }
 
@@ -1119,7 +1119,7 @@ U32 pmic_read_interface (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
     pmic6323_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1131,7 +1131,7 @@ U32 pmic_read_interface (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
 
     mutex_unlock(&pmic_access_mutex);
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1152,7 +1152,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     pmic6323_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1165,7 +1165,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     return_value= pwrap_wacs2(1, (RegNum), pmic6323_reg, &rdata);
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1178,7 +1178,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     pmic6323_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap write data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap write data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1187,7 +1187,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
 
     mutex_unlock(&pmic_access_mutex);
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1209,7 +1209,7 @@ U32 pmic_read_interface_nolock (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
     pmic6323_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface_nolock] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface_nolock] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         return return_value;
     }
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface_nolock] Reg[%x]=0x%x\n", RegNum, pmic6323_reg);
@@ -1218,7 +1218,7 @@ U32 pmic_read_interface_nolock (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
     *val = (pmic6323_reg >> SHIFT);
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface_nolock] val=0x%x\n", *val);
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface_nolock] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface_nolock] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1237,7 +1237,7 @@ U32 pmic_config_interface_nolock (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     pmic6323_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface_nolock] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface_nolock] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         return return_value;
     }
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface_nolock] Reg[%x]=0x%x\n", RegNum, pmic6323_reg);
@@ -1249,12 +1249,12 @@ U32 pmic_config_interface_nolock (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     return_value= pwrap_wacs2(1, (RegNum), pmic6323_reg, &rdata);
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface_nolock] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface_nolock] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         return return_value;
     }
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface_nolock] write Reg[%x]=0x%x\n", RegNum, pmic6323_reg);
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface_nolock] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface_nolock] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1266,7 +1266,7 @@ U32 pmic_config_interface_nolock (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
 U32 g_reg_value=0;
 static ssize_t show_pmic_access(struct device *dev,struct device_attribute *attr, char *buf)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[show_pmic_access] 0x%x\n", g_reg_value);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[show_pmic_access] 0x%x\n", g_reg_value);
     return sprintf(buf, "%u\n", g_reg_value);
 }
 static ssize_t store_pmic_access(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -1275,23 +1275,23 @@ static ssize_t store_pmic_access(struct device *dev,struct device_attribute *att
     char *pvalue = NULL;
     U32 reg_value = 0;
     U32 reg_address = 0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] \n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] \n");
     if(buf != NULL && size != 0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] buf is %s and size is %d \n",buf,size);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] buf is %s and size is %d \n",buf,size);
         reg_address = simple_strtoul(buf,&pvalue,16);
 
         if(size > 5)
         {
             reg_value = simple_strtoul((pvalue+1),NULL,16);
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] write PMU reg 0x%x with value 0x%x !\n",reg_address,reg_value);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] write PMU reg 0x%x with value 0x%x !\n",reg_address,reg_value);
             ret=pmic_config_interface(reg_address, reg_value, 0xFFFF, 0x0);
         }
         else
         {
             ret=pmic_read_interface(reg_address, &g_reg_value, 0xFFFF, 0x0);
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] read PMU reg 0x%x with value 0x%x !\n",reg_address,g_reg_value);
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] Please use \"cat pmic_access\" to get value\r\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] read PMU reg 0x%x with value 0x%x !\n",reg_address,g_reg_value);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] Please use \"cat pmic_access\" to get value\r\n");
         }
     }
     return size;
@@ -1341,7 +1341,7 @@ VCAM_IO
 
 void dct_pmic_VPROC_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VPROC_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VPROC_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1355,7 +1355,7 @@ void dct_pmic_VPROC_enable(kal_bool dctEnable)
 
 void dct_pmic_VSYS_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VSYS_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VSYS_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1369,7 +1369,7 @@ void dct_pmic_VSYS_enable(kal_bool dctEnable)
 
 void dct_pmic_VPA_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VPA_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VPA_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1384,7 +1384,7 @@ void dct_pmic_VPA_enable(kal_bool dctEnable)
 //Digital LDO
 void dct_pmic_VIO28_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIO28_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIO28_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1398,7 +1398,7 @@ void dct_pmic_VIO28_enable(kal_bool dctEnable)
 
 void dct_pmic_VUSB_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VUSB_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VUSB_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1412,7 +1412,7 @@ void dct_pmic_VUSB_enable(kal_bool dctEnable)
 
 void dct_pmic_VMC_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VMC_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VMC_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1426,7 +1426,7 @@ void dct_pmic_VMC_enable(kal_bool dctEnable)
 
 void dct_pmic_VMCH_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VMCH_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VMCH_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1440,7 +1440,7 @@ void dct_pmic_VMCH_enable(kal_bool dctEnable)
 
 void dct_pmic_VEMC_3V3_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VEMC_3V3_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VEMC_3V3_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1454,7 +1454,7 @@ void dct_pmic_VEMC_3V3_enable(kal_bool dctEnable)
 
 void dct_pmic_VGP1_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VGP1_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VGP1_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1468,7 +1468,7 @@ void dct_pmic_VGP1_enable(kal_bool dctEnable)
 
 void dct_pmic_VGP2_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VGP2_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VGP2_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1482,7 +1482,7 @@ void dct_pmic_VGP2_enable(kal_bool dctEnable)
 
 void dct_pmic_VGP3_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VGP3_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VGP3_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1496,7 +1496,7 @@ void dct_pmic_VGP3_enable(kal_bool dctEnable)
 
 void dct_pmic_VCN_1V8_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCN18_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCN18_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1510,7 +1510,7 @@ void dct_pmic_VCN_1V8_enable(kal_bool dctEnable)
 
 void dct_pmic_VSIM1_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VSIM1_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VSIM1_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1524,7 +1524,7 @@ void dct_pmic_VSIM1_enable(kal_bool dctEnable)
 
 void dct_pmic_VSIM2_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VSIM2_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VSIM2_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1538,7 +1538,7 @@ void dct_pmic_VSIM2_enable(kal_bool dctEnable)
 
 void dct_pmic_VRTC_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VRTC_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VRTC_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1552,7 +1552,7 @@ void dct_pmic_VRTC_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAM_AF_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAM_AF_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAM_AF_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1566,7 +1566,7 @@ void dct_pmic_VCAM_AF_enable(kal_bool dctEnable)
 
 void dct_pmic_VIBR_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIBR_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIBR_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1580,7 +1580,7 @@ void dct_pmic_VIBR_enable(kal_bool dctEnable)
 
 void dct_pmic_VM_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VM_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VM_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1594,7 +1594,7 @@ void dct_pmic_VM_enable(kal_bool dctEnable)
 
 void dct_pmic_VRF18_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VRF18_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VRF18_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1608,7 +1608,7 @@ void dct_pmic_VRF18_enable(kal_bool dctEnable)
 
 void dct_pmic_VIO18_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIO18_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIO18_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1622,7 +1622,7 @@ void dct_pmic_VIO18_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAMD_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAMD_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAMD_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1636,7 +1636,7 @@ void dct_pmic_VCAMD_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAM_IO_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAM_IO_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAM_IO_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1651,7 +1651,7 @@ void dct_pmic_VCAM_IO_enable(kal_bool dctEnable)
 //ANALOG LDO
 void dct_pmic_VTCXO_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VTCXO_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VTCXO_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1665,7 +1665,7 @@ void dct_pmic_VTCXO_enable(kal_bool dctEnable)
 
 void dct_pmic_VA_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VA_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VA_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1679,7 +1679,7 @@ void dct_pmic_VA_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAMA_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAMA_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAMA_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1693,7 +1693,7 @@ void dct_pmic_VCAMA_enable(kal_bool dctEnable)
 
 void dct_pmic_VCN33_enable_bt(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCN28_enable_bt] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCN28_enable_bt] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1707,7 +1707,7 @@ void dct_pmic_VCN33_enable_bt(kal_bool dctEnable)
 
 void dct_pmic_VCN33_enable_wifi(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCN28_enable_wifi] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCN28_enable_wifi] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1723,7 +1723,7 @@ void dct_pmic_VCN33_enable_wifi(kal_bool dctEnable)
 
 void dct_pmic_VCN28_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCN28_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCN28_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1780,43 +1780,43 @@ VCN28
 //D-LDO
 void dct_pmic_VMC_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VMC_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VMC_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     {upmu_set_rg_vmc_vosel(1);}
     else if(volt == VOL_3300){upmu_set_rg_vmc_vosel(1); }
     else if(volt == VOL_1800){upmu_set_rg_vmc_vosel(0); }
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VMCH_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VMCH_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VMCH_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     {upmu_set_rg_vmch_vosel(1);}
     else if(volt == VOL_3000){upmu_set_rg_vmch_vosel(0); }
     else if(volt == VOL_3300){upmu_set_rg_vmch_vosel(1); }
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VEMC_3V3_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VEMC_3V3_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VEMC_3V3_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     {upmu_set_rg_vemc_3v3_vosel(1);}
     else if(volt == VOL_3000){upmu_set_rg_vemc_3v3_vosel(0); }
     else if(volt == VOL_3300){upmu_set_rg_vemc_3v3_vosel(1); }
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VGP1_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VGP1_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VGP1_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vgp1_vosel(5);}
     else if(volt == VOL_1200){ upmu_set_rg_vgp1_vosel(0);}
@@ -1828,13 +1828,13 @@ void dct_pmic_VGP1_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vgp1_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vgp1_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VGP2_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VGP2_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VGP2_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vgp2_vosel(4);}
     else if(volt == VOL_1200){ upmu_set_rg_vgp2_vosel(0);}
@@ -1846,13 +1846,13 @@ void dct_pmic_VGP2_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vgp2_vosel(6);}
     else if(volt == VOL_2000){ upmu_set_rg_vgp2_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VGP3_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VGP3_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VGP3_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vgp3_vosel(0);}
     else if(volt == VOL_1200){ upmu_set_rg_vgp3_vosel(0);}
@@ -1860,13 +1860,13 @@ void dct_pmic_VGP3_sel(kal_uint32 volt)
     else if(volt == VOL_1500){ upmu_set_rg_vgp3_vosel(2);}
     else if(volt == VOL_1800){ upmu_set_rg_vgp3_vosel(3);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VCAM_AF_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCAM_AF_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCAM_AF_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)  { upmu_set_rg_vcam_af_vosel(4);}
     else if(volt == VOL_1200){ upmu_set_rg_vcam_af_vosel(0);}
@@ -1878,37 +1878,37 @@ void dct_pmic_VCAM_AF_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vcam_af_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vcam_af_vosel(7);}	
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VSIM1_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VSIM1_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VSIM1_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vsim1_vosel(0);}
     else if(volt == VOL_1800){ upmu_set_rg_vsim1_vosel(0);}
     else if(volt == VOL_3000){ upmu_set_rg_vsim1_vosel(1);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VSIM2_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VSIM2_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VSIM2_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vsim2_vosel(0);}
     else if(volt == VOL_1800){ upmu_set_rg_vsim2_vosel(0);}
     else if(volt == VOL_3000){ upmu_set_rg_vsim2_vosel(1);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VIBR_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VIBR_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VIBR_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vibr_vosel(0);}
     else if(volt == VOL_1200){ upmu_set_rg_vibr_vosel(0);}
@@ -1920,13 +1920,13 @@ void dct_pmic_VIBR_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vibr_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vibr_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VM_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VM_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VM_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vm_vosel(0);}
     else if(volt == VOL_1200){ upmu_set_rg_vm_vosel(0);}
@@ -1934,13 +1934,13 @@ void dct_pmic_VM_sel(kal_uint32 volt)
     else if(volt == VOL_1500){ upmu_set_rg_vm_vosel(2);}
     else if(volt == VOL_1800){ upmu_set_rg_vm_vosel(3);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VCAMD_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCAMD_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCAMD_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vcamd_vosel(0);}
     else if(volt == VOL_1200){ upmu_set_rg_vcamd_vosel(0);}
@@ -1948,14 +1948,14 @@ void dct_pmic_VCAMD_sel(kal_uint32 volt)
     else if(volt == VOL_1500){ upmu_set_rg_vcamd_vosel(2);}
     else if(volt == VOL_1800){ upmu_set_rg_vcamd_vosel(3);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 //A-LDO
 void dct_pmic_VCAMA_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCAMA_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCAMA_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vcama_vosel(3);}
     else if(volt == VOL_1500){ upmu_set_rg_vcama_vosel(0);}
@@ -1963,13 +1963,13 @@ void dct_pmic_VCAMA_sel(kal_uint32 volt)
     else if(volt == VOL_2500){ upmu_set_rg_vcama_vosel(2);}
     else if(volt == VOL_2800){ upmu_set_rg_vcama_vosel(3);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VCN33_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCN33_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCN33_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vcn33_vosel(3);}
     else if(volt == VOL_3300){ upmu_set_rg_vcn33_vosel(0);}
@@ -1977,7 +1977,7 @@ void dct_pmic_VCN33_sel(kal_uint32 volt)
     else if(volt == VOL_3500){ upmu_set_rg_vcn33_vosel(2);}
     else if(volt == VOL_3600){ upmu_set_rg_vcn33_vosel(3);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
@@ -3175,31 +3175,31 @@ void pmic_ldo_vol_sel(MT65XX_POWER powerId, MT65XX_POWER_VOLTAGE powerVolt)
 
     //Need integrate with DCT : using DCT APIs
 
-    if(     powerId == MT6323_POWER_LDO_VIO28)      { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIO28_enable] No vlotage can setting!\n"); }
-    else if(powerId == MT6323_POWER_LDO_VUSB)       { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VUSB_enable] No vlotage can setting!\n"); }
+    if(     powerId == MT6323_POWER_LDO_VIO28)      { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIO28_enable] No vlotage can setting!\n"); }
+    else if(powerId == MT6323_POWER_LDO_VUSB)       { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VUSB_enable] No vlotage can setting!\n"); }
     else if(powerId == MT6323_POWER_LDO_VMC)        { dct_pmic_VMC_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VMCH)        { dct_pmic_VMCH_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VEMC_3V3)    { dct_pmic_VEMC_3V3_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VGP1)    { dct_pmic_VGP1_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VGP2)        { dct_pmic_VGP2_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VGP3)        { dct_pmic_VGP3_sel(powerVolt); }
-    else if(powerId == MT6323_POWER_LDO_VCN_1V8)        {xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCN_1V8_enable] No vlotage can setting!\n");}
+    else if(powerId == MT6323_POWER_LDO_VCN_1V8)        {xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCN_1V8_enable] No vlotage can setting!\n");}
     else if(powerId == MT6323_POWER_LDO_VSIM1)        { dct_pmic_VSIM1_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VSIM2)        { dct_pmic_VSIM2_sel(powerVolt); }
-    else if(powerId == MT6323_POWER_LDO_VRTC)        { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VRTC_enable] No vlotage can setting!\n");}
+    else if(powerId == MT6323_POWER_LDO_VRTC)        { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VRTC_enable] No vlotage can setting!\n");}
     else if(powerId == MT6323_POWER_LDO_VCAM_AF)        { dct_pmic_VCAM_AF_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VIBR)        { dct_pmic_VIBR_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VM)        { dct_pmic_VM_sel(powerVolt); }
-    else if(powerId == MT6323_POWER_LDO_VRF18)        { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VRF18_enable] No vlotage can setting!\n");}
-    else if(powerId == MT6323_POWER_LDO_VIO18)        { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIO18_enable] No vlotage can setting!\n");}
+    else if(powerId == MT6323_POWER_LDO_VRF18)        { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VRF18_enable] No vlotage can setting!\n");}
+    else if(powerId == MT6323_POWER_LDO_VIO18)        { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIO18_enable] No vlotage can setting!\n");}
     else if(powerId == MT6323_POWER_LDO_VCAMD)        { dct_pmic_VCAMD_sel(powerVolt); }
-    else if(powerId == MT6323_POWER_LDO_VCAM_IO)    { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAM_IO_enable] No vlotage can setting!\n");}
-    else if(powerId == MT6323_POWER_LDO_VTCXO)        { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VTCXO_enable] No vlotage can setting!\n");}
-    else if(powerId == MT6323_POWER_LDO_VA)         { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VA_enable] No vlotage can setting!\n"); }
+    else if(powerId == MT6323_POWER_LDO_VCAM_IO)    { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAM_IO_enable] No vlotage can setting!\n");}
+    else if(powerId == MT6323_POWER_LDO_VTCXO)        { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VTCXO_enable] No vlotage can setting!\n");}
+    else if(powerId == MT6323_POWER_LDO_VA)         { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VA_enable] No vlotage can setting!\n"); }
     else if(powerId == MT6323_POWER_LDO_VCAMA)      { dct_pmic_VCAMA_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VCN33_BT)        { dct_pmic_VCN33_sel(powerVolt); }
     else if(powerId == MT6323_POWER_LDO_VCN33_WIFI)        { dct_pmic_VCN33_sel(powerVolt); }	
-    else if(powerId == MT6323_POWER_LDO_VCN28)      { xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCN28_enable] No vlotage can setting!\n"); }
+    else if(powerId == MT6323_POWER_LDO_VCN28)      { xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCN28_enable] No vlotage can setting!\n"); }
     else
     {
         xlog_printk(ANDROID_LOG_WARN, "Power/PMIC", "[pmic_ldo_ldo_vol_sel] UnKnown powerId (%d)\n", powerId);
@@ -3433,14 +3433,14 @@ void pmic_debug_init(void)
 
     mt_pmic_dir = proc_mkdir("mt_pmic", NULL);
     if (!mt_pmic_dir) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "fail to mkdir /proc/mt_pmic\n" );
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "fail to mkdir /proc/mt_pmic\n" );
         return;
     }
 
     #if LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0)
     entry = proc_create("dump_ldo_status", 00640, mt_pmic_dir, &ldo_status_fops);
     if (!entry) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "fail to create entry /proc/mt_pmic/dump_ldo_status\n" );
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "fail to create entry /proc/mt_pmic/dump_ldo_status\n" );
         return;
     }
     #else
@@ -3460,8 +3460,8 @@ void PMIC_INIT_SETTING_V1(void)
 
     if(chip_version >= PMIC6323_E2_CID_CODE)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",chip_version);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] 20130604_0.85v\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",chip_version);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] 20130604_0.85v\n");
         
         //put init setting from DE/SA
         
@@ -3553,8 +3553,8 @@ ret = pmic_config_interface(0x778,0x1,0x1,15); // [15:15]: RG_VREF18_ENB_MD;
     }
     else if(chip_version >= PMIC6323_E1_CID_CODE)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",chip_version);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] 20130328_0.85v\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",chip_version);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] 20130328_0.85v\n");
 
         //put init setting from DE/SA
 
@@ -3646,7 +3646,7 @@ ret = pmic_config_interface(0x778,0x1,0x1,15); // [15:15]: RG_VREF18_ENB_MD;
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] Unknown PMIC Chip (%x)\n",chip_version);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] Unknown PMIC Chip (%x)\n",chip_version);
     }
 
 
@@ -3679,7 +3679,7 @@ void pmic_setting_depends_rtc(void)
         ret = pmic_config_interface(ANALDO_CON1,    1,    0x1,    11); // [11]=1(VTCXO_ON_CTRL), 
         ret = pmic_config_interface(ANALDO_CON1,    0,    0x1,    0);  // [0] =0(VTCXO_LP_SEL),
         
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_setting_depends_rtc] With 32K. Reg[0x%x]=0x%x\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_setting_depends_rtc] With 32K. Reg[0x%x]=0x%x\n", 
             ANALDO_CON1, upmu_get_reg_value(ANALDO_CON1));
     }
     else
@@ -3688,11 +3688,11 @@ void pmic_setting_depends_rtc(void)
         ret = pmic_config_interface(ANALDO_CON1,    0,    0x1,    11); // [11]=0(VTCXO_ON_CTRL), 
         ret = pmic_config_interface(ANALDO_CON1,    1,    0x1,    0);  // [0] =1(VTCXO_LP_SEL),
 
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_setting_depends_rtc] Without 32K. Reg[0x%x]=0x%x\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_setting_depends_rtc] Without 32K. Reg[0x%x]=0x%x\n", 
             ANALDO_CON1, upmu_get_reg_value(ANALDO_CON1));
     }
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_setting_depends_rtc] no define CONFIG_MTK_RTC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_setting_depends_rtc] no define CONFIG_MTK_RTC\n");
 #endif
 }
 
@@ -3700,21 +3700,21 @@ static int pmic_mt6323_probe(struct platform_device *dev)
 {
     U32 ret_val=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6323 pmic driver probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6323 pmic driver probe!! ********\n" );
 
 
     //get PMIC CID
     ret_val=upmu_get_cid();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "MT6323 PMIC CID=0x%x\n", ret_val );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "MT6323 PMIC CID=0x%x\n", ret_val );
 
     //enable rtc 32k to pmic
     //rtc_gpio_enable_32k(RTC_GPIO_USER_PMIC);
 
     //pmic initial setting
     PMIC_INIT_SETTING_V1();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_INIT_SETTING_V1] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_INIT_SETTING_V1] Done\n");
     PMIC_CUSTOM_SETTING_V1();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_CUSTOM_SETTING_V1] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_CUSTOM_SETTING_V1] Done\n");
     
     //No need due to VTCXO always on
     //pmic setting with RTC
@@ -3722,10 +3722,10 @@ static int pmic_mt6323_probe(struct platform_device *dev)
     
     //PMIC Interrupt Service
     PMIC_EINT_SETTING();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_EINT_SETTING] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_EINT_SETTING] Done\n");
     
     kthread_run(pmic_thread_kthread, NULL, "pmic_thread_kthread");
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] Done\n");
 
     //Dump register
     //#ifndef USER_BUILD_KERNEL
@@ -3734,12 +3734,12 @@ static int pmic_mt6323_probe(struct platform_device *dev)
 
     dump_ldo_status_read_debug();
     pmic_debug_init();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] pmic_debug_init : done.\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] pmic_debug_init : done.\n" );
 
     #ifdef MTK_ENABLE_MD5
     pmic_config_interface(0x402,0x0,0x1,0); // [0:0]: VTCXO_LP_SEL; 
     pmic_config_interface(0x402,0x1,0x1,11); // [11:11]: VTCXO_ON_CTRL;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC] VTCXO control by SRCLKEM due to MTK_ENABLE_MD5, Reg[0x402]=0x%x\n",
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC] VTCXO control by SRCLKEM due to MTK_ENABLE_MD5, Reg[0x402]=0x%x\n",
         upmu_get_reg_value(0x402));
     #endif
 
@@ -3751,19 +3751,19 @@ static int pmic_mt6323_probe(struct platform_device *dev)
 
 static int pmic_mt6323_remove(struct platform_device *dev)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6323 pmic driver remove!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6323 pmic driver remove!! ********\n" );
 
     return 0;
 }
 
 static void pmic_mt6323_shutdown(struct platform_device *dev)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6323 pmic driver shutdown!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6323 pmic driver shutdown!! ********\n" );
 }
 
 static int pmic_mt6323_suspend(struct platform_device *dev, pm_message_t state)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6323 pmic driver suspend!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6323 pmic driver suspend!! ********\n" );
 	upmu_set_rg_vref18_enb(1);
 	upmu_set_rg_adc_deci_gdly(1);
 	upmu_set_rg_clksq_en_aux(1);
@@ -3780,7 +3780,7 @@ static int pmic_mt6323_suspend(struct platform_device *dev, pm_message_t state)
 
 static int pmic_mt6323_resume(struct platform_device *dev)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6323 pmic driver resume!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6323 pmic driver resume!! ********\n" );
 	upmu_set_rg_vref18_enb(0);
 	//upmu_set_rg_adc_deci_gdly(0);
 	upmu_set_rg_clksq_en_aux(1);
@@ -3818,7 +3818,7 @@ static int mt_pmic_probe(struct platform_device *dev)
 {
     int ret_device_file = 0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** mt_pmic_probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** mt_pmic_probe!! ********\n" );
 
     ret_device_file = device_create_file(&(dev->dev), &dev_attr_pmic_access);
 
@@ -3900,7 +3900,7 @@ static struct platform_driver mt_pmic_driver = {
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static void pmic_early_suspend(struct early_suspend *h)
 {
-	xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6323 pmic driver early suspend!! ********\n" );
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6323 pmic driver early suspend!! ********\n" );
 	upmu_set_rg_vref18_enb(0);
 	//upmu_set_rg_adc_deci_gdly(0);
 	upmu_set_rg_clksq_en_aux(1);
@@ -3915,7 +3915,7 @@ static void pmic_early_suspend(struct early_suspend *h)
 
 static void pmic_early_resume(struct early_suspend *h)
 {
-	xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6323 pmic driver early resume!! ********\n" );
+	xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6323 pmic driver early resume!! ********\n" );
 	upmu_set_rg_vref18_enb(0);
 	//upmu_set_rg_adc_deci_gdly(0);
 	upmu_set_rg_clksq_en_aux(1);
@@ -3950,24 +3950,24 @@ static int __init pmic_mt6323_init(void)
     // PMIC device driver register
     ret = platform_device_register(&pmic_mt6323_device);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6323_init] Unable to device register(%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6323_init] Unable to device register(%d)\n", ret);
         return ret;
     }
     ret = platform_driver_register(&pmic_mt6323_driver);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6323_init] Unable to register driver (%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6323_init] Unable to register driver (%d)\n", ret);
         return ret;
     }
 
     // PMIC user space access interface
     ret = platform_device_register(&mt_pmic_device);
     if (ret) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6323_init] Unable to device register(%d)\n", ret);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6323_init] Unable to device register(%d)\n", ret);
             return ret;
     }
     ret = platform_driver_register(&mt_pmic_driver);
     if (ret) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6323_init] Unable to register driver (%d)\n", ret);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6323_init] Unable to register driver (%d)\n", ret);
             return ret;
     }
 
@@ -3975,7 +3975,7 @@ static int __init pmic_mt6323_init(void)
 	register_early_suspend(&pmic_early_suspend_desc);
 #endif
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6323_init] Initialization : DONE !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6323_init] Initialization : DONE !!\n");
 
     return 0;
 }
diff --git a/drivers/misc/mediatek/power/mt8127/pmic_mt6397.c b/drivers/misc/mediatek/power/mt8127/pmic_mt6397.c
index a31b6c1a..b0912112 100644
--- a/drivers/misc/mediatek/power/mt8127/pmic_mt6397.c
+++ b/drivers/misc/mediatek/power/mt8127/pmic_mt6397.c
@@ -370,7 +370,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
                 }
                 break;    
             default:
-                xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
+                xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
                 return -1;
                 break;
         }
@@ -426,7 +426,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
             adc_result = (adc_result_temp*r_val_temp*VOLTAGE_FULL_RANGE)/ADC_PRECISE;
             break;    
         default:
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[AUXADC] Invalid channel value(%d,%d)\n", dwChannel, trimd);
             return -1;
             break;
     }
@@ -480,7 +480,7 @@ int PMIC_IMM_GetOneChannelValue(int dwChannel, int deCount, int trimd)
 
 void upmu_interrupt_chrdet_int_en(kal_uint32 val)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[upmu_interrupt_chrdet_int_en] val=%d.\r\n", val);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[upmu_interrupt_chrdet_int_en] val=%d.\r\n", val);
 
     upmu_set_rg_int_en_chrdet(val);
 }
@@ -508,7 +508,7 @@ extern int g_bat_init_flag;
 
 void wake_up_pmic(void)
 {
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[wake_up_pmic]\r\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[wake_up_pmic]\r\n");
     pmic_thread_timeout = 1;
     wake_up(&pmic_thread_wq);
 }
@@ -531,12 +531,12 @@ void do_chrdet_int_task(void)
     ret=upmu_get_rgs_chrdet();
     if(ret==1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[do_chrdet_int_task] charger exist!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[do_chrdet_int_task] charger exist!\n");
         g_charger_in_flag = 1;
 
         #if defined(CONFIG_POWER_EXT)
         mt_usb_connect();
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[do_chrdet_int_task] call mt_usb_connect() in EVB\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[do_chrdet_int_task] call mt_usb_connect() in EVB\n");
         #endif
     }
     else
@@ -544,11 +544,11 @@ void do_chrdet_int_task(void)
 #if defined (CONFIG_MTK_KERNEL_POWER_OFF_CHARGING)
 		if(g_boot_mode == KERNEL_POWER_OFF_CHARGING_BOOT || g_boot_mode == LOW_POWER_OFF_CHARGING_BOOT)
 		{
-			xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] Unplug Charger/USB In Kernel Power Off Charging Mode!  Shutdown OS!\r\n");
+			xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] Unplug Charger/USB In Kernel Power Off Charging Mode!  Shutdown OS!\r\n");
 			mt_power_off();
 		}
 #endif
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[do_chrdet_int_task] charger NOT exist!\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[do_chrdet_int_task] charger NOT exist!\n");
         g_charger_in_flag = 0;
         g_first_check = 0;
 
@@ -560,18 +560,18 @@ void do_chrdet_int_task(void)
         ret_val=pmic_config_interface(CHR_CON18,0x0,PMIC_RG_BC11_VSRC_EN_MASK,PMIC_RG_BC11_VSRC_EN_SHIFT);
         //check
         ret_val=pmic_read_interface(CHR_CON18,&reg_val,0xFFFF,0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Reg[0x%x]=0x%x\n", CHR_CON18, reg_val);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Reg[0x%x]=0x%x\n", CHR_CON18, reg_val);
         ret_val=pmic_read_interface(CHR_CON19,&reg_val,0xFFFF,0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Reg[0x%x]=0x%x\n", CHR_CON19, reg_val);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Reg[0x%x]=0x%x\n", CHR_CON19, reg_val);
 
         #if defined(CONFIG_POWER_EXT)
         mt_usb_disconnect();
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[do_chrdet_int_task] call mt_usb_disconnect() in EVB\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[do_chrdet_int_task] call mt_usb_disconnect() in EVB\n");
         #endif
     }
     
     #if defined(CONFIG_POWER_EXT)
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[do_chrdet_int_task] Environment=FPGA/EVB\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[do_chrdet_int_task] Environment=FPGA/EVB\n");
     #else
     wake_lock(&battery_suspend_lock);
     g_chr_event = 1;
@@ -579,7 +579,7 @@ void do_chrdet_int_task(void)
     if(g_bat_init_flag==1)
         wake_up_bat();
     else
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[do_chrdet_int_task] battery thread not ready, will do after bettery init.\n");    
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[do_chrdet_int_task] battery thread not ready, will do after bettery init.\n");    
     #endif
 }
 #else
@@ -631,7 +631,7 @@ void spkl_ab_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[spkl_ab_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[spkl_ab_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,0);
     
@@ -642,7 +642,7 @@ void spkr_ab_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[spkr_ab_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[spkr_ab_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,1);
     
@@ -653,7 +653,7 @@ void spkl_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[spkl_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[spkl_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,2);
     
@@ -664,7 +664,7 @@ void spkr_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[spkr_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[spkr_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,3);
     
@@ -678,7 +678,7 @@ void bat_l_int_handler(void)
     kal_uint32 lbat_debounce_count_max=0;
     kal_uint32 lbat_debounce_count_min=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bat_l_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bat_l_int_handler]....\n");
 
     upmu_set_rg_lbat_irq_en_max(0);
 	upmu_set_rg_lbat_irq_en_min(0);
@@ -703,7 +703,7 @@ void bat_h_int_handler(void)
     kal_uint32 lbat_debounce_count_max=0;
     kal_uint32 lbat_debounce_count_min=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bat_h_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bat_h_int_handler]....\n");
 
     upmu_set_rg_int_en_bat_h(0);
 
@@ -727,7 +727,7 @@ void fg_bat_l_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[fg_bat_l_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[fg_bat_l_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,6);
     
@@ -738,7 +738,7 @@ void fg_bat_h_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[fg_bat_h_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[fg_bat_h_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,7);
     
@@ -749,7 +749,7 @@ void watchdog_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[watchdog_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[watchdog_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,8);
     
@@ -760,11 +760,11 @@ void pwrkey_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pwrkey_int_handler]....\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pwrkey_int_handler]....\n");
 
     if(upmu_get_pwrkey_deb()==1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pwrkey_int_handler] Release pwrkey\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pwrkey_int_handler] Release pwrkey\n");
 #if defined (CONFIG_MTK_KERNEL_POWER_OFF_CHARGING)
 		if(g_boot_mode == KERNEL_POWER_OFF_CHARGING_BOOT && timer_pre != 0)
 		{
@@ -773,10 +773,10 @@ void pwrkey_int_handler(void)
 				{
 					long_pwrkey_press = true;
 				}
-				xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] timer_pos = %ld, timer_pre = %ld, timer_pos-timer_pre = %ld, long_pwrkey_press = %d\r\n",timer_pos, timer_pre, timer_pos-timer_pre, long_pwrkey_press);
+				xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] timer_pos = %ld, timer_pre = %ld, timer_pos-timer_pre = %ld, long_pwrkey_press = %d\r\n",timer_pos, timer_pre, timer_pos-timer_pre, long_pwrkey_press);
 				if(long_pwrkey_press)   //500ms
 				{
-					xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] Power Key Pressed during kernel power off charging, reboot OS\r\n");
+					xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] Power Key Pressed during kernel power off charging, reboot OS\r\n");
 					arch_reset(0, NULL);
 				}
 		}
@@ -785,7 +785,7 @@ void pwrkey_int_handler(void)
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pwrkey_int_handler] Press pwrkey\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pwrkey_int_handler] Press pwrkey\n");
 #if defined (CONFIG_MTK_KERNEL_POWER_OFF_CHARGING)
 		if(g_boot_mode == KERNEL_POWER_OFF_CHARGING_BOOT)
 		{
@@ -804,7 +804,7 @@ void thr_l_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[thr_l_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[thr_l_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,10);
     
@@ -815,7 +815,7 @@ void thr_h_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[thr_h_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[thr_h_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,11);
     
@@ -826,7 +826,7 @@ void vbaton_undet_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vbaton_undet_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vbaton_undet_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,12);
     
@@ -837,7 +837,7 @@ void bvalid_det_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[bvalid_det_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[bvalid_det_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS0,0x1,0x1,13);
     
@@ -848,7 +848,7 @@ void chrdet_int_handler(void)
 {
     // read clear, already read
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chrdet_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chrdet_int_handler]....\n");
 #ifdef CONFIG_MTK_KERNEL_POWER_OFF_CHARGING
     if (!upmu_get_rgs_chrdet())
     {
@@ -857,7 +857,7 @@ void chrdet_int_handler(void)
         
         if(boot_mode == KERNEL_POWER_OFF_CHARGING_BOOT || boot_mode == LOW_POWER_OFF_CHARGING_BOOT)
         {
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[chrdet_int_handler] Unplug Charger/USB In Kernel Power Off Charging Mode!  Shutdown OS!\r\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[chrdet_int_handler] Unplug Charger/USB In Kernel Power Off Charging Mode!  Shutdown OS!\r\n");
             mt_power_off();
         }
     }
@@ -869,13 +869,13 @@ void ov_int_handler(void)
 {
     // read clear, already read
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[ov_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[ov_int_handler]....\n");
 }
 void ldo_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[ldo_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[ldo_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS1,0x1,0x1,0);
 
@@ -887,16 +887,16 @@ void homekey_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[homekey_int_handler]....\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[homekey_int_handler]....\n");
 
     if(upmu_get_homekey_deb()==1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[homekey_int_handler] Release HomeKey\r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[homekey_int_handler] Release HomeKey\r\n");
         kpd_pmic_rstkey_handler(0x0);
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[homekey_int_handler] Press HomeKey\r\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[homekey_int_handler] Press HomeKey\r\n");
         kpd_pmic_rstkey_handler(0x1);
     }
     
@@ -909,11 +909,11 @@ void accdet_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[accdet_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[accdet_int_handler]....\n");
 	
     ret = accdet_irq_handler();
 	if(0 == ret){
-		xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[accdet_int_handler] don't finished\n");
+		xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[accdet_int_handler] don't finished\n");
 	}
     ret=pmic_config_interface(INT_STATUS1,0x1,0x1,2);
     //make sure register operation is effective, no fake interrupt received
@@ -924,7 +924,7 @@ void audio_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[audio_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[audio_int_handler]....\n");
     
     ret=pmic_config_interface(INT_STATUS1,0x1,0x1,3);
     
@@ -935,7 +935,7 @@ void rtc_int_handler(void)
 {
     kal_uint32 ret=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[rtc_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[rtc_int_handler]....\n");
     rtc_irq_handler();
     ret=pmic_config_interface(INT_STATUS1,0x1,0x1,4);
     
@@ -946,7 +946,7 @@ void pwrkey_rstb_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pwrkey_rstb_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pwrkey_rstb_int_handler]....\n");
 
     ret=pmic_config_interface(INT_STATUS1,0x1,PMIC_RG_INT_STATUS_PWRKEY_RSTB_MASK,PMIC_RG_INT_STATUS_PWRKEY_RSTB_SHIFT);
 
@@ -958,7 +958,7 @@ void hdmi_sifm_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[hdmi_sifm_int_handler]....\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[hdmi_sifm_int_handler]....\n");
 
     ret=pmic_config_interface(INT_STATUS1,0x1,PMIC_RG_INT_STATUS_HDMI_SIFM_MASK,PMIC_RG_INT_STATUS_HDMI_SIFM_SHIFT);
 
@@ -974,7 +974,7 @@ void hdmi_cec_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[hdmi_cec_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[hdmi_cec_int_handler]....\n");
 
     ret=pmic_config_interface(INT_STATUS1,0x1,PMIC_RG_INT_STATUS_HDMI_CEC_MASK,PMIC_RG_INT_STATUS_HDMI_CEC_SHIFT);
 
@@ -986,7 +986,7 @@ void vca15_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vca15_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vca15_int_handler]....\n");
 
     upmu_set_rg_pwmoc_ck_pdn(1);
 
@@ -1000,7 +1000,7 @@ void vsrmca15_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vsrmca15_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vsrmca15_int_handler]....\n");
     
     upmu_set_rg_pwmoc_ck_pdn(1);
 
@@ -1014,7 +1014,7 @@ void vcore_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vcore_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vcore_int_handler]....\n");
 
     upmu_set_rg_pwmoc_ck_pdn(1);
 
@@ -1028,7 +1028,7 @@ void vgpu_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vgpu_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vgpu_int_handler]....\n");
 
     upmu_set_rg_pwmoc_ck_pdn(1);
     
@@ -1042,7 +1042,7 @@ void vio18_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vio18_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vio18_int_handler]....\n");
 
     upmu_set_rg_pwmoc_ck_pdn(1);
     
@@ -1056,7 +1056,7 @@ void vpca7_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vpca7_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vpca7_int_handler]....\n");
 
     upmu_set_rg_pwmoc_ck_pdn(1);
 
@@ -1070,7 +1070,7 @@ void vsrmca7_int_handler(void)
 {
     kal_uint32 ret=0;
     
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vsrmca7_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vsrmca7_int_handler]....\n");
     
     upmu_set_rg_pwmoc_ck_pdn(1);
 
@@ -1084,7 +1084,7 @@ void vsrmca7_int_handler(void)
 void vdrm_int_handler(void)
 {
     kal_uint32 ret=0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[vdrm_int_handler]....\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[vdrm_int_handler]....\n");
 
     upmu_set_rg_pwmoc_ck_pdn(1);
     
@@ -1103,17 +1103,17 @@ static int pmic_thread_kthread(void *x)
     kal_uint32 int_status_val_0=0;
     kal_uint32 int_status_val_1=0;
 
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] enter\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] enter\n");
 
     /* Run on a process content */
     while (1) {
         mutex_lock(&pmic_mutex);
 
-        //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] running\n");
+        //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] running\n");
 
         //--------------------------------------------------------------------------------
         ret=pmic_read_interface(INT_STATUS0,(&int_status_val_0),0xFFFF,0x0);
-        //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] int_status_val_0=0x%x\n", int_status_val_0);
+        //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] int_status_val_0=0x%x\n", int_status_val_0);
 
         if( (((int_status_val_0)&(0x0001))>>0) == 1 )  { spkl_ab_int_handler();      }
         if( (((int_status_val_0)&(0x0002))>>1) == 1 )  { spkr_ab_int_handler();      }         
@@ -1133,7 +1133,7 @@ static int pmic_thread_kthread(void *x)
         if( (((int_status_val_0)&(0x8000))>>15) == 1 ) { ov_int_handler();           }                       
         //--------------------------------------------------------------------------------
         ret=pmic_read_interface(INT_STATUS1,(&int_status_val_1),0xFFFF,0x0);
-        //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[INT] int_status_val_1=0x%x\n", int_status_val_1);
+        //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[INT] int_status_val_1=0x%x\n", int_status_val_1);
 
         if( (((int_status_val_1)&(0x0001))>>0) == 1 )  { ldo_int_handler();          }
         if( (((int_status_val_1)&(0x0002))>>1) == 1 )  { homekey_int_handler();      }
@@ -1177,7 +1177,7 @@ static int pmic_thread_kthread(void *x)
 
 void mt6397_pmic_eint_irq(void)
 {
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "6397 get int\n");
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "6397 get int\n");
 
     //pmic internal
     wake_up_pmic();
@@ -1189,7 +1189,7 @@ void PMIC_EINT_SETTING(void)
 {
 #ifndef CONFIG_MT8127_FPGA
     //to do, check EINT setting in dct tool
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_EINT_SETTING] start: CUST_EINT_MT6397_PMIC_NUM=%d\n",CUST_EINT_MT6323_PMIC_NUM);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_EINT_SETTING] start: CUST_EINT_MT6397_PMIC_NUM=%d\n",CUST_EINT_MT6323_PMIC_NUM);
 #endif
     //ON/OFF interrupt
     cust_pmic_interrupt_en_setting();
@@ -1201,7 +1201,7 @@ void PMIC_EINT_SETTING(void)
     //GPIO Setting for early porting
     //mt_set_gpio_mode(GPIO52,GPIO_MODE_01); //EINT0 mode 1 on GPIO52
     mt_set_gpio_mode(GPIO_PMIC_EINT_PIN,GPIO_PMIC_EINT_PIN_M_EINT);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] %d,%d for usage\n", GPIO_PMIC_EINT_PIN, GPIO_PMIC_EINT_PIN_M_EINT);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] %d,%d for usage\n", GPIO_PMIC_EINT_PIN, GPIO_PMIC_EINT_PIN_M_EINT);
 
     //EINT setting
     //mt_eint_set_sens(       CUST_EINT_MT6320_PMIC_NUM,
@@ -1219,10 +1219,10 @@ void PMIC_EINT_SETTING(void)
 
     mt_eint_unmask(CUST_EINT_MT6323_PMIC_NUM);
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_NUM=%d\n", CUST_EINT_MT6323_PMIC_NUM);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_DEBOUNCE_CN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_CN);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_TYPE=%d\n", CUST_EINT_MT6323_PMIC_TYPE);    
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_DEBOUNCE_EN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_EN);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_NUM=%d\n", CUST_EINT_MT6323_PMIC_NUM);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_DEBOUNCE_CN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_CN);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_TYPE=%d\n", CUST_EINT_MT6323_PMIC_TYPE);    
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[CUST_EINT] CUST_EINT_MT6397_PMIC_DEBOUNCE_EN=%d\n", CUST_EINT_MT6323_PMIC_DEBOUNCE_EN);
 #endif    
 }
 
@@ -1235,7 +1235,7 @@ void PMIC_DUMP_ALL_Register(void)
     for (i=0;i<0xFFFF;i++)
     {
         ret=pmic_read_interface(i,&reg_val,0xFFFF,0);
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Reg[0x%x]=0x%x\n", i, reg_val);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Reg[0x%x]=0x%x\n", i, reg_val);
     }
 }
 
@@ -1264,7 +1264,7 @@ U32 pmic_read_interface (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
     pmic_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1276,7 +1276,7 @@ U32 pmic_read_interface (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
 
     mutex_unlock(&pmic_access_mutex);
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1297,7 +1297,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     pmic_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1310,7 +1310,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     return_value= pwrap_wacs2(1, (RegNum), pmic_reg, &rdata);
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1323,7 +1323,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     pmic_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap write data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap write data fail\n", RegNum);
         mutex_unlock(&pmic_access_mutex);
         return return_value;
     }
@@ -1332,7 +1332,7 @@ U32 pmic_config_interface (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
 
     mutex_unlock(&pmic_access_mutex);
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1354,7 +1354,7 @@ U32 pmic_read_interface_nolock (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
     pmic_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         return return_value;
     }
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] Reg[%x]=0x%x\n", RegNum, pmic_reg);
@@ -1363,7 +1363,7 @@ U32 pmic_read_interface_nolock (U32 RegNum, U32 *val, U32 MASK, U32 SHIFT)
     *val = (pmic_reg >> SHIFT);
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] val=0x%x\n", *val);
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_read_interface] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_read_interface] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1382,7 +1382,7 @@ U32 pmic_config_interface_nolock (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     pmic_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         return return_value;
     }
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]=0x%x\n", RegNum, pmic_reg);
@@ -1394,7 +1394,7 @@ U32 pmic_config_interface_nolock (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     return_value= pwrap_wacs2(1, (RegNum), pmic_reg, &rdata);
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap read data fail\n", RegNum);
         return return_value;
     }
     //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] write Reg[%x]=0x%x\n", RegNum, pmic_reg);
@@ -1406,14 +1406,14 @@ U32 pmic_config_interface_nolock (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
     pmic_reg=rdata;
     if(return_value!=0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap write data fail\n", RegNum);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]= pmic_wrap write data fail\n", RegNum);
         return return_value;
     }
     xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Reg[%x]=0x%x\n", RegNum, pmic_reg);
     #endif
 
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_config_interface] Can not access HW PMIC\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_config_interface] Can not access HW PMIC\n");
 #endif
 
     return return_value;
@@ -1425,7 +1425,7 @@ U32 pmic_config_interface_nolock (U32 RegNum, U32 val, U32 MASK, U32 SHIFT)
 U32 g_reg_value=0;
 static ssize_t show_pmic_access(struct device *dev,struct device_attribute *attr, char *buf)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[show_pmic_access] 0x%x\n", g_reg_value);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[show_pmic_access] 0x%x\n", g_reg_value);
     return sprintf(buf, "%u\n", g_reg_value);
 }
 static ssize_t store_pmic_access(struct device *dev,struct device_attribute *attr, const char *buf, size_t size)
@@ -1434,23 +1434,23 @@ static ssize_t store_pmic_access(struct device *dev,struct device_attribute *att
     char *pvalue = NULL;
     U32 reg_value = 0;
     U32 reg_address = 0;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] \n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] \n");
     if(buf != NULL && size != 0)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] buf is %s and size is %d \n",buf,size);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] buf is %s and size is %d \n",buf,size);
         reg_address = simple_strtoul(buf,&pvalue,16);
 
         if(size > 5)
         {
             reg_value = simple_strtoul((pvalue+1),NULL,16);
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] write PMU reg 0x%x with value 0x%x !\n",reg_address,reg_value);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] write PMU reg 0x%x with value 0x%x !\n",reg_address,reg_value);
             ret=pmic_config_interface(reg_address, reg_value, 0xFFFF, 0x0);
         }
         else
         {
             ret=pmic_read_interface(reg_address, &g_reg_value, 0xFFFF, 0x0);
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] read PMU reg 0x%x with value 0x%x !\n",reg_address,g_reg_value);
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[store_pmic_access] Please use \"cat pmic_access\" to get value\r\n");
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] read PMU reg 0x%x with value 0x%x !\n",reg_address,g_reg_value);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[store_pmic_access] Please use \"cat pmic_access\" to get value\r\n");
         }
     }
     return size;
@@ -1464,9 +1464,9 @@ void dct_pmic_VIO28_enable(kal_bool dctEnable)
 {
 #if 1
     /* for Sensor co-power with other devices */
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIO28_enable] No enable can setting!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIO28_enable] No enable can setting!\n");
 #else
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIO28_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIO28_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1481,7 +1481,7 @@ void dct_pmic_VIO28_enable(kal_bool dctEnable)
 
 void dct_pmic_VUSB_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VUSB_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VUSB_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1495,7 +1495,7 @@ void dct_pmic_VUSB_enable(kal_bool dctEnable)
 
 void dct_pmic_VMC_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VMC_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VMC_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1509,7 +1509,7 @@ void dct_pmic_VMC_enable(kal_bool dctEnable)
 
 void dct_pmic_VMCH_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VMCH_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VMCH_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1523,7 +1523,7 @@ void dct_pmic_VMCH_enable(kal_bool dctEnable)
 
 void dct_pmic_VEMC_3V3_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VEMC_3V3_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VEMC_3V3_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1537,7 +1537,7 @@ void dct_pmic_VEMC_3V3_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAMD_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAMD_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAMD_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1551,7 +1551,7 @@ void dct_pmic_VCAMD_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAMIO_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAMIO_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAMIO_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1565,7 +1565,7 @@ void dct_pmic_VCAMIO_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAMAF_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAMAF_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAMAF_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1579,7 +1579,7 @@ void dct_pmic_VCAMAF_enable(kal_bool dctEnable)
 
 void dct_pmic_VGP4_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VGP4_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VGP4_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1593,7 +1593,7 @@ void dct_pmic_VGP4_enable(kal_bool dctEnable)
 
 void dct_pmic_VGP5_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VGP5_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VGP5_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1607,7 +1607,7 @@ void dct_pmic_VGP5_enable(kal_bool dctEnable)
 
 void dct_pmic_VGP6_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VGP6_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VGP6_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1621,7 +1621,7 @@ void dct_pmic_VGP6_enable(kal_bool dctEnable)
 
 void dct_pmic_VIBR_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIBR_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIBR_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1635,7 +1635,7 @@ void dct_pmic_VIBR_enable(kal_bool dctEnable)
 
 void dct_pmic_VRTC_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VRTC_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VRTC_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1649,7 +1649,7 @@ void dct_pmic_VRTC_enable(kal_bool dctEnable)
 
 void dct_pmic_VTCXO_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VTCXO_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VTCXO_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1663,7 +1663,7 @@ void dct_pmic_VTCXO_enable(kal_bool dctEnable)
 
 void dct_pmic_VA28_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VA28_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VA28_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1677,7 +1677,7 @@ void dct_pmic_VA28_enable(kal_bool dctEnable)
 
 void dct_pmic_VCAMA_enable(kal_bool dctEnable)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VCAMA_enable] %d\n", dctEnable);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VCAMA_enable] %d\n", dctEnable);
 
     if(dctEnable == KAL_TRUE)
     {
@@ -1694,53 +1694,53 @@ void dct_pmic_VCAMA_enable(kal_bool dctEnable)
 //==============================================================================
 void dct_pmic_VIO28_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VIO28_enable] No voltage can setting!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VIO28_enable] No voltage can setting!\n");
 }
 
 void dct_pmic_VUSB_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VUSB_sel] No voltage can setting!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VUSB_sel] No voltage can setting!\n");
 }
 
 void dct_pmic_VMC_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VMC_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VMC_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vmc_vosel(1);}
     else if(volt == VOL_3300){ upmu_set_rg_vmc_vosel(1);}
     else if(volt == VOL_1800){ upmu_set_rg_vmc_vosel(0);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VMCH_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VMCH_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VMCH_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vmch_vosel(1);}
     else if(volt == VOL_3000){ upmu_set_rg_vmch_vosel(0);}
     else if(volt == VOL_3300){ upmu_set_rg_vmch_vosel(1);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VEMC_3V3_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VEMC_3V3_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VEMC_3V3_sel] value=%d \n", volt);
     
     if(volt == VOL_DEFAULT)  { upmu_set_rg_vemc_3v3_vosel(1);}
     else if(volt == VOL_3000){ upmu_set_rg_vemc_3v3_vosel(0);}
     else if(volt == VOL_3300){ upmu_set_rg_vemc_3v3_vosel(1);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }    
 }
 
 void dct_pmic_VCAMD_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCAMD_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCAMD_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vcamd_vosel(5);}
     else if(volt == VOL_1200){ upmu_set_rg_vcamd_vosel(0);}
@@ -1752,13 +1752,13 @@ void dct_pmic_VCAMD_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vcamd_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vcamd_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VCAMIO_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCAMIO_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCAMIO_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vcamio_vosel(5);}
     else if(volt == VOL_1200){ upmu_set_rg_vcamio_vosel(0);}
@@ -1770,13 +1770,13 @@ void dct_pmic_VCAMIO_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vcamio_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vcamio_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VCAMAF_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCAMAF_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCAMAF_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vcamaf_vosel(5);}
     else if(volt == VOL_1200){ upmu_set_rg_vcamaf_vosel(0);}
@@ -1788,13 +1788,13 @@ void dct_pmic_VCAMAF_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vcamaf_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vcamaf_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VGP4_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VGP4_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VGP4_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vgp4_vosel(5);}
     else if(volt == VOL_1200){ upmu_set_rg_vgp4_vosel(0);}
@@ -1806,13 +1806,13 @@ void dct_pmic_VGP4_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vgp4_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vgp4_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VGP5_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VGP5_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VGP5_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vgp5_vosel(5);}
     else if(volt == VOL_1200){ upmu_set_rg_vgp5_vosel(0);}
@@ -1824,13 +1824,13 @@ void dct_pmic_VGP5_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vgp5_vosel(6);}
     else if(volt == VOL_2000){ upmu_set_rg_vgp5_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VGP6_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VGP6_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VGP6_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vgp6_vosel(5);}
     else if(volt == VOL_1200){ upmu_set_rg_vgp6_vosel(0);}
@@ -1842,13 +1842,13 @@ void dct_pmic_VGP6_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vgp6_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vgp6_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VIBR_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VIBR_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VIBR_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vibr_vosel(6);}
     else if(volt == VOL_1300){ upmu_set_rg_vibr_vosel(0);}
@@ -1860,28 +1860,28 @@ void dct_pmic_VIBR_sel(kal_uint32 volt)
     else if(volt == VOL_3000){ upmu_set_rg_vibr_vosel(6);}
     else if(volt == VOL_3300){ upmu_set_rg_vibr_vosel(7);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
 void dct_pmic_VRTC_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VRTC_sel] No voltage can setting!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VRTC_sel] No voltage can setting!\n");
 }
 
 void dct_pmic_VTCXO_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VTCXO_sel] No voltage can setting!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VTCXO_sel] No voltage can setting!\n");
 }
 
 void dct_pmic_VA28_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[dct_pmic_VA28_sel] No voltage can setting!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[dct_pmic_VA28_sel] No voltage can setting!\n");
 }
 
 void dct_pmic_VCAMA_sel(kal_uint32 volt)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[dct_pmic_VCAMA_sel] value=%d \n", volt);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[dct_pmic_VCAMA_sel] value=%d \n", volt);
 
     if(volt == VOL_DEFAULT)     { upmu_set_rg_vcama_vosel(3);}
     else if(volt == VOL_1500){ upmu_set_rg_vcama_vosel(0);}
@@ -1889,7 +1889,7 @@ void dct_pmic_VCAMA_sel(kal_uint32 volt)
     else if(volt == VOL_2500){ upmu_set_rg_vcama_vosel(2);}
     else if(volt == VOL_2800){ upmu_set_rg_vcama_vosel(3);}
     else{
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Error Setting %d. DO nothing.\r\n", volt);
     }
 }
 
@@ -3176,7 +3176,7 @@ void PMIC_INIT_SETTING_V1(void)
 
     if(chip_version >= PMIC6397_E1_CID_CODE)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",chip_version);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] PMIC Chip = %x\n",chip_version);
         
         //put init setting from DE/SA        
         ret = pmic_config_interface(0x2,0xB,0xF,4); // [7:4]: RG_VCDT_HV_VTH; 7V OVP
@@ -3305,76 +3305,76 @@ void PMIC_INIT_SETTING_V1(void)
         ret = pmic_config_interface(0x134,0x3,0x3,2); // [3:2]: VCA15 OC;        
         #if 0
         //dump register
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x002, upmu_get_reg_value(0x002));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x00C, upmu_get_reg_value(0x00C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x01A, upmu_get_reg_value(0x01A));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x024, upmu_get_reg_value(0x024));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x02A, upmu_get_reg_value(0x02A));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x02E, upmu_get_reg_value(0x02E));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x102, upmu_get_reg_value(0x102));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x128, upmu_get_reg_value(0x128));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x130, upmu_get_reg_value(0x130));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x134, upmu_get_reg_value(0x134)); 
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x178, upmu_get_reg_value(0x178));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x17E, upmu_get_reg_value(0x17E));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x206, upmu_get_reg_value(0x206));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x210, upmu_get_reg_value(0x210));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x216, upmu_get_reg_value(0x216));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x21E, upmu_get_reg_value(0x21E));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x224, upmu_get_reg_value(0x224));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x238, upmu_get_reg_value(0x238));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x244, upmu_get_reg_value(0x244));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x24A, upmu_get_reg_value(0x24A));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x25E, upmu_get_reg_value(0x25E));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x260, upmu_get_reg_value(0x260));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x262, upmu_get_reg_value(0x262));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x264, upmu_get_reg_value(0x264));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x270, upmu_get_reg_value(0x270));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x276, upmu_get_reg_value(0x276));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x27C, upmu_get_reg_value(0x27C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x28A, upmu_get_reg_value(0x28A));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x28E, upmu_get_reg_value(0x28E));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x29C, upmu_get_reg_value(0x29C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x2B0, upmu_get_reg_value(0x2B0));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x330, upmu_get_reg_value(0x330));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x332, upmu_get_reg_value(0x332));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x336, upmu_get_reg_value(0x336));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x33C, upmu_get_reg_value(0x33C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x34A, upmu_get_reg_value(0x34A));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x356, upmu_get_reg_value(0x356));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x358, upmu_get_reg_value(0x358));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x35C, upmu_get_reg_value(0x35C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x362, upmu_get_reg_value(0x362));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x370, upmu_get_reg_value(0x370));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x372, upmu_get_reg_value(0x372));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x374, upmu_get_reg_value(0x374));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x376, upmu_get_reg_value(0x376));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x39C, upmu_get_reg_value(0x39C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x440, upmu_get_reg_value(0x440));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x500, upmu_get_reg_value(0x500));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x502, upmu_get_reg_value(0x502));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x508, upmu_get_reg_value(0x508));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x50C, upmu_get_reg_value(0x50C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x512, upmu_get_reg_value(0x512));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x55E, upmu_get_reg_value(0x55E));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x560, upmu_get_reg_value(0x560));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x566, upmu_get_reg_value(0x566));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x600, upmu_get_reg_value(0x600));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x604, upmu_get_reg_value(0x604));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x606, upmu_get_reg_value(0x606));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x60A, upmu_get_reg_value(0x60A));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x612, upmu_get_reg_value(0x612));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x632, upmu_get_reg_value(0x632));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x638, upmu_get_reg_value(0x638));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x63A, upmu_get_reg_value(0x63A));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x63C, upmu_get_reg_value(0x63C));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x714, upmu_get_reg_value(0x714));
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x71A, upmu_get_reg_value(0x71A));        
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x002, upmu_get_reg_value(0x002));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x00C, upmu_get_reg_value(0x00C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x01A, upmu_get_reg_value(0x01A));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x024, upmu_get_reg_value(0x024));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x02A, upmu_get_reg_value(0x02A));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x02E, upmu_get_reg_value(0x02E));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x102, upmu_get_reg_value(0x102));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x128, upmu_get_reg_value(0x128));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x130, upmu_get_reg_value(0x130));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x134, upmu_get_reg_value(0x134)); 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x178, upmu_get_reg_value(0x178));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x17E, upmu_get_reg_value(0x17E));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x206, upmu_get_reg_value(0x206));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x210, upmu_get_reg_value(0x210));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x216, upmu_get_reg_value(0x216));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x21E, upmu_get_reg_value(0x21E));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x224, upmu_get_reg_value(0x224));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x238, upmu_get_reg_value(0x238));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x244, upmu_get_reg_value(0x244));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x24A, upmu_get_reg_value(0x24A));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x25E, upmu_get_reg_value(0x25E));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x260, upmu_get_reg_value(0x260));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x262, upmu_get_reg_value(0x262));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x264, upmu_get_reg_value(0x264));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x270, upmu_get_reg_value(0x270));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x276, upmu_get_reg_value(0x276));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x27C, upmu_get_reg_value(0x27C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x28A, upmu_get_reg_value(0x28A));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x28E, upmu_get_reg_value(0x28E));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x29C, upmu_get_reg_value(0x29C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x2B0, upmu_get_reg_value(0x2B0));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x330, upmu_get_reg_value(0x330));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x332, upmu_get_reg_value(0x332));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x336, upmu_get_reg_value(0x336));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x33C, upmu_get_reg_value(0x33C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x34A, upmu_get_reg_value(0x34A));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x356, upmu_get_reg_value(0x356));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x358, upmu_get_reg_value(0x358));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x35C, upmu_get_reg_value(0x35C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x362, upmu_get_reg_value(0x362));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x370, upmu_get_reg_value(0x370));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x372, upmu_get_reg_value(0x372));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x374, upmu_get_reg_value(0x374));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x376, upmu_get_reg_value(0x376));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x39C, upmu_get_reg_value(0x39C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x440, upmu_get_reg_value(0x440));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x500, upmu_get_reg_value(0x500));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x502, upmu_get_reg_value(0x502));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x508, upmu_get_reg_value(0x508));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x50C, upmu_get_reg_value(0x50C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x512, upmu_get_reg_value(0x512));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x55E, upmu_get_reg_value(0x55E));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x560, upmu_get_reg_value(0x560));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x566, upmu_get_reg_value(0x566));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x600, upmu_get_reg_value(0x600));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x604, upmu_get_reg_value(0x604));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x606, upmu_get_reg_value(0x606));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x60A, upmu_get_reg_value(0x60A));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x612, upmu_get_reg_value(0x612));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x632, upmu_get_reg_value(0x632));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x638, upmu_get_reg_value(0x638));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x63A, upmu_get_reg_value(0x63A));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x63C, upmu_get_reg_value(0x63C));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x714, upmu_get_reg_value(0x714));
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_init_setting] Reg[0x%x]=0x%x\n", 0x71A, upmu_get_reg_value(0x71A));        
         #endif
     }
     else
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] Unknown PMIC Chip (%x)\n",chip_version);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[Kernel_PMIC_INIT_SETTING_V1] Unknown PMIC Chip (%x)\n",chip_version);
     }
 }
 
@@ -3437,7 +3437,7 @@ void PMIC_CUSTOM_SETTING_V1(void)
     upmu_set_rg_vgp6_sw_en(1);
     upmu_set_rg_vgp6_vosel(0x7);
     ret = pmic_read_interface(DIGLDO_CON33, &reg_val, 0xFFFF, 0);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[%s] Reg[0x%x] = 0x%x\n", __FUNCTION__, DIGLDO_CON33, reg_val);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[%s] Reg[0x%x] = 0x%x\n", __FUNCTION__, DIGLDO_CON33, reg_val);
 #endif
 }
 
@@ -3450,7 +3450,7 @@ void pmic_low_power_setting(void)
     U32 chip_version = 0;
 
     chip_version = upmu_get_cid();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_low_power_setting] CLKCTL - 20121018 by Juinn-Ting\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_low_power_setting] CLKCTL - 20121018 by Juinn-Ting\n");
 
 #if 1
     upmu_set_vio18_vsleep_en(1);
@@ -3475,7 +3475,7 @@ void pmic_low_power_setting(void)
 #endif
     
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_low_power_setting] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_low_power_setting] Done\n");
 }
 
 void pmic_setting_depends_rtc(void)
@@ -3494,7 +3494,7 @@ void pmic_setting_depends_rtc(void)
         ret = pmic_config_interface(ANALDO_CON1,    0,    0x1,    1);  // [1]=0(VTCXO_LP_SET), 
         ret = pmic_config_interface(ANALDO_CON1,    0,    0x1,    0);  // [0]=0(VTCXO_LP_SEL),
         
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_setting_depends_rtc] With 32K. Reg[0x%x]=0x%x\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_setting_depends_rtc] With 32K. Reg[0x%x]=0x%x\n", 
             ANALDO_CON1, upmu_get_reg_value(ANALDO_CON1));
     }
     else
@@ -3505,7 +3505,7 @@ void pmic_setting_depends_rtc(void)
         ret = pmic_config_interface(ANALDO_CON1,    3,    0x7,    4);  // [6:4]=3(VTCXO_SRCLK_MODE_SEL), 
         ret = pmic_config_interface(ANALDO_CON1,    1,    0x1,    0);  // [0]=1(VTCXO_LP_SEL),
 
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_setting_depends_rtc] Without 32K. Reg[0x%x]=0x%x\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_setting_depends_rtc] Without 32K. Reg[0x%x]=0x%x\n", 
             ANALDO_CON1, upmu_get_reg_value(ANALDO_CON1));
     }
 }
@@ -3520,7 +3520,7 @@ EXPORT_SYMBOL(pmic_get_gpu_status_bit_info);
 
 int get_spm_gpu_status(void)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[get_spm_gpu_status] wait spm driver service ready\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[get_spm_gpu_status] wait spm driver service ready\n");
 
     return 0;
 }
@@ -3529,7 +3529,7 @@ void pmic_gpu_power_enable(int power_en)
 {
     if(g_gpu_status_bit == 1)
     {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_gpu_power_enable] gpu is not powered by VRF18_2\n");
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_gpu_power_enable] gpu is not powered by VRF18_2\n");
     }
     else
     {
@@ -3541,7 +3541,7 @@ void pmic_gpu_power_enable(int power_en)
         {
             upmu_set_vgpu_en(0);
         }
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_gpu_power_enable] Reg[0x%x]=%x\n", 
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_gpu_power_enable] Reg[0x%x]=%x\n", 
             VGPU_CON7, upmu_get_reg_value(VGPU_CON7));
     }
 }
@@ -3553,18 +3553,18 @@ static int pmic_mt6397_probe(struct platform_device *dev)
 {
     U32 ret_val=0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6397 pmic driver probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6397 pmic driver probe!! ********\n" );
 
 #ifdef MTK_BATTERY_NO_HAL
     //init battery wakelock for battery/charger event
     wake_lock_init(&battery_suspend_lock, WAKE_LOCK_SUSPEND, "battery wakelock");    
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "init battery wakelock for battery/charger event.\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "init battery wakelock for battery/charger event.\n" );
 #endif
 
     //get PMIC CID
     ret_val=upmu_get_cid();
     g_pmic_cid=ret_val;
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "MT6397 PMIC CID=0x%x\n", ret_val );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "MT6397 PMIC CID=0x%x\n", ret_val );
 
     //VRF18_2 usage protection
     //pmic_vrf18_2_usage_protection();
@@ -3574,9 +3574,9 @@ static int pmic_mt6397_probe(struct platform_device *dev)
 
     //pmic initial setting
     PMIC_INIT_SETTING_V1();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_INIT_SETTING_V1] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_INIT_SETTING_V1] Done\n");
     PMIC_CUSTOM_SETTING_V1();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_CUSTOM_SETTING_V1] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_CUSTOM_SETTING_V1] Done\n");
 
     //pmic low power setting
     pmic_low_power_setting();
@@ -3590,10 +3590,10 @@ static int pmic_mt6397_probe(struct platform_device *dev)
     
     //PMIC Interrupt Service
     PMIC_EINT_SETTING();
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[PMIC_EINT_SETTING] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[PMIC_EINT_SETTING] Done\n");
     
     kthread_run(pmic_thread_kthread, NULL, "pmic_thread_kthread");
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] Done\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] Done\n");
 
     //Dump register
     //#ifndef USER_BUILD_KERNEL
@@ -3602,7 +3602,7 @@ static int pmic_mt6397_probe(struct platform_device *dev)
 
     #if defined(CONFIG_POWER_EXT)
     ret_val = pmic_config_interface(0x002E,0x0010,0x00FF,0);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "[pmic_thread_kthread] add for EVB\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "[pmic_thread_kthread] add for EVB\n");
     #endif
 
     return 0;
@@ -3610,32 +3610,32 @@ static int pmic_mt6397_probe(struct platform_device *dev)
 
 static int pmic_mt6397_remove(struct platform_device *dev)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6397 pmic driver remove!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6397 pmic driver remove!! ********\n" );
 
     return 0;
 }
 
 static void pmic_mt6397_shutdown(struct platform_device *dev)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6397 pmic driver shutdown!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6397 pmic driver shutdown!! ********\n" );
 }
 
 static int pmic_mt6397_suspend(struct platform_device *dev, pm_message_t state)
 {
     U32 ret=0;
 
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6397 pmic driver suspend!! ********\n" );
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6397 pmic driver suspend!! ********\n" );
 #if 0 //MT6320 config
     //Set PMIC register 0x022A bit[5:4] =00 before system into sleep mode.
     ret = pmic_config_interface(0x22A,0x0,0x3,4);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Suspend: Reg[0x%x]=0x%x\n",0x22A, upmu_get_reg_value(0x22A));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Suspend: Reg[0x%x]=0x%x\n",0x22A, upmu_get_reg_value(0x22A));
 #endif    
 
     //Set PMIC CA7, CA15 TRANS_EN to disable(0x0) before system into sleep mode.
     ret = pmic_config_interface(VCA15_CON18, 0x0, PMIC_VCA15_VOSEL_TRANS_EN_MASK, PMIC_VCA15_VOSEL_TRANS_EN_SHIFT);
     ret = pmic_config_interface(VPCA7_CON18, 0x0, PMIC_VPCA7_VOSEL_TRANS_EN_MASK, PMIC_VPCA7_VOSEL_TRANS_EN_SHIFT);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VCA15_CON18, upmu_get_reg_value(VCA15_CON18));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VPCA7_CON18, upmu_get_reg_value(VPCA7_CON18));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VCA15_CON18, upmu_get_reg_value(VCA15_CON18));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VPCA7_CON18, upmu_get_reg_value(VPCA7_CON18));
 
     return 0;
 }
@@ -3644,19 +3644,19 @@ static int pmic_mt6397_resume(struct platform_device *dev)
 {
     U32 ret=0;
 
-    //xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** MT6397 pmic driver resume!! ********\n" );
+    //xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** MT6397 pmic driver resume!! ********\n" );
     
 #if 0 // MT6320 config
     //Set PMIC register 0x022A bit[5:4] =01 after system resume.
     ret = pmic_config_interface(0x22A,0x1,0x3,4);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n",0x22A, upmu_get_reg_value(0x22A));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n",0x22A, upmu_get_reg_value(0x22A));
 #endif
     
     //Set PMIC CA7, CA15 TRANS_EN to falling enable(0x1) after system resume.
     ret = pmic_config_interface(VCA15_CON18, 0x1, PMIC_VCA15_VOSEL_TRANS_EN_MASK, PMIC_VCA15_VOSEL_TRANS_EN_SHIFT);
     ret = pmic_config_interface(VPCA7_CON18, 0x1, PMIC_VPCA7_VOSEL_TRANS_EN_MASK, PMIC_VPCA7_VOSEL_TRANS_EN_SHIFT);
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VCA15_CON18, upmu_get_reg_value(VCA15_CON18));
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VPCA7_CON18, upmu_get_reg_value(VPCA7_CON18));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VCA15_CON18, upmu_get_reg_value(VCA15_CON18));
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "Resume: Reg[0x%x]=0x%x\n", VPCA7_CON18, upmu_get_reg_value(VPCA7_CON18));
 
     return 0;
 }
@@ -3686,7 +3686,7 @@ static int mt_pmic_probe(struct platform_device *dev)
 {
     int ret_device_file = 0;
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "******** mt_pmic_probe!! ********\n" );
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "******** mt_pmic_probe!! ********\n" );
 
     ret_device_file = device_create_file(&(dev->dev), &dev_attr_pmic_access);
 
@@ -3766,28 +3766,28 @@ static int __init pmic_mt6397_init(void)
     // PMIC device driver register
     ret = platform_device_register(&pmic_mt6397_device);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6397_init] Unable to device register(%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6397_init] Unable to device register(%d)\n", ret);
         return ret;
     }
     ret = platform_driver_register(&pmic_mt6397_driver);
     if (ret) {
-        xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6397_init] Unable to register driver (%d)\n", ret);
+        xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6397_init] Unable to register driver (%d)\n", ret);
         return ret;
     }
 
     // PMIC user space access interface
     ret = platform_device_register(&mt_pmic_device);
     if (ret) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6397_init] Unable to device register(%d)\n", ret);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6397_init] Unable to device register(%d)\n", ret);
             return ret;
     }
     ret = platform_driver_register(&mt_pmic_driver);
     if (ret) {
-            xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6397_init] Unable to register driver (%d)\n", ret);
+            xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6397_init] Unable to register driver (%d)\n", ret);
             return ret;
     }
 
-    xlog_printk(ANDROID_LOG_INFO, "Power/PMIC", "****[pmic_mt6397_init] Initialization : DONE !!\n");
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/PMIC", "****[pmic_mt6397_init] Initialization : DONE !!\n");
 
     return 0;
 }
diff --git a/drivers/misc/mediatek/power/mt8127/tbl_helper_func.c b/drivers/misc/mediatek/power/mt8127/tbl_helper_func.c
index efb16e1f..33a5af99 100644
--- a/drivers/misc/mediatek/power/mt8127/tbl_helper_func.c
+++ b/drivers/misc/mediatek/power/mt8127/tbl_helper_func.c
@@ -39,7 +39,7 @@
 #ifdef CONFIG_USB_MTK_HDRC_HCD
 void tbl_charger_otg_vbus(int mode)
 {
-    xlog_printk(ANDROID_LOG_INFO, "Power/Battery", "[tbl_charger_otg_vbus] mode = %d\n", mode);
+    xlog_printk(ANDROID_LOG_DEBUG, "Power/Battery", "[tbl_charger_otg_vbus] mode = %d\n", mode);
 
     if(mode&0xFF)
     {
