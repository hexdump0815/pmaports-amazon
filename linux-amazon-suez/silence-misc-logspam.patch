diff --git a/drivers/misc/mediatek/aee/aed/monitor_hang.c b/drivers/misc/mediatek/aee/aed/monitor_hang.c
index d3b2c9f7..8f4022aa 100644
--- a/drivers/misc/mediatek/aee/aed/monitor_hang.c
+++ b/drivers/misc/mediatek/aee/aed/monitor_hang.c
@@ -455,7 +455,7 @@ static int hang_detect_thread(void *arg)
 				hang_detect_counter = hd_timeout + 4;
 				hd_detect_enabled = 0;
 			}
-			LOGE("[Hang_Detect] hang_detect disabled.\n");
+//			LOGE("[Hang_Detect] hang_detect disabled.\n");
 		}
 
 		msleep((HD_INTER) * 1000);
@@ -475,7 +475,7 @@ void aee_kernel_RT_Monitor_api(int lParam)
 		hd_detect_enabled = 0;
 		hang_detect_counter =
 			hd_timeout;
-		LOGE("[Hang_Detect] hang_detect disabled\n");
+//		LOGE("[Hang_Detect] hang_detect disabled\n");
 	} else if (lParam > 0) {
 		/* lParem=0x1000|timeout,only set in aee call when NE in system_server
 		*  so only change hang_detect_counter when call from AEE
diff --git a/drivers/misc/mediatek/performance/fliper/mt8173/fliper.c b/drivers/misc/mediatek/performance/fliper/mt8173/fliper.c
index 72d502fa..6361c9ff 100644
--- a/drivers/misc/mediatek/performance/fliper/mt8173/fliper.c
+++ b/drivers/misc/mediatek/performance/fliper/mt8173/fliper.c
@@ -91,7 +91,7 @@ static ssize_t mt_fliper_write(struct file *filp, const char *ubuf,
 	} else if (val == 5) {
 		fliper_restore_bw();
 	}
-	pr_err(" fliper option: %d\n", val);
+//	pr_err(" fliper option: %d\n", val);
 	return cnt;
 
 }
@@ -154,50 +154,50 @@ static void mt_power_pef_transfer_work(void)
 		if (pp_index == 0) {
 #ifdef CONFIG_MTK_FLIPER
 			ret = vcorefs_request_dvfs_opp(KR_EMI_MON, OPPI_PERF);
-			pr_err("[EMI DVFS FLIPER] flip to high mode, emi bw is %llu\n", emi_bw);
+//			pr_err("[EMI DVFS FLIPER] flip to high mode, emi bw is %llu\n", emi_bw);
 #endif
 		}
 		pp_index = 1 << Y_steps;
 	} else {
 		if (pp_index == 1) {
 			ret = vcorefs_request_dvfs_opp(KR_EMI_MON, OPPI_UNREQ);
-			pr_err("[EMI DVFS FLIPER] flip to low mode, emi bw is %llu\n", emi_bw);
+//			pr_err("[EMI DVFS FLIPER] flip to low mode, emi bw is %llu\n", emi_bw);
 		}
 		pp_index = pp_index >> 1;
 	}
 
-	if (fliper_debug == 1)
-		pr_err("[EMI DVFS FLIPER]:Rate:count:mode %6llu:%4d :%llu ns\n", emi_bw, pp_index, t2-t1);
+//	if (fliper_debug == 1)
+//		pr_err("[EMI DVFS FLIPER]:Rate:count:mode %6llu:%4d :%llu ns\n", emi_bw, pp_index, t2-t1);
 
 }
 
 int fliper_set_bw(int bw)
 {
 	if (bw <= BW_THRESHOLD_MAX && bw >= BW_THRESHOLD_MIN) {
-		pr_err("[EMI DVFS FLIPER] Set bdw threshold %d -> %d\n", bw_threshold, bw);
+//		pr_err("[EMI DVFS FLIPER] Set bdw threshold %d -> %d\n", bw_threshold, bw);
 		bw_threshold = bw;
 	} else {
-		pr_err("[EMI DVFS FLIPER] Set bdw threshold Error: %d (MAX:%d, MIN:%d)\n",
-				bw, BW_THRESHOLD_MAX, BW_THRESHOLD_MIN);
+//		pr_err("[EMI DVFS FLIPER] Set bdw threshold Error: %d (MAX:%d, MIN:%d)\n",
+//				bw, BW_THRESHOLD_MAX, BW_THRESHOLD_MIN);
 	}
 	return 0;
 }
 int fliper_restore_bw(void)
 {
-	pr_err("[EMI DVFS FLIPER] Restore bdw threshold %d -> %d\n", bw_threshold, BW_THRESHOLD);
+//	pr_err("[EMI DVFS FLIPER] Restore bdw threshold %d -> %d\n", bw_threshold, BW_THRESHOLD);
 	bw_threshold = BW_THRESHOLD;
 	return 0;
 }
 static void enable_fliper(void)
 {
 	fliper_enabled = 1;
-	pr_err("[EMI DVFS FLIPER] fliper enable +++\n");
+//	pr_err("[EMI DVFS FLIPER] fliper enable +++\n");
 	mod_timer(&mt_pp_transfer_timer, jiffies + msecs_to_jiffies(X_ms));
 }
 static void disable_fliper(void)
 {
 	fliper_enabled = 0;
-	pr_err("fliper disable ---\n");
+//	pr_err("fliper disable ---\n");
 	del_timer(&mt_pp_transfer_timer);
 }
 static void mt_power_pef_transfer(void)
@@ -215,7 +215,7 @@ static int fliper_pm_callback(struct notifier_block *nb,
 
 	case PM_SUSPEND_PREPARE:
 		ret = vcorefs_request_dvfs_opp(KR_EMI_MON, OPPI_UNREQ);
-		pr_err("[EMI DVFS FLIPER] Suspend and flip to E(%d)\n", ret);
+//		pr_err("[EMI DVFS FLIPER] Suspend and flip to E(%d)\n", ret);
 		pp_index = 0;
 		disable_fliper();
 		break;
@@ -248,10 +248,10 @@ static int __init init_fliper(void)
 	if (!pe)
 		return -ENOMEM;
 	bw_threshold = BW_THRESHOLD;
-	pr_err("[EMI DVFS FLIPER] prepare mt pp transfer: jiffies:%lu-->%lu\n", jiffies,
-			jiffies + msecs_to_jiffies(TIME_5SEC_IN_MS));
-	pr_err("[EMI DVFS FLIPER] -  next jiffies:%lu >>> %lu\n", jiffies,
-			jiffies + msecs_to_jiffies(X_ms));
+//	pr_err("[EMI DVFS FLIPER] prepare mt pp transfer: jiffies:%lu-->%lu\n", jiffies,
+//			jiffies + msecs_to_jiffies(TIME_5SEC_IN_MS));
+//	pr_err("[EMI DVFS FLIPER] -  next jiffies:%lu >>> %lu\n", jiffies,
+//			jiffies + msecs_to_jiffies(X_ms));
 	mod_timer(&mt_pp_transfer_timer, jiffies + msecs_to_jiffies(TIME_5SEC_IN_MS));
 	fliper_enabled = 1;
 	pm_notifier(fliper_pm_callback, 0);
diff --git a/drivers/misc/mediatek/rtc/mtk_rtc_hal_common.c b/drivers/misc/mediatek/rtc/mtk_rtc_hal_common.c
index df913fbe..8e1b33d0 100644
--- a/drivers/misc/mediatek/rtc/mtk_rtc_hal_common.c
+++ b/drivers/misc/mediatek/rtc/mtk_rtc_hal_common.c
@@ -138,9 +138,9 @@ void hal_rtc_set_spare_register(rtc_spare_enum cmd, u16 val)
 		tmp_val =
 		    rtc_read(rtc_spare_reg[cmd][RTC_REG]) & ~(rtc_spare_reg[cmd][RTC_MASK] <<
 							      rtc_spare_reg[cmd][RTC_SHIFT]);
-		hal_rtc_xinfo("rtc_spare_reg[%d] = {%d, %d, %d}\n", cmd,
-			      rtc_spare_reg[cmd][RTC_REG], rtc_spare_reg[cmd][RTC_MASK],
-			      rtc_spare_reg[cmd][RTC_SHIFT]);
+//		hal_rtc_xinfo("rtc_spare_reg[%d] = {%d, %d, %d}\n", cmd,
+//			      rtc_spare_reg[cmd][RTC_REG], rtc_spare_reg[cmd][RTC_MASK],
+//			      rtc_spare_reg[cmd][RTC_SHIFT]);
 		rtc_write(rtc_spare_reg[cmd][RTC_REG],
 			  tmp_val | ((val & rtc_spare_reg[cmd][RTC_MASK]) <<
 				     rtc_spare_reg[cmd][RTC_SHIFT]));
@@ -153,9 +153,9 @@ u16 hal_rtc_get_spare_register(rtc_spare_enum cmd)
 	u16 tmp_val;
 
 	if (cmd >= 0 && cmd < RTC_SPAR_NUM) {
-		hal_rtc_xinfo("rtc_spare_reg[%d] = {%d, %d, %d}\n", cmd,
-			      rtc_spare_reg[cmd][RTC_REG], rtc_spare_reg[cmd][RTC_MASK],
-			      rtc_spare_reg[cmd][RTC_SHIFT]);
+//		hal_rtc_xinfo("rtc_spare_reg[%d] = {%d, %d, %d}\n", cmd,
+//			      rtc_spare_reg[cmd][RTC_REG], rtc_spare_reg[cmd][RTC_MASK],
+//			      rtc_spare_reg[cmd][RTC_SHIFT]);
 		tmp_val = rtc_read(rtc_spare_reg[cmd][RTC_REG]);
 		tmp_val = (tmp_val >> rtc_spare_reg[cmd][RTC_SHIFT]) & rtc_spare_reg[cmd][RTC_MASK];
 		return tmp_val;
